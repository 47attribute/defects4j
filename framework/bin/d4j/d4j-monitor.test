#-------------------------------------------------------------------------------
# Copyright (c) 2014-2015 Ren√© Just, Darioush Jalali, and Defects4J contributors.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#-------------------------------------------------------------------------------

=pod

=head1 NAME

d4j-monitor-test -- Run a single test class or test method and monitor the class
loader.

=head1 SYNOPSIS

d4j-monitor-test -t single_test [-w work_dir]

=head1 OPTIONS

=over 4

=item B<-t C<single_test>>

Run this single test (format: <test_class>[::<test_method>])and monitor the
class loader.

=item B<-w F<work_dir>>

The working directory of the checked-out project version (optional). Default is
the current directory.

=back

=head1 DESCRIPTION

This script runs a single test class or test method and monitors the class
loader during execution.

=cut

use strict;
use warnings;

use Constants;
use Utils;
use Project;
use Getopt::Std;

#
# Issue usage message and quit
#
sub _usage {
    print "usage: $0 -t single_test [-w work_dir]\n";
    exit 1;
}

my %cmd_opts;
getopts('t:w:', \%cmd_opts) or _usage();

my $WORK_DIR = Utils::get_abs_path($cmd_opts{w} // ".");
my $TEST = $cmd_opts{t};
defined $TEST or _usage();

my $config = Utils::read_config_file("$WORK_DIR/$CONFIG");
unless(defined $config) {
    print(STDERR "$WORK_DIR is not a valid working directory!\n");
    exit 1;
}

# Instantiate project and set working directory
my $project = Project::create_project($config->{$CONFIG_PID});
$project->{prog_root} = $WORK_DIR;

# Obtain revision_id and run test
my $rev = $project->lookup($config->{$CONFIG_VID});
my $classes = $project->monitor_test($TEST, $rev);
defined $classes or die "Cannot run test!";

open(OUT, ">$WORK_DIR/loaded_classes.src") or die "Cannot write loaded classes";
for my $class (@{$classes->{src}}) {
    print(OUT $class, "\n");
}
close(OUT);

open(OUT, ">$WORK_DIR/loaded_classes.test") or die "Cannot write loaded test classes";
for my $class (@{$classes->{test}}) {
    print(OUT $class, "\n");
}
close(OUT);

1;

=pod

=head1 SEE ALSO

All valid project_ids are listed in F<Project.pm>

=cut
