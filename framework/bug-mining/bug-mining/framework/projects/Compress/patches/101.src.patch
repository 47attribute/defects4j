diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
index 1c39d952..26867f59 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
@@ -315,7 +315,6 @@ public class TarArchiveInputStream extends ArchiveInputStream {
             hasHitEOF = true;
         } else if (buffer.isEOFRecord(headerBuf)) {
             hasHitEOF = true;
-            buffer.tryToConsumeSecondEOFRecord();
         }
 
         return hasHitEOF ? null : headerBuf;
diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java
index 9c41ae58..a2d0a9a1 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java
@@ -405,30 +405,4 @@ class TarBuffer { // Not public, because only needed by the Tar IO streams
             inStream = null;
         }
     }
-
-    /**
-     * Tries to read the next record rewinding the stream if if is not a EOF record.
-     *
-     * <p>This is meant to protect against cases where a tar
-     * implemenation has written only one EOF record when two are
-     * expected.  Actually this won't help since a non-conforming
-     * implementation likely won't fill full blocks consisting of - be
-     * default - ten records either so we probably have already read
-     * beyond the archive anyway.</p>
-     */
-    void tryToConsumeSecondEOFRecord() throws IOException {
-        boolean shouldReset = true;
-        boolean marked = inStream.markSupported();
-        if (marked) {
-            inStream.mark(recordSize);
-        }
-        try {
-            shouldReset = !isEOFRecord(readRecord());
-        } finally {
-            if (shouldReset && marked) {
-                inStream.reset();
-            }
-        }
-    }
-
 }
