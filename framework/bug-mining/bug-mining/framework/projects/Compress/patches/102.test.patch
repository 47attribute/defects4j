diff --git a/src/test/java/org/apache/commons/compress/AbstractTestCase.java b/src/test/java/org/apache/commons/compress/AbstractTestCase.java
index 750a39fc..8d20bc79 100644
--- a/src/test/java/org/apache/commons/compress/AbstractTestCase.java
+++ b/src/test/java/org/apache/commons/compress/AbstractTestCase.java
@@ -27,8 +27,6 @@ import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
-import java.net.URI;
-import java.net.URL;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Locale;
@@ -73,18 +71,8 @@ public abstract class AbstractTestCase extends TestCase {
         return f;
     }
 
-    public static File getFile(String path) throws IOException {
-        URL url = AbstractTestCase.class.getClassLoader().getResource(path);
-        if (url == null) {
-            throw new FileNotFoundException("couldn't find " + path);
-        }
-        URI uri = null;
-        try {
-            uri = url.toURI();
-        } catch (java.net.URISyntaxException ex) {
-            throw new IOException(ex);
-        }
-        return new File(uri);
+    protected File getFile(String path) {
+        return new File("src/test/resources", path);
     }
 
     @Override
diff --git a/src/test/java/org/apache/commons/compress/ChainingTestCase.java b/src/test/java/org/apache/commons/compress/ChainingTestCase.java
index 4dd98194..9730c04e 100644
--- a/src/test/java/org/apache/commons/compress/ChainingTestCase.java
+++ b/src/test/java/org/apache/commons/compress/ChainingTestCase.java
@@ -30,7 +30,7 @@ import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
 public class ChainingTestCase extends AbstractTestCase {
 
     public void testTarGzip() throws Exception {
-        File file = getFile("bla.tgz");
+        File file = new File("src/test/resources/bla.tgz");
         final TarArchiveInputStream is = new TarArchiveInputStream(new GzipCompressorInputStream(new FileInputStream(file)));
         final TarArchiveEntry entry = (TarArchiveEntry)is.getNextEntry();
         assertNotNull(entry);
@@ -39,7 +39,7 @@ public class ChainingTestCase extends AbstractTestCase {
     }
 
     public void testTarBzip2() throws Exception {
-        File file = getFile("bla.tar.bz2");
+        File file = new File("src/test/resources/bla.tar.bz2");
         final TarArchiveInputStream is = new TarArchiveInputStream(new BZip2CompressorInputStream(new FileInputStream(file)));
         final TarArchiveEntry entry = (TarArchiveEntry)is.getNextEntry();
         assertNotNull(entry);
diff --git a/src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java b/src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java
index 61c1a74b..6de6f8fe 100644
--- a/src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java
+++ b/src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java
@@ -21,7 +21,7 @@ package org.apache.commons.compress;
 import java.io.BufferedInputStream;
 import java.io.File;
 import java.io.FileInputStream;
-import java.io.IOException;
+import java.io.FileNotFoundException;
 import java.net.URL;
 
 import org.apache.commons.compress.archivers.ArchiveException;
@@ -38,7 +38,7 @@ public final class DetectArchiverTestCase extends AbstractTestCase {
 
     final ClassLoader classLoader = getClass().getClassLoader();
 
-    public void testDetectionNotArchive() throws IOException {
+    public void testDetectionNotArchive() throws FileNotFoundException {
         try {
             getStreamFor("test.txt");
             fail("Expected ArchiveException");
@@ -83,10 +83,12 @@ public final class DetectArchiverTestCase extends AbstractTestCase {
     }
 
     private ArchiveInputStream getStreamFor(String resource)
-            throws ArchiveException, IOException {
+            throws ArchiveException, FileNotFoundException {
+        final URL rsc = classLoader.getResource(resource);
+        assertNotNull("Could not find resource "+resource,rsc);
         return factory.createArchiveInputStream(
                    new BufferedInputStream(new FileInputStream(
-                       getFile(resource))));
+                       new File(rsc.getFile()))));
     }
 
     // Check that the empty archives created by the code are readable
diff --git a/src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java b/src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java
index c3a77c3e..ffeba446 100644
--- a/src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java
+++ b/src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java
@@ -18,12 +18,10 @@
  */
 package org.apache.commons.compress;
 
-import static org.apache.commons.compress.AbstractTestCase.getFile;
-
 import java.io.BufferedInputStream;
 import java.io.File;
 import java.io.FileInputStream;
-import java.io.IOException;
+import java.io.FileNotFoundException;
 import java.net.URL;
 
 import junit.framework.TestCase;
@@ -56,10 +54,13 @@ public final class DetectCompressorTestCase extends TestCase {
     }
 
     private CompressorInputStream getStreamFor(String resource)
-            throws CompressorException, IOException {
+            throws CompressorException, FileNotFoundException {
+
+        final URL rsc = classLoader.getResource(resource);
+        assertNotNull("Could not find resource "+resource,rsc);
         return factory.createCompressorInputStream(
                    new BufferedInputStream(new FileInputStream(
-                       getFile(resource))));
+                       new File(rsc.getFile()))));
     }
 
 }
diff --git a/src/test/java/org/apache/commons/compress/archivers/LongPathTest.java b/src/test/java/org/apache/commons/compress/archivers/LongPathTest.java
index 73569f14..142dcd13 100644
--- a/src/test/java/org/apache/commons/compress/archivers/LongPathTest.java
+++ b/src/test/java/org/apache/commons/compress/archivers/LongPathTest.java
@@ -62,7 +62,9 @@ public class LongPathTest extends AbstractTestCase {
 
     public static TestSuite suite() throws IOException{
         TestSuite suite = new TestSuite("LongPathTests");
-        File arcdir = getFile("longpath");
+        URL resource = classLoader.getResource("longpath");
+        assertNotNull("Cannot find 'longpath' resource",resource);
+        File arcdir =new File(resource.getFile());
         assertTrue(arcdir.exists());
         File listing= new File(arcdir,"files.txt");
         assertTrue("File listing is readable",listing.canRead());
diff --git a/src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java b/src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java
index 2c0acc86..15a9088b 100644
--- a/src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java
+++ b/src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java
@@ -18,17 +18,18 @@
 
 package org.apache.commons.compress.archivers.tar;
 
-import static org.apache.commons.compress.AbstractTestCase.getFile;
-
 import java.io.File;
 import java.io.FileInputStream;
+import java.net.URI;
+import java.net.URL;
 
 import junit.framework.TestCase;
 
 public class SparseFilesTest extends TestCase {
 
     public void testOldGNU() throws Throwable {
-        File file = getFile("oldgnu_sparse.tar");
+        URL tar = getClass().getResource("/oldgnu_sparse.tar");
+        File file = new File(new URI(tar.toString()));
         TarArchiveInputStream tin = null;
         try {
             tin = new TarArchiveInputStream(new FileInputStream(file));
diff --git a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java
index e8679de8..9cf9284e 100644
--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java
+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java
@@ -18,7 +18,6 @@
 
 package org.apache.commons.compress.archivers.tar;
 
-import static org.apache.commons.compress.AbstractTestCase.getFile;
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
@@ -26,9 +25,12 @@ import static org.junit.Assert.fail;
 
 import java.io.ByteArrayInputStream;
 import java.io.ByteArrayOutputStream;
+import java.io.File;
 import java.io.FileInputStream;
 import java.io.InputStream;
 import java.io.IOException;
+import java.net.URI;
+import java.net.URL;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.Map;
@@ -76,9 +78,10 @@ public class TarArchiveInputStreamTest {
 
     @Test
     public void workaroundForBrokenTimeHeader() throws Exception {
+        URL tar = getClass().getResource("/simple-aix-native-tar.tar");
         TarArchiveInputStream in = null;
         try {
-            in = new TarArchiveInputStream(new FileInputStream(getFile("simple-aix-native-tar.tar")));
+            in = new TarArchiveInputStream(new FileInputStream(new File(new URI(tar.toString()))));
             TarArchiveEntry tae = in.getNextTarEntry();
             tae = in.getNextTarEntry();
             assertEquals("sample/link-to-txt-file.lnk", tae.getName());
@@ -94,19 +97,20 @@ public class TarArchiveInputStreamTest {
 
     @Test
     public void datePriorToEpochInGNUFormat() throws Exception {
-        datePriorToEpoch("preepoch-star.tar");
+        datePriorToEpoch("/preepoch-star.tar");
     }
 
 
     @Test
     public void datePriorToEpochInPAXFormat() throws Exception {
-        datePriorToEpoch("preepoch-posix.tar");
+        datePriorToEpoch("/preepoch-posix.tar");
     }
 
     private void datePriorToEpoch(String archive) throws Exception {
+        URL tar = getClass().getResource(archive);
         TarArchiveInputStream in = null;
         try {
-            in = new TarArchiveInputStream(new FileInputStream(getFile(archive)));
+            in = new TarArchiveInputStream(new FileInputStream(new File(new URI(tar.toString()))));
             TarArchiveEntry tae = in.getNextTarEntry();
             assertEquals("foo", tae.getName());
             Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("GMT"));
diff --git a/src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java b/src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java
index a98850c2..1a5b9735 100644
--- a/src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java
+++ b/src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java
@@ -18,19 +18,21 @@
 
 package org.apache.commons.compress.archivers.zip;
 
-import static org.apache.commons.compress.AbstractTestCase.getFile;
-
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.net.URL;
 
 import junit.framework.TestCase;
 
 public class EncryptedArchiveTest extends TestCase {
 
     public void testReadPasswordEncryptedEntryViaZipFile()
-        throws IOException {
-        File file = getFile("password-encrypted.zip");
+        throws IOException, URISyntaxException {
+        URL zip = getClass().getResource("/password-encrypted.zip");
+        File file = new File(new URI(zip.toString()));
         ZipFile zf = null;
         try {
             zf = new ZipFile(file);
@@ -51,8 +53,9 @@ public class EncryptedArchiveTest extends TestCase {
     }
 
     public void testReadPasswordEncryptedEntryViaStream()
-        throws IOException {
-        File file = getFile("password-encrypted.zip");
+        throws IOException, URISyntaxException {
+        URL zip = getClass().getResource("/password-encrypted.zip");
+        File file = new File(new URI(zip.toString()));
         ZipArchiveInputStream zin = null;
         try {
             zin = new ZipArchiveInputStream(new FileInputStream(file));
diff --git a/src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java b/src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java
index 2c1902f0..e89a51d3 100644
--- a/src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java
+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java
@@ -18,11 +18,12 @@
 
 package org.apache.commons.compress.archivers.zip;
 
-import static org.apache.commons.compress.AbstractTestCase.getFile;
-
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.net.URL;
 
 import junit.framework.TestCase;
 
@@ -65,10 +66,12 @@ public class Maven221MultiVolumeTest extends TestCase {
     private static final String LAST_ENTRY_NAME =
         "apache-maven-2.2.1/lib/maven-2.2.1-uber.jar";
 
-    public void testRead7ZipMultiVolumeArchiveForStream() throws IOException {
+    public void testRead7ZipMultiVolumeArchiveForStream() throws IOException,
+            URISyntaxException {
 
-        FileInputStream archive =
-            new FileInputStream(getFile("apache-maven-2.2.1.zip.001"));
+        URL zip = getClass().getResource("/apache-maven-2.2.1.zip.001");
+        FileInputStream archive = new FileInputStream(
+            new File(new URI(zip.toString())));
         ZipArchiveInputStream zi = null;
         try {
             zi = new ZipArchiveInputStream(archive,null,false);
@@ -111,8 +114,10 @@ public class Maven221MultiVolumeTest extends TestCase {
         }
     }
 
-    public void testRead7ZipMultiVolumeArchiveForFile() throws IOException {
-        File file = getFile("apache-maven-2.2.1.zip.001");
+    public void testRead7ZipMultiVolumeArchiveForFile()
+        throws URISyntaxException {
+        URL zip = getClass().getResource("/apache-maven-2.2.1.zip.001");
+        File file = new File(new URI(zip.toString()));
         try {
             new ZipFile(file);
             fail("Expected ZipFile to fail");
diff --git a/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java b/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java
index aecbc7ff..a4468aff 100644
--- a/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java
+++ b/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java
@@ -18,14 +18,14 @@
 
 package org.apache.commons.compress.archivers.zip;
 
-import static org.apache.commons.compress.AbstractTestCase.getFile;
-
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.UnsupportedEncodingException;
+import java.net.URI;
 import java.net.URISyntaxException;
+import java.net.URL;
 import java.nio.ByteBuffer;
 import java.util.Enumeration;
 import java.util.zip.CRC32;
@@ -87,7 +87,8 @@ public class UTF8ZipFilesTest extends AbstractTestCase {
      * - which is true for OIL_BARREL_TXT.
      */
     public void testRead7ZipArchive() throws IOException, URISyntaxException {
-        File archive = getFile("utf8-7zip-test.zip");
+        URL zip = getClass().getResource("/utf8-7zip-test.zip");
+        File archive = new File(new URI(zip.toString()));
         ZipFile zf = null;
         try {
             zf = new ZipFile(archive, CP437, false);
@@ -101,8 +102,9 @@ public class UTF8ZipFilesTest extends AbstractTestCase {
 
     public void testRead7ZipArchiveForStream() throws IOException,
                                                       URISyntaxException {
+        URL zip = getClass().getResource("/utf8-7zip-test.zip");
         FileInputStream archive =
-            new FileInputStream(getFile("utf8-7zip-test.zip"));
+            new FileInputStream(new File(new URI(zip.toString())));
         ZipArchiveInputStream zi = null;
         try {
             zi = new ZipArchiveInputStream(archive, CP437, false);
@@ -121,7 +123,8 @@ public class UTF8ZipFilesTest extends AbstractTestCase {
      * the central directory.
      */
     public void testReadWinZipArchive() throws IOException, URISyntaxException {
-        File archive = getFile("utf8-winzip-test.zip");
+        URL zip = getClass().getResource("/utf8-winzip-test.zip");
+        File archive = new File(new URI(zip.toString()));
         ZipFile zf = null;
         try {
             zf = new ZipFile(archive, null, true);
@@ -147,8 +150,9 @@ public class UTF8ZipFilesTest extends AbstractTestCase {
 
     public void testReadWinZipArchiveForStream() throws IOException,
                                                       URISyntaxException {
+        URL zip = getClass().getResource("/utf8-winzip-test.zip");
         FileInputStream archive =
-            new FileInputStream(getFile("utf8-winzip-test.zip"));
+            new FileInputStream(new File(new URI(zip.toString())));
         ZipArchiveInputStream zi = null;
         try {
             zi = new ZipArchiveInputStream(archive, null, true);
@@ -200,7 +204,8 @@ public class UTF8ZipFilesTest extends AbstractTestCase {
 
     public void testRawNameReadFromZipFile()
         throws IOException, URISyntaxException {
-        File archive = getFile("utf8-7zip-test.zip");
+        URL zip = getClass().getResource("/utf8-7zip-test.zip");
+        File archive = new File(new URI(zip.toString()));
         ZipFile zf = null;
         try {
             zf = new ZipFile(archive, CP437, false);
@@ -212,8 +217,9 @@ public class UTF8ZipFilesTest extends AbstractTestCase {
 
     public void testRawNameReadFromStream()
         throws IOException, URISyntaxException {
+        URL zip = getClass().getResource("/utf8-7zip-test.zip");
         FileInputStream archive =
-            new FileInputStream(getFile("utf8-7zip-test.zip"));
+            new FileInputStream(new File(new URI(zip.toString())));
         ZipArchiveInputStream zi = null;
         try {
             zi = new ZipArchiveInputStream(archive, CP437, false);
diff --git a/src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java b/src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java
index 9b44020a..0499230e 100644
--- a/src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java
+++ b/src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java
@@ -21,6 +21,8 @@ import org.junit.Before;
 import org.junit.Test;
 
 import java.io.File;
+import java.net.URI;
+import java.net.URL;
 import java.text.SimpleDateFormat;
 import java.util.Arrays;
 import java.util.Calendar;
@@ -29,7 +31,6 @@ import java.util.Enumeration;
 import java.util.TimeZone;
 import java.util.zip.ZipException;
 
-import static org.apache.commons.compress.AbstractTestCase.getFile;
 import static org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.ACCESS_TIME_BIT;
 import static org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.CREATE_TIME_BIT;
 import static org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp.MODIFY_TIME_BIT;
@@ -86,7 +87,8 @@ public class X5455_ExtendedTimestampTest {
         1999's acc time:  Jan 1st, 1999-01-01/00:00:03
          */
 
-        File archive = getFile("COMPRESS-210_unix_time_zip_test.zip");
+        URL zip = getClass().getResource("/COMPRESS-210_unix_time_zip_test.zip");
+        File archive = new File(new URI(zip.toString()));
         ZipFile zf = null;
 
         try {
diff --git a/src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java b/src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java
index 97b87e44..0fa90eef 100644
--- a/src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java
+++ b/src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java
@@ -22,11 +22,12 @@ import org.junit.Before;
 import org.junit.Test;
 
 import java.io.File;
+import java.net.URI;
+import java.net.URL;
 import java.util.Arrays;
 import java.util.Enumeration;
 import java.util.zip.ZipException;
 
-import static org.apache.commons.compress.AbstractTestCase.getFile;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
@@ -45,7 +46,8 @@ public class X7875_NewUnixTest {
 
     @Test
     public void testSampleFile() throws Exception {
-        File archive = getFile("COMPRESS-211_uid_gid_zip_test.zip");
+        URL zip = getClass().getResource("/COMPRESS-211_uid_gid_zip_test.zip");
+        File archive = new File(new URI(zip.toString()));
         ZipFile zf = null;
 
         try {
diff --git a/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java b/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java
index b8529b56..c377a1b8 100644
--- a/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java
+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java
@@ -18,7 +18,6 @@
 
 package org.apache.commons.compress.archivers.zip;
 
-import static org.apache.commons.compress.AbstractTestCase.getFile;
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
@@ -36,6 +35,8 @@ import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.RandomAccessFile;
+import java.net.URI;
+import java.net.URL;
 import java.util.Enumeration;
 import java.util.Random;
 import java.util.zip.ZipEntry;
@@ -2319,48 +2320,56 @@ public class Zip64SupportIT {
         }
     }
 
+    private static File getFile(String name) throws Throwable {
+        URL url = Zip64SupportIT.class.getResource(name);
+        assumeNotNull(url);
+        File file = new File(new URI(url.toString()));
+        assumeTrue(file.exists());
+        return file;
+    }
+
     private static File get5GBZerosFile() throws Throwable {
-        return getFile("5GB_of_Zeros.zip");
+        return getFile("/5GB_of_Zeros.zip");
     }
 
     private static File get5GBZerosFileGeneratedBy7ZIP() throws Throwable {
-        return getFile("5GB_of_Zeros_7ZIP.zip");
+        return getFile("/5GB_of_Zeros_7ZIP.zip");
     }
 
     private static File get5GBZerosFileGeneratedByJava7Jar() throws Throwable {
-        return getFile("5GB_of_Zeros_jar.zip");
+        return getFile("/5GB_of_Zeros_jar.zip");
     }
 
     private static File get5GBZerosFileGeneratedByWinZIP() throws Throwable {
-        return getFile("5GB_of_Zeros_WinZip.zip");
+        return getFile("/5GB_of_Zeros_WinZip.zip");
     }
 
     private static File get5GBZerosFileGeneratedByPKZip() throws Throwable {
-        return getFile("5GB_of_Zeros_PKZip.zip");
+        return getFile("/5GB_of_Zeros_PKZip.zip");
     }
 
     private static File get100KFileFile() throws Throwable {
-        return getFile("100k_Files.zip");
+        return getFile("/100k_Files.zip");
     }
 
     private static File get100KFileFileGeneratedBy7ZIP() throws Throwable {
-        return getFile("100k_Files_7ZIP.zip");
+        return getFile("/100k_Files_7ZIP.zip");
     }
 
     private static File get100KFileFileGeneratedByWinCF() throws Throwable {
-        return getFile("100k_Files_WindowsCompressedFolders.zip");
+        return getFile("/100k_Files_WindowsCompressedFolders.zip");
     }
 
     private static File get100KFileFileGeneratedByJava7Jar() throws Throwable {
-        return getFile("100k_Files_jar.zip");
+        return getFile("/100k_Files_jar.zip");
     }
 
     private static File get100KFileFileGeneratedByWinZIP() throws Throwable {
-        return getFile("100k_Files_WinZIP.zip");
+        return getFile("/100k_Files_WinZIP.zip");
     }
 
     private static File get100KFileFileGeneratedByPKZip() throws Throwable {
-        return getFile("100k_Files_PKZip.zip");
+        return getFile("/100k_Files_PKZip.zip");
     }
 
     private static File getTempFile(String testName) throws Throwable {
diff --git a/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java b/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java
index 315d610b..4dfcf9fa 100644
--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java
+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java
@@ -18,12 +18,12 @@
 
 package org.apache.commons.compress.archivers.zip;
 
-import static org.apache.commons.compress.AbstractTestCase.getFile;
-
 import junit.framework.TestCase;
 
 import java.io.ByteArrayOutputStream;
 import java.io.File;
+import java.net.URI;
+import java.net.URL;
 import java.util.Enumeration;
 import java.util.TreeMap;
 import java.util.zip.ZipEntry;
@@ -59,7 +59,8 @@ public class ZipArchiveEntryTest extends TestCase {
         // I looked into creating a test with hard links, but zip does not appear to
         // support hard links, so nevermind.
 
-        File archive = getFile("COMPRESS-214_unix_symlinks.zip");
+        URL zip = getClass().getResource("/COMPRESS-214_unix_symlinks.zip");
+        File archive = new File(new URI(zip.toString()));
         ZipFile zf = null;
 
         try {
diff --git a/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java b/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java
index 8f8f2692..47c06c4e 100644
--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java
+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java
@@ -18,7 +18,6 @@
 
 package org.apache.commons.compress.archivers.zip;
 
-import static org.apache.commons.compress.AbstractTestCase.getFile;
 import static org.junit.Assert.assertArrayEquals;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
@@ -27,6 +26,8 @@ import java.io.BufferedInputStream;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.InputStream;
+import java.net.URI;
+import java.net.URL;
 
 import org.junit.Test;
 
@@ -37,9 +38,10 @@ public class ZipArchiveInputStreamTest {
      */
     @Test
     public void winzipBackSlashWorkaround() throws Exception {
+        URL zip = getClass().getResource("/test-winzip.zip");
         ZipArchiveInputStream in = null;
         try {
-            in = new ZipArchiveInputStream(new FileInputStream(getFile("test-winzip.zip")));
+            in = new ZipArchiveInputStream(new FileInputStream(new File(new URI(zip.toString()))));
             ZipArchiveEntry zae = in.getNextZipEntry();
             zae = in.getNextZipEntry();
             zae = in.getNextZipEntry();
@@ -56,10 +58,11 @@ public class ZipArchiveInputStreamTest {
      */
     @Test
     public void properUseOfInflater() throws Exception {
+        URL zip = getClass().getResource("/COMPRESS-189.zip");
         ZipFile zf = null;
         ZipArchiveInputStream in = null;
         try {
-            zf = new ZipFile(getFile("COMPRESS-189.zip"));
+            zf = new ZipFile(new File(new URI(zip.toString())));
             ZipArchiveEntry zae = zf.getEntry("USD0558682-20080101.ZIP");
             in = new ZipArchiveInputStream(new BufferedInputStream(zf.getInputStream(zae)));
             ZipArchiveEntry innerEntry;
diff --git a/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java b/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java
index 25cdf049..45fa2b2a 100644
--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java
+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java
@@ -18,12 +18,12 @@
 
 package org.apache.commons.compress.archivers.zip;
 
-import static org.apache.commons.compress.AbstractTestCase.getFile;
-
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.net.URI;
+import java.net.URL;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.zip.ZipEntry;
@@ -145,7 +145,8 @@ public class ZipFileTest extends TestCase {
      * @see "https://issues.apache.org/jira/browse/COMPRESS-176"
      */
     public void testWinzipBackSlashWorkaround() throws Exception {
-        File archive = getFile("test-winzip.zip");
+        URL zip = getClass().getResource("/test-winzip.zip");
+        File archive = new File(new URI(zip.toString()));
         zf = new ZipFile(archive);
         assertNull(zf.getEntry("\u00e4\\\u00fc.txt"));
         assertNotNull(zf.getEntry("\u00e4/\u00fc.txt"));
@@ -157,7 +158,8 @@ public class ZipFileTest extends TestCase {
      * >COMPRESS-208</a>.
      */
     public void testSkipsPK00Prefix() throws Exception {
-        File archive = getFile("COMPRESS-208.zip");
+        URL zip = getClass().getResource("/COMPRESS-208.zip");
+        File archive = new File(new URI(zip.toString()));
         zf = new ZipFile(archive);
         assertNotNull(zf.getEntry("test1.xml"));
         assertNotNull(zf.getEntry("test2.xml"));
@@ -174,7 +176,8 @@ public class ZipFileTest extends TestCase {
      * central directory order is different from entry data order.
      */
     private void readOrderTest() throws Exception {
-        File archive = getFile("ordertest.zip");
+        URL zip = getClass().getResource("/ordertest.zip");
+        File archive = new File(new URI(zip.toString()));
         zf = new ZipFile(archive);
     }
 
