diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
index de0d82ea..cc2fc5c9 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
@@ -25,12 +25,9 @@ import java.io.RandomAccessFile;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.Comparator;
-import java.util.Deque;
 import java.util.Enumeration;
 import java.util.HashMap;
-import java.util.Iterator;
-import java.util.LinkedList;
-import java.util.List;
+import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.zip.Inflater;
 import java.util.zip.InflaterInputStream;
@@ -86,17 +83,17 @@ public class ZipFile {
     private static final int POS_3 = 3;
 
     /**
-     * List of entries in the order they appear inside the central
-     * directory.
+     * Maps ZipArchiveEntrys to two longs, recording the offsets of
+     * the local file headers and the start of entry data.
      */
-    private final List<ZipArchiveEntry> entries =
-        new LinkedList<ZipArchiveEntry>();
+    private final Map<ZipArchiveEntry, OffsetEntry> entries =
+        new LinkedHashMap<ZipArchiveEntry, OffsetEntry>(HASH_SIZE);
 
     /**
-     * Maps String to list of ZipArchiveEntrys, name -> actual entries.
+     * Maps String to ZipArchiveEntrys, name -> actual entry.
      */
-    private final Map<String, Deque<ZipArchiveEntry>> nameMap =
-        new HashMap<String, Deque<ZipArchiveEntry>>(HASH_SIZE);
+    private final Map<String, ZipArchiveEntry> nameMap =
+        new HashMap<String, ZipArchiveEntry>(HASH_SIZE);
 
     private static final class OffsetEntry {
         private long headerOffset = -1;
@@ -276,7 +273,7 @@ public class ZipFile {
      * @return all entries as {@link ZipArchiveEntry} instances
      */
     public Enumeration<ZipArchiveEntry> getEntries() {
-        return Collections.enumeration(entries);
+        return Collections.enumeration(entries.keySet());
     }
 
     /**
@@ -290,7 +287,8 @@ public class ZipFile {
      * @since 1.1
      */
     public Enumeration<ZipArchiveEntry> getEntriesInPhysicalOrder() {
-        ZipArchiveEntry[] allEntries = entries.toArray(new ZipArchiveEntry[0]);
+        ZipArchiveEntry[] allEntries =
+            entries.keySet().toArray(new ZipArchiveEntry[0]);
         Arrays.sort(allEntries, OFFSET_COMPARATOR);
         return Collections.enumeration(Arrays.asList(allEntries));
     }
@@ -298,51 +296,12 @@ public class ZipFile {
     /**
      * Returns a named entry - or {@code null} if no entry by
      * that name exists.
-     *
-     * <p>If multiple entries with the same name exist the first entry
-     * in the archive's central directory by that name is
-     * returned.</p>
-     *
      * @param name name of the entry.
      * @return the ZipArchiveEntry corresponding to the given name - or
      * {@code null} if not present.
      */
     public ZipArchiveEntry getEntry(String name) {
-        Deque<ZipArchiveEntry> entriesOfThatName = nameMap.get(name);
-        return entriesOfThatName != null ? entriesOfThatName.getFirst() : null;
-    }
-
-    /**
-     * Returns all named entries in the same order they appear within
-     * the archive's central directory.
-     *
-     * @param name name of the entry.
-     * @return the Iterator<ZipArchiveEntry> corresponding to the
-     * given name
-     * @since 1.6
-     */
-    public Iterator<ZipArchiveEntry> getEntries(String name) {
-        Deque<ZipArchiveEntry> entriesOfThatName = nameMap.get(name);
-        return entriesOfThatName != null ? entriesOfThatName.iterator()
-            : Collections.<ZipArchiveEntry>emptyList().iterator();
-    }
-
-    /**
-     * Returns all named entries in the same order their contents
-     * appear within the archive.
-     *
-     * @param name name of the entry.
-     * @return the Iterator<ZipArchiveEntry> corresponding to the
-     * given name
-     * @since 1.6
-     */
-    public Iterator<ZipArchiveEntry> getEntriesInPhysicalOrder(String name) {
-        ZipArchiveEntry[] entriesOfThatName = new ZipArchiveEntry[0];
-        if (nameMap.containsKey(name)) {
-            entriesOfThatName = nameMap.get(name).toArray(entriesOfThatName);
-            Arrays.sort(entriesOfThatName, OFFSET_COMPARATOR);
-        }
-        return Arrays.asList(entriesOfThatName).iterator();
+        return nameMap.get(name);
     }
 
     /**
@@ -366,12 +325,10 @@ public class ZipFile {
      */
     public InputStream getInputStream(ZipArchiveEntry ze)
         throws IOException, ZipException {
-        if (!(ze instanceof Entry)) {
+        OffsetEntry offsetEntry = entries.get(ze);
+        if (offsetEntry == null) {
             return null;
         }
-        // checked just above
-        @SuppressWarnings("unchecked") OffsetEntry offsetEntry =
-            ((Entry) ze).getOffsetEntry();
         ZipUtil.checkRequestedFeatures(ze);
         long start = offsetEntry.dataOffset;
         BoundedInputStream bis =
@@ -517,8 +474,7 @@ public class ZipFile {
         throws IOException {
         archive.readFully(CFH_BUF);
         int off = 0;
-        OffsetEntry offset = new OffsetEntry();
-        Entry ze = new Entry(offset);
+        ZipArchiveEntry ze = new ZipArchiveEntry();
 
         int versionMadeBy = ZipShort.getValue(CFH_BUF, off);
         off += SHORT;
@@ -573,9 +529,10 @@ public class ZipFile {
         ze.setName(entryEncoding.decode(fileName), fileName);
 
         // LFH offset,
+        OffsetEntry offset = new OffsetEntry();
         offset.headerOffset = ZipLong.getValue(CFH_BUF, off);
         // data offset will be filled later
-        entries.add(ze);
+        entries.put(ze, offset);
 
         byte[] cdExtraData = new byte[extraLen];
         archive.readFully(cdExtraData);
@@ -894,11 +851,16 @@ public class ZipFile {
     private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>
                                             entriesWithoutUTF8Flag)
         throws IOException {
-        for (Iterator<ZipArchiveEntry> it = entries.iterator(); it.hasNext(); ) {
-            // entries is filled in populateFromCentralDirectory and
-            // never modified
-            @SuppressWarnings("unchecked") Entry ze = (Entry) it.next();
-            OffsetEntry offsetEntry = ze.getOffsetEntry();
+        // changing the name of a ZipArchiveEntry is going to change
+        // the hashcode - see COMPRESS-164
+        // Map needs to be reconstructed in order to keep central
+        // directory order
+        Map<ZipArchiveEntry, OffsetEntry> origMap =
+            new LinkedHashMap<ZipArchiveEntry, OffsetEntry>(entries);
+        entries.clear();
+        for (Map.Entry<ZipArchiveEntry, OffsetEntry> ent : origMap.entrySet()) {
+            ZipArchiveEntry ze = ent.getKey();
+            OffsetEntry offsetEntry = ent.getValue();
             long offset = offsetEntry.headerOffset;
             archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);
             archive.readFully(SHORT_BUF);
@@ -921,18 +883,13 @@ public class ZipFile {
                 + SHORT + SHORT + fileNameLen + extraFieldLen;
 
             if (entriesWithoutUTF8Flag.containsKey(ze)) {
+                String orig = ze.getName();
                 NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
                 ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
                                                          nc.comment);
             }
-
-            String name = ze.getName();
-            Deque<ZipArchiveEntry> entriesOfThatName = nameMap.get(name);
-            if (entriesOfThatName == null) {
-                entriesOfThatName = new LinkedList<ZipArchiveEntry>();
-                nameMap.put(name, entriesOfThatName);
-            }
-            entriesOfThatName.addLast(ze);
+            entries.put(ze, offsetEntry);
+            nameMap.put(ze.getName(), ze);
         }
     }
 
@@ -1039,54 +996,16 @@ public class ZipFile {
                 return 0;
             }
 
-            @SuppressWarnings("unchecked") Entry ent1 =
-                e1 instanceof Entry ? (Entry) e1 : null;
-            @SuppressWarnings("unchecked") Entry ent2 =
-                e2 instanceof Entry ? (Entry) e2 : null;
-            if (ent1 == null) {
+            OffsetEntry off1 = entries.get(e1);
+            OffsetEntry off2 = entries.get(e2);
+            if (off1 == null) {
                 return 1;
             }
-            if (ent2 == null) {
+            if (off2 == null) {
                 return -1;
             }
-            long val = (ent1.getOffsetEntry().headerOffset
-                        - ent2.getOffsetEntry().headerOffset);
+            long val = (off1.headerOffset - off2.headerOffset);
             return val == 0 ? 0 : val < 0 ? -1 : +1;
         }
     };
-
-    /**
-     * Extends ZipArchiveEntry to store the offset within the archive.
-     */
-    private static class Entry extends ZipArchiveEntry {
-
-        private final OffsetEntry offsetEntry;
-
-        Entry(OffsetEntry offset) {
-            this.offsetEntry = offset;
-        }
-
-        OffsetEntry getOffsetEntry() {
-            return offsetEntry;
-        }
-
-        @Override
-        public int hashCode() {
-            return 3 * super.hashCode()
-                + (int) (offsetEntry.headerOffset % Integer.MAX_VALUE);
-        }
-
-        @Override
-        public boolean equals(Object other) {
-            if (super.equals(other)) {
-                // super.equals would return false otherwise
-                @SuppressWarnings("unchecked") Entry otherEntry = (Entry) other;
-                return offsetEntry.headerOffset
-                        == otherEntry.offsetEntry.headerOffset
-                    && offsetEntry.dataOffset
-                        == otherEntry.offsetEntry.dataOffset;
-            }
-            return false;
-        }
-    }
 }
