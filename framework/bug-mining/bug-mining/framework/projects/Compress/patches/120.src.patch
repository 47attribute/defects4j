diff --git a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
index 8d7c8764..ff8c7451 100644
--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
@@ -116,7 +116,7 @@ public class ArchiveStreamFactory {
     private String entryEncoding = null;
 
     /**
-     * Returns the encoding to use for arj, zip, dump and tar files,
+     * Returns the encoding to use for arj, zip and tar files,
      * or null for the default.
      *
      * @return entry encoding, or null
@@ -127,8 +127,8 @@ public class ArchiveStreamFactory {
     }
 
     /**
-     * Sets the encoding to use for arj, zip, dump and tar files.  Use
-     * null for the default.
+     * Sets the encoding to use for arj, zip and tar files.
+     * Use null for the default.
      *
      * @since 1.5
      */
@@ -188,11 +188,7 @@ public class ArchiveStreamFactory {
             return new CpioArchiveInputStream(in);
         }
         if (DUMP.equalsIgnoreCase(archiverName)) {
-            if (entryEncoding != null) {
-                return new DumpArchiveInputStream(in, entryEncoding);
-            } else {
-                return new DumpArchiveInputStream(in);
-            }
+            return new DumpArchiveInputStream(in);
         }
 
         throw new ArchiveException("Archiver: " + archiverName + " not found.");
diff --git a/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java
index 131f977d..e954a1bf 100644
--- a/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java
@@ -20,8 +20,6 @@ package org.apache.commons.compress.archivers.dump;
 
 import org.apache.commons.compress.archivers.ArchiveException;
 import org.apache.commons.compress.archivers.ArchiveInputStream;
-import org.apache.commons.compress.archivers.zip.ZipEncoding;
-import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
 
 import java.io.EOFException;
 import java.io.IOException;
@@ -41,11 +39,6 @@ import java.util.Stack;
  * the archive, and the read each entry as a normal input stream
  * using read().
  *
- * There doesn't seem to exist a hint on the encoding of string values
- * in any piece documentation.  Given the main purpose of dump/restore
- * is backing up a system it seems very likely the format uses the
- * current default encoding of the system.
- *
  * @NotThreadSafe
  */
 public class DumpArchiveInputStream extends ArchiveInputStream {
@@ -72,34 +65,14 @@ public class DumpArchiveInputStream extends ArchiveInputStream {
     private Queue<DumpArchiveEntry> queue;
 
     /**
-     * The encoding to use for filenames and labels.
-     */
-    private final ZipEncoding encoding;
-
-    /**
-     * Constructor using the platform's default encoding for file
-     * names.
+     * Constructor.
      *
      * @param is
      * @throws ArchiveException
      */
     public DumpArchiveInputStream(InputStream is) throws ArchiveException {
-        this(is, null);
-    }
-
-    /**
-     * Constructor.
-     *
-     * @param is
-     * @param encoding the encoding to use for file names, use null
-     * for the platform's default encoding
-     * @since 1.6
-     */
-    public DumpArchiveInputStream(InputStream is, String encoding)
-        throws ArchiveException {
         this.raw = new TapeInputStream(is);
         this.hasHitEOF = false;
-        this.encoding = ZipEncodingHelper.getZipEncoding(encoding);
 
         try {
             // read header, verify it's a dump archive.
@@ -110,7 +83,7 @@ public class DumpArchiveInputStream extends ArchiveInputStream {
             }
 
             // get summary information
-            summary = new DumpArchiveSummary(headerBytes, this.encoding);
+            summary = new DumpArchiveSummary(headerBytes);
 
             // reset buffer with actual block size.
             raw.resetBlockSize(summary.getNTRec(), summary.isCompressed());
@@ -351,7 +324,7 @@ public class DumpArchiveInputStream extends ArchiveInputStream {
 
                 byte type = blockBuffer[i + 6];
 
-                String name = DumpArchiveUtil.decode(encoding, blockBuffer, i + 8, blockBuffer[i + 7]);
+                String name = new String(blockBuffer, i + 8, blockBuffer[i + 7]); // TODO default charset?
 
                 if (".".equals(name) || "..".equals(name)) {
                     // do nothing...
diff --git a/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java b/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java
index 08b9e8f2..fca377fd 100644
--- a/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java
+++ b/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveSummary.java
@@ -18,10 +18,8 @@
  */
 package org.apache.commons.compress.archivers.dump;
 
-import java.io.IOException;
 import java.util.Date;
 
-import org.apache.commons.compress.archivers.zip.ZipEncoding;
 
 /**
  * This class represents identifying information about a Dump archive volume.
@@ -43,15 +41,15 @@ public class DumpArchiveSummary {
     private int firstrec;
     private int ntrec;
 
-    DumpArchiveSummary(byte[] buffer, ZipEncoding encoding) throws IOException {
+    DumpArchiveSummary(byte[] buffer) {
         dumpDate = 1000L * DumpArchiveUtil.convert32(buffer, 4);
         previousDumpDate = 1000L * DumpArchiveUtil.convert32(buffer, 8);
         volume = DumpArchiveUtil.convert32(buffer, 12);
-        label = DumpArchiveUtil.decode(encoding, buffer, 676, DumpArchiveConstants.LBLSIZE).trim();
+        label = new String(buffer, 676, DumpArchiveConstants.LBLSIZE).trim(); // TODO default charset?
         level = DumpArchiveUtil.convert32(buffer, 692);
-        filesys = DumpArchiveUtil.decode(encoding, buffer, 696, DumpArchiveConstants.NAMELEN).trim();
-        devname = DumpArchiveUtil.decode(encoding, buffer, 760, DumpArchiveConstants.NAMELEN).trim();
-        hostname = DumpArchiveUtil.decode(encoding, buffer, 824, DumpArchiveConstants.NAMELEN).trim();
+        filesys = new String(buffer, 696, DumpArchiveConstants.NAMELEN).trim(); // TODO default charset?
+        devname = new String(buffer, 760, DumpArchiveConstants.NAMELEN).trim(); // TODO default charset?
+        hostname = new String(buffer, 824, DumpArchiveConstants.NAMELEN).trim(); // TODO default charset?
         flags = DumpArchiveUtil.convert32(buffer, 888);
         firstrec = DumpArchiveUtil.convert32(buffer, 892);
         ntrec = DumpArchiveUtil.convert32(buffer, 896);
diff --git a/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java b/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java
index 5b749449..b813d8cf 100644
--- a/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java
+++ b/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveUtil.java
@@ -18,8 +18,6 @@
  */
 package org.apache.commons.compress.archivers.dump;
 
-import java.io.IOException;
-import org.apache.commons.compress.archivers.zip.ZipEncoding;
 
 /**
  * Various utilities for dump archives.
@@ -132,14 +130,4 @@ class DumpArchiveUtil {
 
         return i;
     }
-
-    /**
-     * Decodes a byte array to a string.
-     */
-    static String decode(ZipEncoding encoding, byte[] b, int offset, int len)
-        throws IOException {
-        byte[] copy = new byte[len];
-        System.arraycopy(b, offset, copy, 0, len);
-        return encoding.decode(copy);
-    }
 }
diff --git a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
index 16467e2b..d637ca8b 100644
--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
@@ -30,7 +30,6 @@ import java.util.zip.CRC32;
 
 import org.apache.commons.compress.utils.BoundedInputStream;
 import org.apache.commons.compress.utils.CRC32VerifyingInputStream;
-import org.apache.commons.compress.utils.CharsetNames;
 
 /**
  * Reads a 7z file, using RandomAccessFile under
@@ -671,7 +670,7 @@ public class SevenZFile {
                         int nextName = 0;
                         for (int i = 0; i < names.length; i += 2) {
                             if (names[i] == 0 && names[i+1] == 0) {
-                                files[nextFile++].setName(new String(names, nextName, i-nextName, CharsetNames.UTF_16LE));
+                                files[nextFile++].setName(new String(names, nextName, i-nextName, "UTF-16LE"));
                                 nextName = i + 2;
                             }
                         }
diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
index 24cd26a7..5b5b0ad2 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java
@@ -239,15 +239,7 @@ public class TarUtils {
     // Helper method to generate the exception message
     private static String exceptionMessage(byte[] buffer, final int offset,
             final int length, int current, final byte currentByte) {
-        // default charset is good enough for an exception message,
-        //
-        // the alternative was to modify parseOctal and
-        // parseOctalOrBinary to receive the ZipEncoding of the
-        // archive (deprecating the existing public methods, of
-        // course) and dealing with the fact that ZipEncoding#decode
-        // can throw an IOException which parseOctal* doesn't declare
-        String string = new String(buffer, offset, length);
-
+        String string = new String(buffer, offset, length); // TODO default charset?
         string=string.replaceAll("\0", "{NUL}"); // Replace NULs to allow string to be printed
         final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length;
         return s;
