diff --git a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
index 789c2866..8d7c8764 100644
--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
@@ -116,8 +116,8 @@ public class ArchiveStreamFactory {
     private String entryEncoding = null;
 
     /**
-     * Returns the encoding to use for arj, zip, dump, cpio and tar
-     * files, or null for the default.
+     * Returns the encoding to use for arj, zip, dump and tar files,
+     * or null for the default.
      *
      * @return entry encoding, or null
      * @since 1.5
@@ -127,8 +127,8 @@ public class ArchiveStreamFactory {
     }
 
     /**
-     * Sets the encoding to use for arj, zip, dump, cpio and tar
-     * files.  Use null for the default.
+     * Sets the encoding to use for arj, zip, dump and tar files.  Use
+     * null for the default.
      *
      * @since 1.5
      */
@@ -185,11 +185,7 @@ public class ArchiveStreamFactory {
             return new JarArchiveInputStream(in);
         }
         if (CPIO.equalsIgnoreCase(archiverName)) {
-            if (entryEncoding != null) {
-                return new CpioArchiveInputStream(in, entryEncoding);
-            } else {
-                return new CpioArchiveInputStream(in);
-            }
+            return new CpioArchiveInputStream(in);
         }
         if (DUMP.equalsIgnoreCase(archiverName)) {
             if (entryEncoding != null) {
@@ -242,11 +238,7 @@ public class ArchiveStreamFactory {
             return new JarArchiveOutputStream(out);
         }
         if (CPIO.equalsIgnoreCase(archiverName)) {
-            if (entryEncoding != null) {
-                return new CpioArchiveOutputStream(out, entryEncoding);
-            } else {
-                return new CpioArchiveOutputStream(out);
-            }
+            return new CpioArchiveOutputStream(out);
         }
         throw new ArchiveException("Archiver: " + archiverName + " not found.");
     }
diff --git a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java
index 3eb5b67f..664d0e6d 100644
--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java
@@ -24,10 +24,7 @@ import java.io.InputStream;
 
 import org.apache.commons.compress.archivers.ArchiveEntry;
 import org.apache.commons.compress.archivers.ArchiveInputStream;
-import org.apache.commons.compress.archivers.zip.ZipEncoding;
-import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
 import org.apache.commons.compress.utils.ArchiveUtils;
-import org.apache.commons.compress.utils.CharsetNames;
 
 /**
  * CPIOArchiveInputStream is a stream for reading cpio streams. All formats of
@@ -88,41 +85,19 @@ public class CpioArchiveInputStream extends ArchiveInputStream implements
     private final int blockSize;
 
     /**
-     * The encoding to use for filenames and labels.
-     */
-    private final ZipEncoding encoding;
-
-    /**
-     * Construct the cpio input stream with a blocksize of {@link
-     * CpioConstants#BLOCK_SIZE BLOCK_SIZE} and expecting ASCII file
-     * names.
-     * 
-     * @param in
-     *            The cpio stream
-     */
-    public CpioArchiveInputStream(final InputStream in) {
-        this(in, BLOCK_SIZE, CharsetNames.US_ASCII);
-    }
-
-    /**
      * Construct the cpio input stream with a blocksize of {@link
      * CpioConstants#BLOCK_SIZE BLOCK_SIZE}.
      * 
      * @param in
      *            The cpio stream
-     * @param encoding
-     *            The encoding of file names to expect - use null for
-     *            the platform's default.
-     * @since 1.6
      */
-    public CpioArchiveInputStream(final InputStream in, String encoding) {
-        this(in, BLOCK_SIZE, encoding);
+    public CpioArchiveInputStream(final InputStream in) {
+        this(in, BLOCK_SIZE);
     }
 
     /**
-     * Construct the cpio input stream with a blocksize of {@link
-     * CpioConstants#BLOCK_SIZE BLOCK_SIZE} expecting ASCII file
-     * names.
+     * Construct the cpio input stream with a blocksize of {@link CpioConstants#BLOCK_SIZE BLOCK_SIZE}.
+     * Construct the cpio input stream.
      * 
      * @param in
      *            The cpio stream
@@ -131,25 +106,8 @@ public class CpioArchiveInputStream extends ArchiveInputStream implements
      * @since 1.5
      */
     public CpioArchiveInputStream(final InputStream in, int blockSize) {
-        this(in, blockSize, CharsetNames.US_ASCII);
-    }
-
-    /**
-     * Construct the cpio input stream with a blocksize of {@link CpioConstants#BLOCK_SIZE BLOCK_SIZE}.
-     * 
-     * @param in
-     *            The cpio stream
-     * @param blockSize
-     *            The block size of the archive.
-     * @param encoding
-     *            The encoding of file names to expect - use null for
-     *            the platform's default.
-     * @since 1.6
-     */
-    public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {
         this.in = in;
         this.blockSize = blockSize;
-        this.encoding = ZipEncodingHelper.getZipEncoding(encoding);
     }
 
     /**
@@ -447,11 +405,9 @@ public class CpioArchiveInputStream extends ArchiveInputStream implements
     }
 
     private String readCString(final int length) throws IOException {
-        // don't include trailing NUL in file name to decode
-        byte tmpBuffer[] = new byte[length - 1];
+        byte tmpBuffer[] = new byte[length];
         readFully(tmpBuffer, 0, tmpBuffer.length);
-        this.in.read();
-        return encoding.decode(tmpBuffer);
+        return new String(tmpBuffer, 0, tmpBuffer.length - 1); // TODO default charset?
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java
index 11d841ad..3ff776a2 100644
--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java
@@ -21,15 +21,11 @@ package org.apache.commons.compress.archivers.cpio;
 import java.io.File;
 import java.io.IOException;
 import java.io.OutputStream;
-import java.nio.ByteBuffer;
 import java.util.HashMap;
 
 import org.apache.commons.compress.archivers.ArchiveEntry;
 import org.apache.commons.compress.archivers.ArchiveOutputStream;
-import org.apache.commons.compress.archivers.zip.ZipEncoding;
-import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;
 import org.apache.commons.compress.utils.ArchiveUtils;
-import org.apache.commons.compress.utils.CharsetNames;
 
 /**
  * CPIOArchiveOutputStream is a stream for writing CPIO streams. All formats of
@@ -91,14 +87,8 @@ public class CpioArchiveOutputStream extends ArchiveOutputStream implements
     private long nextArtificalDeviceAndInode = 1;
 
     /**
-     * The encoding to use for filenames and labels.
-     */
-    private final ZipEncoding encoding;
-
-    /**
-     * Construct the cpio output stream with a specified format, a
-     * blocksize of {@link CpioConstants#BLOCK_SIZE BLOCK_SIZE} and
-     * using ASCII as the file name encoding.
+     * Construct the cpio output stream with a specified format and a
+     * blocksize of {@link CpioConstants#BLOCK_SIZE BLOCK_SIZE}.
      * 
      * @param out
      *            The cpio stream
@@ -106,12 +96,11 @@ public class CpioArchiveOutputStream extends ArchiveOutputStream implements
      *            The format of the stream
      */
     public CpioArchiveOutputStream(final OutputStream out, final short format) {
-        this(out, format, BLOCK_SIZE, CharsetNames.US_ASCII);
+        this(out, format, BLOCK_SIZE);
     }
 
     /**
-     * Construct the cpio output stream with a specified format using
-     * ASCII as the file name encoding.
+     * Construct the cpio output stream with a specified format
      * 
      * @param out
      *            The cpio stream
@@ -124,27 +113,6 @@ public class CpioArchiveOutputStream extends ArchiveOutputStream implements
      */
     public CpioArchiveOutputStream(final OutputStream out, final short format,
                                    final int blockSize) {
-        this(out, format, blockSize, CharsetNames.US_ASCII);
-    }        
-
-    /**
-     * Construct the cpio output stream with a specified format using
-     * ASCII as the file name encoding.
-     * 
-     * @param out
-     *            The cpio stream
-     * @param format
-     *            The format of the stream
-     * @param blockSize
-     *            The block size of the archive.
-     * @param encoding
-     *            The encoding of file names to write - use null for
-     *            the platform's default.
-     * 
-     * @since 1.6
-     */
-    public CpioArchiveOutputStream(final OutputStream out, final short format,
-                                   final int blockSize, final String encoding) {
         this.out = out;
         switch (format) {
         case FORMAT_NEW:
@@ -158,12 +126,11 @@ public class CpioArchiveOutputStream extends ArchiveOutputStream implements
         }
         this.entryFormat = format;
         this.blockSize = blockSize;
-        this.encoding = ZipEncodingHelper.getZipEncoding(encoding);
     }
 
     /**
      * Construct the cpio output stream. The format for this CPIO stream is the
-     * "new" format using ASCII encoding for file names
+     * "new" format
      * 
      * @param out
      *            The cpio stream
@@ -173,21 +140,6 @@ public class CpioArchiveOutputStream extends ArchiveOutputStream implements
     }
 
     /**
-     * Construct the cpio output stream. The format for this CPIO stream is the
-     * "new" format.
-     * 
-     * @param out
-     *            The cpio stream
-     * @param encoding
-     *            The encoding of file names to write - use null for
-     *            the platform's default.
-     * @since 1.6
-     */
-    public CpioArchiveOutputStream(final OutputStream out, String encoding) {
-        this(out, FORMAT_NEW, BLOCK_SIZE, encoding);
-    }
-
-    /**
      * Check to make sure that this stream has not been closed
      * 
      * @throws IOException
@@ -533,11 +485,10 @@ public class CpioArchiveOutputStream extends ArchiveOutputStream implements
      * @throws IOException if the string couldn't be written
      */
     private void writeCString(final String str) throws IOException {
-        ByteBuffer buf = encoding.encode(str);
-        final int len = buf.limit() - buf.position();
-        out.write(buf.array(), buf.arrayOffset(), len);
+        byte[] b = ArchiveUtils.toAsciiBytes(str);
+        out.write(b);
         out.write('\0');
-        count(len + 1);
+        count(b.length + 1);
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java b/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java
index 1c52b02f..50b6d22e 100644
--- a/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java
+++ b/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java
@@ -67,7 +67,7 @@ public class ArchiveUtils {
             String expected, byte[] buffer, int offset, int length){
         byte[] buffer1;
         try {
-            buffer1 = expected.getBytes(CharsetNames.US_ASCII);
+            buffer1 = expected.getBytes("ASCII");
         } catch (UnsupportedEncodingException e) {
             throw new RuntimeException(e); // Should not happen
         }
@@ -94,7 +94,7 @@ public class ArchiveUtils {
      */
     public static byte[] toAsciiBytes(String inputString){
         try {
-            return inputString.getBytes(CharsetNames.US_ASCII);
+            return inputString.getBytes("ASCII");
         } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e); // Should never happen
         }
@@ -108,7 +108,7 @@ public class ArchiveUtils {
      */
     public static String toAsciiString(final byte[] inputBytes){
         try {
-            return new String(inputBytes, CharsetNames.US_ASCII);
+            return new String(inputBytes, "ASCII");
         } catch (UnsupportedEncodingException e) {
             throw new RuntimeException(e); // Should never happen
         }
@@ -124,7 +124,7 @@ public class ArchiveUtils {
      */
     public static String toAsciiString(final byte[] inputBytes, int offset, int length){
         try {
-            return new String(inputBytes, offset, length, CharsetNames.US_ASCII);
+            return new String(inputBytes, offset, length, "ASCII");
         } catch (UnsupportedEncodingException e) {
             throw new RuntimeException(e); // Should never happen
         }
