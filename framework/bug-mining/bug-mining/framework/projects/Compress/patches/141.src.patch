diff --git a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
index be422d37..bf9bd379 100644
--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
@@ -31,7 +31,6 @@ import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;
 import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
 import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
 import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;
-import org.apache.commons.compress.archivers.sevenz.SevenZFile;
 import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
 import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
 import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
@@ -111,11 +110,6 @@ public class ArchiveStreamFactory {
      * @since 1.1
      */
     public static final String ZIP = "zip";
-    /**
-     * Constant used to identify the 7z archive format.
-     * @since 1.8
-     */
-    public static final String SEVEN_Z = "7z";
 
     /**
      * Entry encoding, null for the default.
@@ -150,8 +144,6 @@ public class ArchiveStreamFactory {
      * @param in the input stream
      * @return the archive input stream
      * @throws ArchiveException if the archiver name is not known
-     * @throws StreamingNotSupportedException if the format cannot be
-     * read from a stream
      * @throws IllegalArgumentException if the archiver name or stream is null
      */
     public ArchiveInputStream createArchiveInputStream(
@@ -207,9 +199,6 @@ public class ArchiveStreamFactory {
                 return new DumpArchiveInputStream(in);
             }
         }
-        if (SEVEN_Z.equalsIgnoreCase(archiverName)) {
-            throw new StreamingNotSupportedException(SEVEN_Z);
-        }
 
         throw new ArchiveException("Archiver: " + archiverName + " not found.");
     }
@@ -221,8 +210,6 @@ public class ArchiveStreamFactory {
      * @param out the output stream
      * @return the archive output stream
      * @throws ArchiveException if the archiver name is not known
-     * @throws StreamingNotSupportedException if the format cannot be
-     * written to a stream
      * @throws IllegalArgumentException if the archiver name or stream is null
      */
     public ArchiveOutputStream createArchiveOutputStream(
@@ -262,9 +249,6 @@ public class ArchiveStreamFactory {
                 return new CpioArchiveOutputStream(out);
             }
         }
-        if (SEVEN_Z.equalsIgnoreCase(archiverName)) {
-            throw new StreamingNotSupportedException(SEVEN_Z);
-        }
         throw new ArchiveException("Archiver: " + archiverName + " not found.");
     }
 
@@ -276,8 +260,6 @@ public class ArchiveStreamFactory {
      * @param in the input stream
      * @return the archive input stream
      * @throws ArchiveException if the archiver name is not known
-     * @throws StreamingNotSupportedException if the format cannot be
-     * read from a stream
      * @throws IllegalArgumentException if the stream is null or does not support mark
      */
     public ArchiveInputStream createArchiveInputStream(final InputStream in)
@@ -309,8 +291,6 @@ public class ArchiveStreamFactory {
                 return new CpioArchiveInputStream(in);
             } else if (ArjArchiveInputStream.matches(signature, signatureLength)) {
                 return new ArjArchiveInputStream(in);
-            } else if (SevenZFile.matches(signature, signatureLength)) {
-                throw new StreamingNotSupportedException(SEVEN_Z);
             }
 
             // Dump needs a bigger buffer to check the signature;
diff --git a/src/main/java/org/apache/commons/compress/archivers/StreamingNotSupportedException.java b/src/main/java/org/apache/commons/compress/archivers/StreamingNotSupportedException.java
deleted file mode 100644
index d8612b5a..00000000
--- a/src/main/java/org/apache/commons/compress/archivers/StreamingNotSupportedException.java
+++ /dev/null
@@ -1,46 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.apache.commons.compress.archivers;
-
-/**
- * Exception thrown by ArchiveStreamFactory if a format is
- * requested/detected that doesn't support streaming.
- * @since 1.8
- */
-public class StreamingNotSupportedException extends ArchiveException {
-    private final String format;
-
-    /**
-     * Creates a new StreamingNotSupportedException.
-     * @param format the format that has been requested/detected.
-     */
-    public StreamingNotSupportedException(String format) {
-        super("The " + format + " doesn't support streaming.");
-        this.format = format;
-    }
-
-    /**
-     * Returns the format that has been requested/detected.
-     * @return the format that has been requested/detected.
-     */
-    public String getFormat() {
-        return format;
-    }
-    
-}
