diff --git a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
index dcafef81..ae350b62 100644
--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
@@ -244,7 +244,7 @@ public class SevenZFile implements Closeable {
         }
         
         if (nid != NID.kEnd) {
-            throw new IOException("Badly terminated header, found " + nid);
+            throw new IOException("Badly terminated header");
         }
     }
     
@@ -708,21 +708,13 @@ public class SevenZFile implements Closeable {
                     throw new IOException("kStartPos is unsupported, please report");
                 }
                 case NID.kDummy: {
-                    // 7z 9.20 asserts the content is all zeros and ignores the property
-                    // Compress up to 1.8.1 would throw an exception, now we ignore it (see COMPRESS-287
-                    
-                    if (skipBytesFully(header, size) < size) {
-                        throw new IOException("Incomplete kDummy property");
-                    }
-                    break;
+                    throw new IOException("kDummy is unsupported, please report");
                 }
-
+                
                 default: {
-                    // Compress up to 1.8.1 would throw an exception, now we ignore it (see COMPRESS-287
-                    if (skipBytesFully(header, size) < size) {
-                        throw new IOException("Incomplete property of type " + propertyType);
-                    }
-                    break;
+                    throw new IOException("Unknown property " + propertyType);
+                    // FIXME: Should actually:
+                    //header.skipBytes((int)size);
                 }
             }
         }
@@ -952,28 +944,4 @@ public class SevenZFile implements Closeable {
         }
         return true;
     }
-
-    private static long skipBytesFully(DataInput input, long bytesToSkip) throws IOException {
-        if (bytesToSkip < 1) {
-            return 0;
-        }
-        long skipped = 0;
-        while (bytesToSkip > Integer.MAX_VALUE) {
-            long skippedNow = skipBytesFully(input, Integer.MAX_VALUE);
-            if (skippedNow == 0) {
-                return skipped;
-            }
-            skipped += skippedNow;
-            bytesToSkip -= skippedNow;
-        }
-        while (bytesToSkip > 0) {
-            int skippedNow = input.skipBytes((int) bytesToSkip);
-            if (skippedNow == 0) {
-                return skipped;
-            }
-            skipped += skippedNow;
-            bytesToSkip -= skippedNow;
-        }
-        return skipped;
-    }
 }
