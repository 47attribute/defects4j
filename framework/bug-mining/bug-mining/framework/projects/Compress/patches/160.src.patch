diff --git a/src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java b/src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java
index 38f418ce..0c14bab2 100644
--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java
+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java
@@ -30,8 +30,7 @@ import javax.crypto.spec.SecretKeySpec;
 
 class AES256SHA256Decoder extends CoderBase {
     @Override
-    InputStream decode(final InputStream in, long uncompressedLength,
-            final Coder coder, final byte[] passwordBytes) throws IOException {
+    InputStream decode(final InputStream in, final Coder coder, final byte[] passwordBytes) throws IOException {
         return new InputStream() {
             private boolean isInitialized = false;
             private CipherInputStream cipherInputStream = null;
diff --git a/src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java b/src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java
index a871e523..04434d97 100644
--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java
+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java
@@ -64,8 +64,7 @@ abstract class CoderBase {
     /**
      * @return a stream that reads from in using the configured coder and password.
      */
-    abstract InputStream decode(final InputStream in, long uncomressedLength,
-        final Coder coder, byte[] password) throws IOException;
+    abstract InputStream decode(final InputStream in, final Coder coder, byte[] password) throws IOException;
 
     /**
      * @return a stream that writes to out using the given configuration.
diff --git a/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java b/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java
index c488dea4..5853677b 100644
--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java
+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java
@@ -67,14 +67,14 @@ class Coders {
         return CODER_MAP.get(method);
     }
 
-    static InputStream addDecoder(final InputStream is, long uncompressedLength,
+    static InputStream addDecoder(final InputStream is,
             final Coder coder, final byte[] password) throws IOException {
         CoderBase cb = findByMethod(SevenZMethod.byId(coder.decompressionMethodId));
         if (cb == null) {
             throw new IOException("Unsupported compression method " +
                                   Arrays.toString(coder.decompressionMethodId));
         }
-        return cb.decode(is, uncompressedLength, coder, password);
+        return cb.decode(is, coder, password);
     }
     
     static OutputStream addEncoder(final OutputStream out, final SevenZMethod method,
@@ -88,8 +88,8 @@ class Coders {
 
     static class CopyDecoder extends CoderBase {
         @Override
-        InputStream decode(final InputStream in, long uncompressedLength,
-                final Coder coder, byte[] password) throws IOException {
+        InputStream decode(final InputStream in, final Coder coder,
+                byte[] password) throws IOException {
             return in; 
         }
         @Override
@@ -100,8 +100,8 @@ class Coders {
 
     static class LZMADecoder extends CoderBase {
         @Override
-        InputStream decode(final InputStream in, long uncompressedLength,
-                final Coder coder, byte[] password) throws IOException {
+        InputStream decode(final InputStream in, final Coder coder,
+                byte[] password) throws IOException {
             byte propsByte = coder.properties[0];
             long dictSize = coder.properties[1];
             for (int i = 1; i < 4; i++) {
@@ -110,7 +110,7 @@ class Coders {
             if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {
                 throw new IOException("Dictionary larger than 4GiB maximum size");
             }
-            return new LZMAInputStream(in, uncompressedLength, propsByte, (int) dictSize);
+            return new LZMAInputStream(in, -1, propsByte, (int) dictSize);
         }
     }
     
@@ -121,8 +121,8 @@ class Coders {
         }
 
         @Override
-        InputStream decode(final InputStream in, long uncompressedLength,
-                final Coder coder, byte[] password) throws IOException {
+        InputStream decode(final InputStream in, final Coder coder,
+                byte[] password) throws IOException {
             try {
                 return opts.getInputStream(in);
             } catch (AssertionError e) {
@@ -149,8 +149,7 @@ class Coders {
         }
 
         @Override
-        InputStream decode(final InputStream in, long uncompressedLength,
-                final Coder coder, final byte[] password)
+        InputStream decode(final InputStream in, final Coder coder, final byte[] password)
             throws IOException {
             return new InflaterInputStream(new DummyByteAddingInputStream(in),
                                            new Inflater(true));
@@ -168,8 +167,7 @@ class Coders {
         }
 
         @Override
-        InputStream decode(final InputStream in, long uncompressedLength,
-                final Coder coder, final byte[] password)
+        InputStream decode(final InputStream in, final Coder coder, final byte[] password)
                 throws IOException {
             return new BZip2CompressorInputStream(in);
         }
diff --git a/src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java b/src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java
index 81dcb7a2..215d0e37 100644
--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java
+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java
@@ -30,8 +30,7 @@ class DeltaDecoder extends CoderBase {
     }
 
     @Override
-    InputStream decode(final InputStream in, long uncompressedLength,
-            final Coder coder, byte[] password) throws IOException {
+    InputStream decode(final InputStream in, final Coder coder, byte[] password) throws IOException {
         return new DeltaOptions(getOptionsFromCoder(coder)).getInputStream(in);
     }
 
diff --git a/src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java b/src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java
index 3aab7f4c..f8d3667c 100644
--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java
+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java
@@ -92,17 +92,6 @@ class Folder {
         return 0;
     }
 
-    long getUnpackSizeForCoder(Coder coder) {
-        if (coders != null) {
-            for (int i = 0; i < coders.length; i++) {
-                if (coders[i] == coder) {
-                    return unpackSizes[i];
-                }
-            }
-        }
-        return 0;
-    }
-
     @Override
     public String toString() {
         return "Folder with " + coders.length + " coders, " + totalInputStreams
diff --git a/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java b/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java
index 9d3b8aff..83ec3770 100644
--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java
+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java
@@ -32,8 +32,7 @@ class LZMA2Decoder extends CoderBase {
     }
 
     @Override
-    InputStream decode(final InputStream in, long uncompressedLength,
-            final Coder coder, byte[] password) throws IOException {
+    InputStream decode(final InputStream in, final Coder coder, byte[] password) throws IOException {
         try {
             int dictionarySize = getDictionarySize(coder);
             return new LZMA2InputStream(in, dictionarySize);
diff --git a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
index 1b146862..dcafef81 100644
--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java
@@ -276,8 +276,7 @@ public class SevenZFile implements Closeable {
             if (coder.numInStreams != 1 || coder.numOutStreams != 1) {
                 throw new IOException("Multi input/output stream coders are not yet supported");
             }
-            inputStreamStack = Coders.addDecoder(inputStreamStack, folder.getUnpackSizeForCoder(coder),
-                    coder, password);
+            inputStreamStack = Coders.addDecoder(inputStreamStack, coder, password);
         }
         if (folder.hasCrc) {
             inputStreamStack = new CRC32VerifyingInputStream(inputStreamStack,
@@ -859,8 +858,7 @@ public class SevenZFile implements Closeable {
                 throw new IOException("Multi input/output stream coders are not yet supported");
             }
             SevenZMethod method = SevenZMethod.byId(coder.decompressionMethodId);
-            inputStreamStack = Coders.addDecoder(inputStreamStack, folder.getUnpackSizeForCoder(coder),
-                    coder, password);
+            inputStreamStack = Coders.addDecoder(inputStreamStack, coder, password);
             methods.addFirst(new SevenZMethodConfiguration(method,
                      Coders.findByMethod(method).getOptionsFromCoder(coder, inputStreamStack)));
         }
