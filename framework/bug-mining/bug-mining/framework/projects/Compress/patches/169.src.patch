diff --git a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
index c73e665f..4aefb29b 100644
--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
@@ -150,10 +150,10 @@ public class ArchiveStreamFactory {
     }
 
     /**
-     * Returns the encoding to use for arj, jar, zip, dump, cpio and tar
-     * files, or null for the archiver default.
+     * Returns the encoding to use for arj, zip, dump, cpio and tar
+     * files, or null for the default.
      *
-     * @return entry encoding, or null for the archiver default
+     * @return entry encoding, or null
      * @since 1.5
      */
     public String getEntryEncoding() {
@@ -161,9 +161,9 @@ public class ArchiveStreamFactory {
     }
 
     /**
-     * Sets the encoding to use for arj, jar, zip, dump, cpio and tar files. Use null for the archiver default.
+     * Sets the encoding to use for arj, zip, dump, cpio and tar files. Use null for the default.
      * 
-     * @param entryEncoding the entry encoding, null uses the archiver default.
+     * @param entryEncoding the entry encoding, null uses the default.
      * @since 1.5
      * @deprecated 1.10 use {@link #ArchiveStreamFactory(String)} to specify the encoding
      * @throws IllegalStateException if the constructor {@link #ArchiveStreamFactory(String)} 
@@ -227,11 +227,7 @@ public class ArchiveStreamFactory {
             }
         }
         if (JAR.equalsIgnoreCase(archiverName)) {
-            if (entryEncoding != null) {
-                return new JarArchiveInputStream(in, entryEncoding);
-            } else {
-                return new JarArchiveInputStream(in);
-            }
+            return new JarArchiveInputStream(in);
         }
         if (CPIO.equalsIgnoreCase(archiverName)) {
             if (entryEncoding != null) {
@@ -258,7 +254,7 @@ public class ArchiveStreamFactory {
      * Create an archive output stream from an archiver name and an output stream.
      * 
      * @param archiverName the archive name,
-     * i.e. {@value #AR}, {@value #ZIP}, {@value #TAR}, {@value #JAR} or {@value #CPIO} 
+     * i.e. {@value #AR}, {@value #ZIP}, {@value #TAR}, {@value #JAR}, {@value #CPIO} or {@value #SEVEN_Z} 
      * @param out the output stream
      * @return the archive output stream
      * @throws ArchiveException if the archiver name is not known
@@ -294,11 +290,7 @@ public class ArchiveStreamFactory {
             }
         }
         if (JAR.equalsIgnoreCase(archiverName)) {
-            if (entryEncoding != null) {
-                return new JarArchiveOutputStream(out, entryEncoding);
-            } else {
-                return new JarArchiveOutputStream(out);
-            }
+            return new JarArchiveOutputStream(out);
         }
         if (CPIO.equalsIgnoreCase(archiverName)) {
             if (entryEncoding != null) {
@@ -347,25 +339,13 @@ public class ArchiveStreamFactory {
                     return new ZipArchiveInputStream(in);
                 }
             } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
-                if (entryEncoding != null) {
-                    return new JarArchiveInputStream(in, entryEncoding);
-                } else {
-                    return new JarArchiveInputStream(in);
-                }
+                return new JarArchiveInputStream(in);
             } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
                 return new ArArchiveInputStream(in);
             } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
-                if (entryEncoding != null) {
-                    return new CpioArchiveInputStream(in, entryEncoding);
-                } else {
-                    return new CpioArchiveInputStream(in);
-                }
+                return new CpioArchiveInputStream(in);
             } else if (ArjArchiveInputStream.matches(signature, signatureLength)) {
-                if (entryEncoding != null) {
-                    return new ArjArchiveInputStream(in, entryEncoding);
-                } else {
-                    return new ArjArchiveInputStream(in);
-                }
+                return new ArjArchiveInputStream(in);
             } else if (SevenZFile.matches(signature, signatureLength)) {
                 throw new StreamingNotSupportedException(SEVEN_Z);
             }
@@ -376,7 +356,7 @@ public class ArchiveStreamFactory {
             signatureLength = IOUtils.readFully(in, dumpsig);
             in.reset();
             if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
-                return new DumpArchiveInputStream(in, entryEncoding);
+                return new DumpArchiveInputStream(in);
             }
 
             // Tar needs an even bigger buffer to check the signature; read the first block
@@ -385,7 +365,11 @@ public class ArchiveStreamFactory {
             signatureLength = IOUtils.readFully(in, tarheader);
             in.reset();
             if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
-                return new TarArchiveInputStream(in, entryEncoding);
+                if (entryEncoding != null) {
+                    return new TarArchiveInputStream(in, entryEncoding);
+                } else {
+                    return new TarArchiveInputStream(in);
+                }
             }
             // COMPRESS-117 - improve auto-recognition
             if (signatureLength >= 512) {
@@ -394,7 +378,7 @@ public class ArchiveStreamFactory {
                     tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
                     // COMPRESS-191 - verify the header checksum
                     if (tais.getNextTarEntry().isCheckSumOK()) {
-                        return new TarArchiveInputStream(in, encoding);
+                        return new TarArchiveInputStream(in);
                     }
                 } catch (Exception e) { // NOPMD
                     // can generate IllegalArgumentException as well
diff --git a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java
index 915b56e5..0d7e4ba1 100644
--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java
@@ -91,10 +91,7 @@ public class CpioArchiveInputStream extends ArchiveInputStream implements
     /**
      * The encoding to use for filenames and labels.
      */
-    private final ZipEncoding zipEncoding;
-
-    // the provided encoding (for unit tests)
-    final String encoding;
+    private final ZipEncoding encoding;
 
     /**
      * Construct the cpio input stream with a blocksize of {@link
@@ -153,8 +150,7 @@ public class CpioArchiveInputStream extends ArchiveInputStream implements
     public CpioArchiveInputStream(final InputStream in, int blockSize, String encoding) {
         this.in = in;
         this.blockSize = blockSize;
-        this.encoding = encoding;
-        this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
+        this.encoding = ZipEncodingHelper.getZipEncoding(encoding);
     }
 
     /**
@@ -448,7 +444,7 @@ public class CpioArchiveInputStream extends ArchiveInputStream implements
         byte tmpBuffer[] = new byte[length - 1];
         readFully(tmpBuffer, 0, tmpBuffer.length);
         this.in.read();
-        return zipEncoding.decode(tmpBuffer);
+        return encoding.decode(tmpBuffer);
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java
index fc829ffa..ff86ddf9 100644
--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java
@@ -92,10 +92,7 @@ public class CpioArchiveOutputStream extends ArchiveOutputStream implements
     /**
      * The encoding to use for filenames and labels.
      */
-    private final ZipEncoding zipEncoding;
-
-    // the provided encoding (for unit tests)
-    final String encoding;
+    private final ZipEncoding encoding;
 
     /**
      * Construct the cpio output stream with a specified format, a
@@ -160,8 +157,7 @@ public class CpioArchiveOutputStream extends ArchiveOutputStream implements
         }
         this.entryFormat = format;
         this.blockSize = blockSize;
-        this.encoding = encoding;
-        this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
+        this.encoding = ZipEncodingHelper.getZipEncoding(encoding);
     }
 
     /**
@@ -538,7 +534,7 @@ public class CpioArchiveOutputStream extends ArchiveOutputStream implements
      * @throws IOException if the string couldn't be written
      */
     private void writeCString(final String str) throws IOException {
-        ByteBuffer buf = zipEncoding.encode(str);
+        ByteBuffer buf = encoding.encode(str);
         final int len = buf.limit() - buf.position();
         out.write(buf.array(), buf.arrayOffset(), len);
         out.write('\0');
diff --git a/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java
index 09431a40..6381e899 100644
--- a/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java
@@ -74,10 +74,7 @@ public class DumpArchiveInputStream extends ArchiveInputStream {
     /**
      * The encoding to use for filenames and labels.
      */
-    private final ZipEncoding zipEncoding;
-
-    // the provided encoding (for unit tests)
-    final String encoding;
+    private final ZipEncoding encoding;
 
     /**
      * Constructor using the platform's default encoding for file
@@ -102,8 +99,7 @@ public class DumpArchiveInputStream extends ArchiveInputStream {
         throws ArchiveException {
         this.raw = new TapeInputStream(is);
         this.hasHitEOF = false;
-        this.encoding = encoding;
-        this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
+        this.encoding = ZipEncodingHelper.getZipEncoding(encoding);
 
         try {
             // read header, verify it's a dump archive.
@@ -114,7 +110,7 @@ public class DumpArchiveInputStream extends ArchiveInputStream {
             }
 
             // get summary information
-            summary = new DumpArchiveSummary(headerBytes, this.zipEncoding);
+            summary = new DumpArchiveSummary(headerBytes, this.encoding);
 
             // reset buffer with actual block size.
             raw.resetBlockSize(summary.getNTRec(), summary.isCompressed());
@@ -355,7 +351,7 @@ public class DumpArchiveInputStream extends ArchiveInputStream {
 
                 byte type = blockBuffer[i + 6];
 
-                String name = DumpArchiveUtil.decode(zipEncoding, blockBuffer, i + 8, blockBuffer[i + 7]);
+                String name = DumpArchiveUtil.decode(encoding, blockBuffer, i + 8, blockBuffer[i + 7]);
 
                 if (".".equals(name) || "..".equals(name)) {
                     // do nothing...
diff --git a/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java
index 1ebac2fe..d051a4b6 100644
--- a/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java
@@ -32,26 +32,10 @@ import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
  */
 public class JarArchiveInputStream extends ZipArchiveInputStream {
 
-    /**
-     * Creates an instance from the input stream using the default encoding.
-     * 
-     * @param inputStream the input stream to wrap
-     */
     public JarArchiveInputStream( final InputStream inputStream ) {
         super(inputStream);
     }
 
-    /**
-     * Creates an instance from the input stream using the specified encoding.
-     * 
-     * @param inputStream the input stream to wrap
-     * @param encoding the encoding to use
-     * @since 1.10
-     */
-    public JarArchiveInputStream( final InputStream inputStream, final String encoding ) {
-        super(inputStream, encoding);
-    }
-
     public JarArchiveEntry getNextJarEntry() throws IOException {
         ZipArchiveEntry entry = getNextZipEntry();
         return entry == null ? null : new JarArchiveEntry(entry);
diff --git a/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java b/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java
index 96d0fbfe..f372ad76 100644
--- a/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java
@@ -41,18 +41,6 @@ public class JarArchiveOutputStream extends ZipArchiveOutputStream {
         super(out);
     }
 
-    /**
-     * Create and instance that wraps the output stream using the provided encoding.
-     * 
-     * @param out the output stream to wrap
-     * @param encoding the encoding to use. Use null for the platform default.
-     * @since 1.10
-     */
-    public JarArchiveOutputStream(final OutputStream out, final String encoding) {
-        super(out);
-        setEncoding(encoding);
-    }
-
     // @throws ClassCastException if entry is not an instance of ZipArchiveEntry
     @Override
     public void putArchiveEntry(ArchiveEntry ze) throws IOException {
diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
index c5570071..545d15c5 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java
@@ -73,10 +73,7 @@ public class TarArchiveInputStream extends ArchiveInputStream {
     private TarArchiveEntry currEntry;
 
     /** The encoding of the file */
-    private final ZipEncoding zipEncoding;
-
-    // the provided encoding (for unit tests)
-    final String encoding;
+    private final ZipEncoding encoding;
 
     /**
      * Constructor for TarInputStream.
@@ -140,8 +137,7 @@ public class TarArchiveInputStream extends ArchiveInputStream {
                                  String encoding) {
         this.is = is;
         this.hasHitEOF = false;
-        this.encoding = encoding;
-        this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
+        this.encoding = ZipEncodingHelper.getZipEncoding(encoding);
         this.recordSize = recordSize;
         this.blockSize = blockSize;
     }
@@ -275,7 +271,7 @@ public class TarArchiveInputStream extends ArchiveInputStream {
         }
 
         try {
-            currEntry = new TarArchiveEntry(headerBuf, zipEncoding);
+            currEntry = new TarArchiveEntry(headerBuf, encoding);
         } catch (IllegalArgumentException e) {
             IOException ioe = new IOException("Error detected parsing the header");
             ioe.initCause(e);
@@ -293,7 +289,7 @@ public class TarArchiveInputStream extends ArchiveInputStream {
                 // entry
                 return null;
             }
-            currEntry.setLinkName(zipEncoding.decode(longLinkData));
+            currEntry.setLinkName(encoding.decode(longLinkData));
         }
 
         if (currEntry.isGNULongNameEntry()) {
@@ -304,7 +300,7 @@ public class TarArchiveInputStream extends ArchiveInputStream {
                 // entry
                 return null;
             }
-            currEntry.setName(zipEncoding.decode(longNameData));
+            currEntry.setName(encoding.decode(longNameData));
         }
 
         if (currEntry.isPaxHeader()){ // Process Pax headers
diff --git a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
index 43525c8c..1b134af7 100644
--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java
@@ -84,10 +84,7 @@ public class TarArchiveOutputStream extends ArchiveOutputStream {
 
     private final OutputStream out;
 
-    private final ZipEncoding zipEncoding;
-
-    // the provided encoding (for unit tests)
-    final String encoding;
+    private final ZipEncoding encoding;
 
     private boolean addPaxHeadersForNonAsciiNames = false;
     private static final ZipEncoding ASCII =
@@ -153,8 +150,7 @@ public class TarArchiveOutputStream extends ArchiveOutputStream {
     public TarArchiveOutputStream(OutputStream os, int blockSize,
                                   int recordSize, String encoding) {
         out = new CountingOutputStream(os);
-        this.encoding = encoding;
-        this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
+        this.encoding = ZipEncodingHelper.getZipEncoding(encoding);
 
         this.assemLen = 0;
         this.assemBuf = new byte[recordSize];
@@ -305,7 +301,7 @@ public class TarArchiveOutputStream extends ArchiveOutputStream {
             writePaxHeaders(entry, entryName, paxHeaders);
         }
 
-        entry.writeEntryHeader(recordBuf, zipEncoding,
+        entry.writeEntryHeader(recordBuf, encoding,
                                bigNumberMode == BIGNUMBER_STAR);
         writeRecord(recordBuf);
 
@@ -664,7 +660,7 @@ public class TarArchiveOutputStream extends ArchiveOutputStream {
                                    Map<String, String> paxHeaders,
                                    String paxHeaderName, byte linkType, String fieldName)
         throws IOException {
-        final ByteBuffer encodedName = zipEncoding.encode(name);
+        final ByteBuffer encodedName = encoding.encode(name);
         final int len = encodedName.limit() - encodedName.position();
         if (len >= TarConstants.NAMELEN) {
 
diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
index 7a69141c..226d29e5 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
@@ -61,9 +61,6 @@ public class ZipArchiveInputStream extends ArchiveInputStream {
     /** The zip encoding to use for filenames and the file comment. */
     private final ZipEncoding zipEncoding;
 
-    // the provided encoding (for unit tests)
-    final String encoding;
-
     /** Whether to look for and use Unicode extra fields. */
     private final boolean useUnicodeExtraFields;
 
@@ -142,10 +139,6 @@ public class ZipArchiveInputStream extends ArchiveInputStream {
 
     private int entriesRead = 0;
 
-    /**
-     * Create an instance using UTF-8 encoding
-     * @param inputStream the stream to wrap
-     */
     public ZipArchiveInputStream(InputStream inputStream) {
         this(inputStream, ZipEncodingHelper.UTF8);
     }
@@ -182,7 +175,6 @@ public class ZipArchiveInputStream extends ArchiveInputStream {
                                  String encoding,
                                  boolean useUnicodeExtraFields,
                                  boolean allowStoredEntriesWithDataDescriptor) {
-        this.encoding = encoding;
         zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
         this.useUnicodeExtraFields = useUnicodeExtraFields;
         in = new PushbackInputStream(inputStream, buf.capacity());
