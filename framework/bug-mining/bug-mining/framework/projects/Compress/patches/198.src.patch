diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
index 47668fc8..d64ae4e7 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
@@ -653,12 +653,7 @@ public class ZipArchiveInputStream extends ArchiveInputStream {
         while (remaining > 0) {
             final long n = in.read(buf.array(), 0, (int) Math.min(buf.capacity(), remaining));
             if (n < 0) {
-                String name = current.entry.getName();
-                int idx = firstUnprintableCharacter(current.entry.getName());
-                if (idx >= 0) {
-                    name = "corrupted name starting with '" + name.substring(0, idx) + "'";
-                }
-                throw new EOFException("Truncated ZIP entry: " + name);
+                throw new EOFException("Truncated ZIP entry: " + current.entry.getName());
             }
             count(n);
             remaining -= n;
@@ -988,17 +983,6 @@ public class ZipArchiveInputStream extends ArchiveInputStream {
         return b == ZipArchiveOutputStream.EOCD_SIG[0];
     }
 
-    private int firstUnprintableCharacter(String name) {
-        final char[] chars = name.toCharArray();
-        final int len = chars.length;
-        for (int i = 0; i < len; i++) {
-            if (Character.isISOControl(chars[i]) || !Character.isDefined(chars[i])) {
-                return i;
-            }
-        }
-        return -1;
-    }
-
     /**
      * Structure collecting information for the entry that is
      * currently being read.
