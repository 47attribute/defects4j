diff --git a/src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java b/src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java
index 3ed50983..245d4950 100644
--- a/src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java
+++ b/src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java
@@ -72,7 +72,6 @@ public class FramedSnappyCompressorInputStream extends CompressorInputStream {
 
     private int uncompressedBytesRemaining;
     private long expectedChecksum = -1;
-    private final int blockSize;
     private final PureJavaCrc32C checksum = new PureJavaCrc32C();
 
     /**
@@ -96,24 +95,7 @@ public class FramedSnappyCompressorInputStream extends CompressorInputStream {
     public FramedSnappyCompressorInputStream(final InputStream in,
                                              final FramedSnappyDialect dialect)
         throws IOException {
-        this(in, SnappyCompressorInputStream.DEFAULT_BLOCK_SIZE, dialect);
-    }
-
-    /**
-     * Constructs a new input stream that decompresses snappy-framed-compressed data
-     * from the specified input stream.
-     * @param in  the InputStream from which to read the compressed data
-     * @param blockSize the block size to use for the compressed stream
-     * @param dialect the dialect used by the compressed stream
-     * @throws IOException if reading fails
-     * @since 1.14
-     */
-    public FramedSnappyCompressorInputStream(final InputStream in,
-                                             final int blockSize,
-                                             final FramedSnappyDialect dialect)
-        throws IOException {
         this.in = new PushbackInputStream(in, 1);
-        this.blockSize = blockSize;
         this.dialect = dialect;
         if (dialect.hasStreamIdentifier()) {
             readStreamIdentifier();
@@ -229,7 +211,7 @@ public class FramedSnappyCompressorInputStream extends CompressorInputStream {
                 expectedChecksum = -1;
             }
             currentCompressedChunk =
-                new SnappyCompressorInputStream(new BoundedInputStream(in, size), blockSize);
+                new SnappyCompressorInputStream(new BoundedInputStream(in, size));
             // constructor reads uncompressed size
             count(currentCompressedChunk.getBytesRead());
         } else {
