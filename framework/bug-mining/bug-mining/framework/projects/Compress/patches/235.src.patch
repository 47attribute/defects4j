diff --git a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
index ca153638..6ca04377 100644
--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java
@@ -473,17 +473,6 @@ public class ArchiveStreamFactory implements ArchiveStreamProvider {
      */
     public ArchiveInputStream createArchiveInputStream(final InputStream in)
             throws ArchiveException {
-        return createArchiveInputStream(detect(in), in);
-    }
-
-    /**
-     * Try to determine the type of Archiver
-     * @param in input stream
-     * @return type of archiver if found
-     * @throws ArchiveException if an archiver cannot be detected in the stream
-     * @since 1.14
-     */
-    public static String detect(InputStream in) throws ArchiveException {
         if (in == null) {
             throw new IllegalArgumentException("Stream must not be null.");
         }
@@ -494,72 +483,62 @@ public class ArchiveStreamFactory implements ArchiveStreamProvider {
 
         final byte[] signature = new byte[SIGNATURE_SIZE];
         in.mark(signature.length);
-        int signatureLength = -1;
         try {
-            signatureLength = IOUtils.readFully(in, signature);
+            int signatureLength = IOUtils.readFully(in, signature);
             in.reset();
-        } catch (IOException e) {
-            throw new ArchiveException("IOException while reading signature.");
-        }
-
-        if (ZipArchiveInputStream.matches(signature, signatureLength)) {
-            return ZIP;
-        } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
-            return JAR;
-        } if (ArArchiveInputStream.matches(signature, signatureLength)) {
-            return AR;
-        } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
-            return CPIO;
-        } else if (ArjArchiveInputStream.matches(signature, signatureLength)) {
-            return ARJ;
-        } else if (SevenZFile.matches(signature, signatureLength)) {
-            return SEVEN_Z;
-        }
+            if (ZipArchiveInputStream.matches(signature, signatureLength)) {
+                return createArchiveInputStream(ZIP, in);
+            } else if (JarArchiveInputStream.matches(signature, signatureLength)) {
+                return createArchiveInputStream(JAR, in);
+            } else if (ArArchiveInputStream.matches(signature, signatureLength)) {
+                return createArchiveInputStream(AR, in);
+            } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
+                return createArchiveInputStream(CPIO, in);
+            } else if (ArjArchiveInputStream.matches(signature, signatureLength)) {
+                return createArchiveInputStream(ARJ, in);
+            } else if (SevenZFile.matches(signature, signatureLength)) {
+                throw new StreamingNotSupportedException(SEVEN_Z);
+            }
 
-        // Dump needs a bigger buffer to check the signature;
-        final byte[] dumpsig = new byte[DUMP_SIGNATURE_SIZE];
-        in.mark(dumpsig.length);
-        try {
+            // Dump needs a bigger buffer to check the signature;
+            final byte[] dumpsig = new byte[DUMP_SIGNATURE_SIZE];
+            in.mark(dumpsig.length);
             signatureLength = IOUtils.readFully(in, dumpsig);
             in.reset();
-        } catch (IOException e) {
-            throw new ArchiveException("IOException while reading dump signature");
-        }
-        if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
-            return DUMP;
-        }
+            if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
+                return createArchiveInputStream(DUMP, in);
+            }
 
-        // Tar needs an even bigger buffer to check the signature; read the first block
-        final byte[] tarHeader = new byte[TAR_HEADER_SIZE];
-        in.mark(tarHeader.length);
-        try {
+            // Tar needs an even bigger buffer to check the signature; read the first block
+            final byte[] tarHeader = new byte[TAR_HEADER_SIZE];
+            in.mark(tarHeader.length);
             signatureLength = IOUtils.readFully(in, tarHeader);
             in.reset();
-        } catch (IOException e) {
-            throw new ArchiveException("IOException while reading tar signature");
-        }
-        if (TarArchiveInputStream.matches(tarHeader, signatureLength)) {
-            return TAR;
-        }
-
-        // COMPRESS-117 - improve auto-recognition
-        if (signatureLength >= TAR_HEADER_SIZE) {
-            TarArchiveInputStream tais = null;
-            try {
-                tais = new TarArchiveInputStream(new ByteArrayInputStream(tarHeader));
-                // COMPRESS-191 - verify the header checksum
-                if (tais.getNextTarEntry().isCheckSumOK()) {
-                    return TAR;
+            if (TarArchiveInputStream.matches(tarHeader, signatureLength)) {
+                return createArchiveInputStream(TAR, in);
+            }
+            // COMPRESS-117 - improve auto-recognition
+            if (signatureLength >= TAR_HEADER_SIZE) {
+                TarArchiveInputStream tais = null;
+                try {
+                    tais = new TarArchiveInputStream(new ByteArrayInputStream(tarHeader));
+                    // COMPRESS-191 - verify the header checksum
+                    if (tais.getNextTarEntry().isCheckSumOK()) {
+                        return createArchiveInputStream(TAR, in);
+                    }
+                } catch (final Exception e) { // NOPMD
+                    // can generate IllegalArgumentException as well
+                    // as IOException
+                    // autodetection, simply not a TAR
+                    // ignored
+                } finally {
+                    IOUtils.closeQuietly(tais);
                 }
-            } catch (final Exception e) { // NOPMD
-                // can generate IllegalArgumentException as well
-                // as IOException
-                // autodetection, simply not a TAR
-                // ignored
-            } finally {
-                IOUtils.closeQuietly(tais);
             }
+        } catch (final IOException e) {
+            throw new ArchiveException("Could not use reset and mark operations.", e);
         }
+
         throw new ArchiveException("No Archiver found for the stream signature");
     }
 
diff --git a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
index a29179cd..d569a8a1 100644
--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
@@ -349,6 +349,8 @@ public class CompressorStreamFactory implements CompressorStreamProvider {
      */
     private volatile boolean decompressConcatenated = false;
 
+    private volatile int lzmaMemoryLimitKb = -1;
+
     /**
      * Create an instance with the decompress Concatenated option set to false.
      */
@@ -374,17 +376,20 @@ public class CompressorStreamFactory implements CompressorStreamProvider {
     }
 
     /**
-     * Try to detect the type of compressor stream.
-     *
-     * @param in input stream
-     * @return type of compressor stream detected
-     * @throws CompressorException if no compressor stream type was detected
-     *                             or if something else went wrong
-     * @throws IllegalArgumentException if stream is null or does not support mark
-     *
-     * @since 1.14
+     * Create an compressor input stream from an input stream, autodetecting the
+     * compressor type from the first few bytes of the stream. The InputStream
+     * must support marks, like BufferedInputStream.
+     * 
+     * @param in
+     *            the input stream
+     * @return the compressor input stream
+     * @throws CompressorException
+     *             if the compressor name is not known
+     * @throws IllegalArgumentException
+     *             if the stream is null or does not support mark
+     * @since 1.1
      */
-    public static String detect(final InputStream in) throws CompressorException {
+    public CompressorInputStream createCompressorInputStream(final InputStream in) throws CompressorException {
         if (in == null) {
             throw new IllegalArgumentException("Stream must not be null.");
         }
@@ -395,69 +400,52 @@ public class CompressorStreamFactory implements CompressorStreamProvider {
 
         final byte[] signature = new byte[12];
         in.mark(signature.length);
-        int signatureLength = -1;
         try {
-            signatureLength = IOUtils.readFully(in, signature);
+            final int signatureLength = IOUtils.readFully(in, signature);
             in.reset();
-        } catch (IOException e) {
-            throw new CompressorException("IOException while reading signature.", e);
-        }
 
-        if (BZip2CompressorInputStream.matches(signature, signatureLength)) {
-            return BZIP2;
-        }
+            if (BZip2CompressorInputStream.matches(signature, signatureLength)) {
+                return new BZip2CompressorInputStream(in, decompressConcatenated);
+            }
 
-        if (GzipCompressorInputStream.matches(signature, signatureLength)) {
-            return GZIP;
-        }
+            if (GzipCompressorInputStream.matches(signature, signatureLength)) {
+                return new GzipCompressorInputStream(in, decompressConcatenated);
+            }
 
-        if (Pack200CompressorInputStream.matches(signature, signatureLength)) {
-            return PACK200;
-        }
+            if (Pack200CompressorInputStream.matches(signature, signatureLength)) {
+                return new Pack200CompressorInputStream(in);
+            }
 
-        if (FramedSnappyCompressorInputStream.matches(signature, signatureLength)) {
-            return SNAPPY_FRAMED;
-        }
+            if (FramedSnappyCompressorInputStream.matches(signature, signatureLength)) {
+                return new FramedSnappyCompressorInputStream(in);
+            }
 
-        if (ZCompressorInputStream.matches(signature, signatureLength)) {
-            return Z;
-        }
+            if (ZCompressorInputStream.matches(signature, signatureLength)) {
+                return new ZCompressorInputStream(in);
+            }
 
-        if (DeflateCompressorInputStream.matches(signature, signatureLength)) {
-            return DEFLATE;
-        }
+            if (DeflateCompressorInputStream.matches(signature, signatureLength)) {
+                return new DeflateCompressorInputStream(in);
+            }
 
-        if (XZUtils.matches(signature, signatureLength)) {
-            return XZ;
-        }
+            if (XZUtils.matches(signature, signatureLength) && XZUtils.isXZCompressionAvailable()) {
+                return new XZCompressorInputStream(in, decompressConcatenated);
+            }
 
-        if (LZMAUtils.matches(signature, signatureLength)) {
-            return LZMA;
-        }
+            if (LZMAUtils.matches(signature, signatureLength) && LZMAUtils.isLZMACompressionAvailable()) {
+                return new LZMACompressorInputStream(in, lzmaMemoryLimitKb);
+            }
 
-        if (FramedLZ4CompressorInputStream.matches(signature, signatureLength)) {
-            return LZ4_FRAMED;
+            if (FramedLZ4CompressorInputStream.matches(signature, signatureLength)) {
+                return new FramedLZ4CompressorInputStream(in);
+            }
+
+        } catch (final IOException e) {
+            throw new CompressorException("Failed to detect Compressor from InputStream.", e);
         }
 
         throw new CompressorException("No Compressor found for the stream signature.");
     }
-    /**
-     * Create an compressor input stream from an input stream, autodetecting the
-     * compressor type from the first few bytes of the stream. The InputStream
-     * must support marks, like BufferedInputStream.
-     * 
-     * @param in
-     *            the input stream
-     * @return the compressor input stream
-     * @throws CompressorException
-     *             if the compressor name is not known
-     * @throws IllegalArgumentException
-     *             if the stream is null or does not support mark
-     * @since 1.1
-     */
-    public CompressorInputStream createCompressorInputStream(final InputStream in) throws CompressorException {
-        return createCompressorInputStream(detect(in), in);
-    }
 
     /**
      * Creates a compressor input stream from a compressor name and an input
@@ -473,7 +461,7 @@ public class CompressorStreamFactory implements CompressorStreamProvider {
      *            the input stream
      * @return compressor input stream
      * @throws CompressorException
-     *             if the compressor name is not known or not available
+     *             if the compressor name is not known
      * @throws IllegalArgumentException
      *             if the name or input stream is null
      */
@@ -500,16 +488,10 @@ public class CompressorStreamFactory implements CompressorStreamProvider {
             }
 
             if (XZ.equalsIgnoreCase(name)) {
-                if (!XZUtils.isXZCompressionAvailable()) {
-                    throw new CompressorException("XZ compression is not available.");
-                }
                 return new XZCompressorInputStream(in, actualDecompressConcatenated);
             }
 
             if (LZMA.equalsIgnoreCase(name)) {
-                if (!LZMAUtils.isLZMACompressionAvailable()) {
-                    throw new CompressorException("LZMA compression is not available");
-                }
                 return new LZMACompressorInputStream(in);
             }
 
@@ -686,5 +668,14 @@ public class CompressorStreamFactory implements CompressorStreamProvider {
         }
         this.decompressConcatenated = decompressConcatenated;
     }
-    
+
+    /**
+     * Set the maximum calculated memory usage for LZMA
+     * in KB.
+     *
+     * @param lzmaMemoryLimitKb
+     */
+    public void setLzmaMemoryLimitKb(int lzmaMemoryLimitKb) {
+        this.lzmaMemoryLimitKb = lzmaMemoryLimitKb;
+    }
 }
diff --git a/src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java b/src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java
index 9da3d246..41857ac8 100644
--- a/src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java
+++ b/src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java
@@ -130,8 +130,16 @@ public class Pack200CompressorOutputStream extends CompressorOutputStream {
             if (properties != null) {
                 p.properties().putAll(properties);
             }
-            try (JarInputStream ji = new JarInputStream(streamBridge.getInput())) {
+            JarInputStream ji = null;
+            boolean success = false;
+            try {
+                ji = new JarInputStream(streamBridge.getInput());
                 p.pack(ji, originalOutput);
+                success = true;
+            } finally {
+                if (!success) {
+                    IOUtils.closeQuietly(ji);
+                }
             }
         }
     }
