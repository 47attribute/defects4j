diff --git a/src/test/java/org/apache/commons/compress/ArchiveReadTest.java b/src/test/java/org/apache/commons/compress/ArchiveReadTest.java
index e2170353..4d32dfcc 100644
--- a/src/test/java/org/apache/commons/compress/ArchiveReadTest.java
+++ b/src/test/java/org/apache/commons/compress/ArchiveReadTest.java
@@ -25,7 +25,6 @@ import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileReader;
 import java.io.FilenameFilter;
-import java.net.URISyntaxException;
 import java.util.ArrayList;
 import java.util.Collection;
 
@@ -49,17 +48,9 @@ import org.junit.runners.Parameterized.Parameters;
 public class ArchiveReadTest extends AbstractTestCase {
 
     private static final ClassLoader CLASSLOADER = ArchiveReadTest.class.getClassLoader();
-    private static final File ARCDIR;
+    private static final File ARCDIR = new File(CLASSLOADER.getResource("archives").getFile());
     private static final ArrayList<String> FILELIST = new ArrayList<>();
 
-    static {
-        try {
-            ARCDIR = new File(CLASSLOADER.getResource("archives").toURI());
-        } catch (URISyntaxException e) {
-            throw new RuntimeException(e);
-        }
-    }
-
     private final File file;
 
     public ArchiveReadTest(final String file){
diff --git a/src/test/java/org/apache/commons/compress/MockEvilInputStream.java b/src/test/java/org/apache/commons/compress/MockEvilInputStream.java
deleted file mode 100644
index 9c03a212..00000000
--- a/src/test/java/org/apache/commons/compress/MockEvilInputStream.java
+++ /dev/null
@@ -1,41 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.apache.commons.compress;
-
-import java.io.IOException;
-import java.io.InputStream;
-
-/**
- * Simple mock InputStream that always throws an IOException
- * when {@link #read()} or {@link #read(byte[], int, int)}
- * is called.
- */
-public class MockEvilInputStream extends InputStream {
-
-    @Override
-    public int read() throws IOException {
-        throw new IOException("Evil");
-    }
-
-    @Override
-    public int read(byte[] bytes, int offset, int length) throws IOException {
-        throw new IOException("Evil");
-    }
-}
-
diff --git a/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java b/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java
index ff8010ff..4236b284 100644
--- a/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java
+++ b/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java
@@ -32,7 +32,6 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.lang.reflect.Field;
 
-import org.apache.commons.compress.MockEvilInputStream;
 import org.apache.commons.compress.archivers.arj.ArjArchiveInputStream;
 import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
 import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;
@@ -227,51 +226,6 @@ public class ArchiveStreamFactoryTest {
         DUMP_DEFAULT = dflt;
     }
 
-    @Test
-    public void testDetect() throws Exception {
-        for (String extension : new String[]{
-                ArchiveStreamFactory.AR,
-                ArchiveStreamFactory.ARJ,
-                ArchiveStreamFactory.CPIO,
-                ArchiveStreamFactory.DUMP,
-                // Compress doesn't know how to detect JARs, see COMPRESS-91
- //               ArchiveStreamFactory.JAR,
-                ArchiveStreamFactory.SEVEN_Z,
-                ArchiveStreamFactory.TAR,
-                ArchiveStreamFactory.ZIP
-        }) {
-            assertEquals(extension, detect("bla."+extension));
-        }
-
-        try {
-            ArchiveStreamFactory.detect(new BufferedInputStream(new ByteArrayInputStream(new byte[0])));
-            fail("shouldn't be able to detect empty stream");
-        } catch (ArchiveException e) {
-            assertEquals("No Archiver found for the stream signature", e.getMessage());
-        }
-
-        try {
-            ArchiveStreamFactory.detect(null);
-            fail("shouldn't be able to detect null stream");
-        } catch (IllegalArgumentException e) {
-            assertEquals("Stream must not be null.", e.getMessage());
-        }
-
-        try {
-            ArchiveStreamFactory.detect(new BufferedInputStream(new MockEvilInputStream()));
-            fail("Expected ArchiveException");
-        } catch (ArchiveException e) {
-            assertEquals("IOException while reading signature.", e.getMessage());
-        }
-    }
-
-    private String detect(String resource) throws IOException, ArchiveException {
-        try(InputStream in = new BufferedInputStream(new FileInputStream(
-                getFile(resource)))) {
-            return ArchiveStreamFactory.detect(in);
-        }
-    }
-
     static final TestData[] TESTS = {
         new TestData("bla.arj", ArchiveStreamFactory.ARJ, false, ARJ_DEFAULT, FACTORY, "charsetName"),
         new TestData("bla.arj", ArchiveStreamFactory.ARJ, false, "UTF-8", FACTORY_UTF8, "charsetName"),
diff --git a/src/test/java/org/apache/commons/compress/archivers/LongPathTest.java b/src/test/java/org/apache/commons/compress/archivers/LongPathTest.java
index 2573583a..6ee38116 100644
--- a/src/test/java/org/apache/commons/compress/archivers/LongPathTest.java
+++ b/src/test/java/org/apache/commons/compress/archivers/LongPathTest.java
@@ -27,12 +27,13 @@ import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileReader;
 import java.io.FilenameFilter;
-import java.net.URISyntaxException;
 import java.util.ArrayList;
 import java.util.Collection;
 
 import junit.framework.AssertionFailedError;
+
 import org.apache.commons.compress.AbstractTestCase;
+import org.apache.commons.compress.archivers.ArchiveEntry;
 import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
 import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
 import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
@@ -54,21 +55,11 @@ import org.junit.runners.Parameterized.Parameters;
 public class LongPathTest extends AbstractTestCase {
 
     private static final ClassLoader CLASSLOADER = LongPathTest.class.getClassLoader();
-    private static final File ARCDIR;
+    private static final File ARCDIR = new File(CLASSLOADER.getResource("longpath").getFile());
     private static final ArrayList<String> FILELIST = new ArrayList<>();
 
-    static {
-        try {
-            ARCDIR = new File(CLASSLOADER.getResource("longpath").toURI());
-        } catch (URISyntaxException e) {
-            throw new RuntimeException(e);
-        }
-    }
-
     private final File file;
 
-
-
     public LongPathTest(final String file){
         this.file = new File(ARCDIR, file);
     }
diff --git a/src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java b/src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java
index 7279de1b..46947832 100644
--- a/src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java
+++ b/src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java
@@ -27,12 +27,13 @@ import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileReader;
 import java.io.FilenameFilter;
-import java.net.URISyntaxException;
 import java.util.ArrayList;
 import java.util.Collection;
 
 import junit.framework.AssertionFailedError;
+
 import org.apache.commons.compress.AbstractTestCase;
+import org.apache.commons.compress.archivers.ArchiveEntry;
 import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
 import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
 import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
@@ -54,17 +55,9 @@ import org.junit.runners.Parameterized.Parameters;
 public class LongSymLinkTest extends AbstractTestCase {
 
     private static final ClassLoader CLASSLOADER = LongSymLinkTest.class.getClassLoader();
-    private static final File ARCDIR;
+    private static final File ARCDIR = new File(CLASSLOADER.getResource("longsymlink").getFile());
     private static final ArrayList<String> FILELIST = new ArrayList<>();
 
-    static {
-        try {
-            ARCDIR = new File(CLASSLOADER.getResource("longsymlink").toURI());
-        } catch (URISyntaxException e) {
-            throw new RuntimeException(e);
-        }
-    }
-
     private final File file;
 
     public LongSymLinkTest(final String file){
diff --git a/src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java b/src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java
index 67abcd3a..9c446fa9 100644
--- a/src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java
+++ b/src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java
@@ -31,13 +31,13 @@ import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 
-import org.apache.commons.compress.MockEvilInputStream;
 import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
 import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
 import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
 import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
 import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
 import org.junit.Test;
+import org.tukaani.xz.MemoryLimitException;
 
 @SuppressWarnings("deprecation") // deliberately tests setDecompressConcatenated
 public final class DetectCompressorTestCase {
@@ -121,52 +121,6 @@ public final class DetectCompressorTestCase {
     }
 
     @Test
-    public void testDetect() throws Exception {
-
-        assertEquals(CompressorStreamFactory.BZIP2, detect("bla.txt.bz2"));
-        assertEquals(CompressorStreamFactory.GZIP, detect("bla.tgz"));
-        assertEquals(CompressorStreamFactory.PACK200, detect("bla.pack"));
-        assertEquals(CompressorStreamFactory.XZ, detect("bla.tar.xz"));
-        assertEquals(CompressorStreamFactory.DEFLATE, detect("bla.tar.deflatez"));
-        assertEquals(CompressorStreamFactory.LZ4_FRAMED, detect("bla.tar.lz4"));
-        assertEquals(CompressorStreamFactory.LZMA, detect("bla.tar.lzma"));
-        assertEquals(CompressorStreamFactory.SNAPPY_FRAMED, detect("bla.tar.sz"));
-        assertEquals(CompressorStreamFactory.Z, detect("bla.tar.Z"));
-
-        try {
-            CompressorStreamFactory.detect(new BufferedInputStream(new ByteArrayInputStream(new byte[0])));
-            fail("shouldn't be able to detect empty stream");
-        } catch (CompressorException e) {
-            assertEquals("No Compressor found for the stream signature.", e.getMessage());
-        }
-
-        try {
-            CompressorStreamFactory.detect(null);
-            fail("shouldn't be able to detect null stream");
-        } catch (IllegalArgumentException e) {
-            assertEquals("Stream must not be null.", e.getMessage());
-        }
-
-        try {
-            CompressorStreamFactory.detect(new BufferedInputStream(new MockEvilInputStream()));
-            fail("Expected IOException");
-        } catch (CompressorException e) {
-            assertEquals("IOException while reading signature.", e.getMessage());
-        }
-
-
-    }
-
-    private String detect(String testFileName) throws IOException, CompressorException {
-        String name = null;
-        try (InputStream is = new BufferedInputStream(
-                new FileInputStream(getFile(testFileName)))) {
-            name = CompressorStreamFactory.detect(is);
-        }
-        return name;
-    }
-
-    @Test
     public void testOverride() {
         CompressorStreamFactory fac = new CompressorStreamFactory();
         assertFalse(fac.getDecompressConcatenated());
@@ -209,6 +163,19 @@ public final class DetectCompressorTestCase {
         }
     }
 
+    @Test
+    public void testLZMAMemoryLimit() throws Exception {
+        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();
+        compressorStreamFactory.setLzmaMemoryLimitKb(500);
+        try {
+            InputStream is = compressorStreamFactory.createCompressorInputStream(
+                    new BufferedInputStream(new FileInputStream(getFile("COMPRESS-382"))));
+            fail("Should have thrown memory limit exception");
+        } catch (CompressorException e) {
+            assertTrue(e.getCause() instanceof MemoryLimitException);
+        }
+    }
+
     private CompressorInputStream getStreamFor(final String resource)
             throws CompressorException, IOException {
         return factory.createCompressorInputStream(
@@ -222,4 +189,5 @@ public final class DetectCompressorTestCase {
                    new BufferedInputStream(new FileInputStream(
                        getFile(resource))));
     }
+
 }
