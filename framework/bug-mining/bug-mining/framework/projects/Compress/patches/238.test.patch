diff --git a/src/test/java/org/apache/commons/compress/MemoryLimitTest.java b/src/test/java/org/apache/commons/compress/MemoryLimitTest.java
deleted file mode 100644
index fdbaa86d..00000000
--- a/src/test/java/org/apache/commons/compress/MemoryLimitTest.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *   http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- * 
- */
-
-package org.apache.commons.compress;
-
-import org.junit.Test;
-
-public class MemoryLimitTest {
-
-    @Test(expected = IllegalArgumentException.class)
-    public void testRangeCheck() throws Exception {
-        MemoryLimit.setMemoryLimitInKb(-2);
-    }
-}
diff --git a/src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java b/src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java
index 6c8543f2..b70d3c70 100644
--- a/src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java
+++ b/src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java
@@ -31,7 +31,6 @@ import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 
-import org.apache.commons.compress.MemoryLimit;
 import org.apache.commons.compress.MemoryLimitException;
 import org.apache.commons.compress.MockEvilInputStream;
 import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
@@ -39,8 +38,6 @@ import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStr
 import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
 import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;
 import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;
-import org.junit.AfterClass;
-import org.junit.Before;
 import org.junit.Test;
 
 @SuppressWarnings("deprecation") // deliberately tests setDecompressConcatenated
@@ -74,18 +71,6 @@ public final class DetectCompressorTestCase {
         }
     }
 
-    @Before
-    public void setUp() {
-        //make sure to reset this before each test
-        MemoryLimit.setMemoryLimitInKb(MemoryLimit.NO_LIMIT);
-    }
-
-    @AfterClass
-    public static void tearDown() {
-        //make sure this is really, truly reset after all the tests
-        MemoryLimit.setMemoryLimitInKb(MemoryLimit.NO_LIMIT);
-    }
-
     private final TestData[] tests = {
         new TestData("multiple.bz2", new char[]{'a','b'}, factoryTrue, true),
         new TestData("multiple.bz2", new char[]{'a','b'}, factorySetTrue, true),
@@ -205,7 +190,7 @@ public final class DetectCompressorTestCase {
         //This test is here instead of the xz unit test to make sure
         //that the parameter is properly passed via the CompressorStreamFactory
         try (InputStream compressorIs = getStreamFor("bla.tar.xz", 100)) {
-            compressorIs.read();
+            int c = compressorIs.read();
         }
     }
 
@@ -217,8 +202,8 @@ public final class DetectCompressorTestCase {
     }
 
     private InputStream getStreamFor(final String fileName, final int memoryLimitInKb) throws Exception {
-        MemoryLimit.setMemoryLimitInKb(memoryLimitInKb);
-        CompressorStreamFactory fac = new CompressorStreamFactory(true);
+        CompressorStreamFactory fac = new CompressorStreamFactory(true,
+                memoryLimitInKb);
         InputStream is = new BufferedInputStream(
                 new FileInputStream(getFile(fileName)));
         try {
