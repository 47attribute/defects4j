diff --git a/src/main/java/org/apache/commons/compress/MemoryLimit.java b/src/main/java/org/apache/commons/compress/MemoryLimit.java
index b43eb869..e03e8e72 100644
--- a/src/main/java/org/apache/commons/compress/MemoryLimit.java
+++ b/src/main/java/org/apache/commons/compress/MemoryLimit.java
@@ -62,19 +62,4 @@ public class MemoryLimit {
     public static int getMemoryLimitInKb() {
         return MEMORY_LIMIT_IN_KB;
     }
-
-    public static void checkLimitInKb(long memoryNeeded) throws MemoryLimitException {
-        if (memoryNeeded < 0) {
-            throw new IllegalArgumentException("MemoryLimit must be > -1");
-        }
-
-        if (memoryNeeded >> 10 > Integer.MAX_VALUE) {
-            throw new MemoryLimitException(memoryNeeded,
-                    (MEMORY_LIMIT_IN_KB < 0) ? Integer.MAX_VALUE : MEMORY_LIMIT_IN_KB);
-        }
-
-        if (MEMORY_LIMIT_IN_KB > -1 && memoryNeeded > MEMORY_LIMIT_IN_KB) {
-                throw new MemoryLimitException(memoryNeeded, MEMORY_LIMIT_IN_KB);
-        }
-    }
 }
diff --git a/src/main/java/org/apache/commons/compress/MemoryLimitException.java b/src/main/java/org/apache/commons/compress/MemoryLimitException.java
index a243a176..8922ed2e 100644
--- a/src/main/java/org/apache/commons/compress/MemoryLimitException.java
+++ b/src/main/java/org/apache/commons/compress/MemoryLimitException.java
@@ -26,21 +26,15 @@ import java.io.IOException;
  * if a stream tries to allocate a byte array that is larger than
  * the allowable limit.
  *
- * <p/>
- * Set the global memory limit via {@link MemoryLimit#setMemoryLimitInKb(int)}.
- *
  * @since 1.14
  */
 public class MemoryLimitException extends IOException {
 
-    /**
-     *
-     * @param memoryNeeded estimated memory needed
-     * @param memoryLimit memory limit applied
-     */
-    public MemoryLimitException(long memoryNeeded, int memoryLimit) {
-        super("" + memoryNeeded + " KiB of memory would be needed; limit was "
-                + memoryLimit + " KiB.  If the file is not corrupt, consider " +
-                "increasing MemoryLimit.MEMORY_LIMIT_IN_KB.");
+    public MemoryLimitException(String message) {
+        super(message);
+    }
+
+    public MemoryLimitException(String message, Exception e) {
+        super(message, e);
     }
 }
diff --git a/src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java b/src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java
index 35d7e12e..69315410 100644
--- a/src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java
+++ b/src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java
@@ -56,7 +56,7 @@ public class LZMACompressorInputStream extends CompressorInputStream {
             in = new LZMAInputStream(inputStream, MemoryLimit.getMemoryLimitInKb());
         } catch (org.tukaani.xz.MemoryLimitException e) {
             //convert to commons-compress exception
-            throw new MemoryLimitException(e.getMemoryNeeded(), e.getMemoryLimit());
+            throw new MemoryLimitException("exceeded calculated memory limit", e);
         }
     }
 
diff --git a/src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java b/src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java
index ed2c476a..350b4b01 100644
--- a/src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java
+++ b/src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java
@@ -22,7 +22,6 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.nio.ByteOrder;
 
-import org.apache.commons.compress.MemoryLimit;
 import org.apache.commons.compress.MemoryLimitException;
 import org.apache.commons.compress.compressors.CompressorInputStream;
 import org.apache.commons.compress.utils.BitInputStream;
@@ -116,18 +115,25 @@ public abstract class LZWInputStream extends CompressorInputStream {
     /**
      * Initializes the arrays based on the maximum code size.
      * @param maxCodeSize maximum code size
-     *
-     * @throws MemoryLimitException
-     *      if the calculated memory usage, based on the maxTableSize,
-     *      is &gt; {@link MemoryLimit#MEMORY_LIMIT_IN_KB}
+     * @param memoryLimitInKb maximum allowed table size in Kb
+     * @throws MemoryLimitException if maxTableSize is > memoryLimitInKb
      */
-    protected void initializeTables(final int maxCodeSize) throws MemoryLimitException {
+    protected void initializeTables(final int maxCodeSize, final int memoryLimitInKb)
+            throws MemoryLimitException {
         final int maxTableSize = 1 << maxCodeSize;
+        if (memoryLimitInKb > -1 && maxTableSize > memoryLimitInKb*1024) {
+            throw new MemoryLimitException("Tried to allocate "+maxTableSize +
+                    " but memoryLimitInKb only allows "+(memoryLimitInKb*1024));
+        }
+        initializeTables(maxCodeSize);
+    }
 
-        //account for potential overflow
-        long memoryUsageInBytes = (long)maxTableSize * 6;//(4 (prefixes) + 1 (characters) +1 (outputStack))
-        MemoryLimit.checkLimitInKb(memoryUsageInBytes >> 10);
-
+    /**
+     * Initializes the arrays based on the maximum code size.
+     * @param maxCodeSize maximum code size
+     */
+    protected void initializeTables(final int maxCodeSize) {
+        final int maxTableSize = 1 << maxCodeSize;
         prefixes = new int[maxTableSize];
         characters = new byte[maxTableSize];
         outputStack = new byte[maxTableSize];
diff --git a/src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java b/src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java
index e80cbcf0..3f977ef9 100644
--- a/src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java
+++ b/src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java
@@ -110,7 +110,7 @@ public class XZCompressorInputStream extends CompressorInputStream {
             count(ret == -1 ? -1 : 1);
             return ret;
         } catch (org.tukaani.xz.MemoryLimitException e) {
-            throw new MemoryLimitException(e.getMemoryNeeded(), e.getMemoryLimit());
+            throw new MemoryLimitException("Exceeded memory limit", e);
         }
     }
 
@@ -122,7 +122,7 @@ public class XZCompressorInputStream extends CompressorInputStream {
             return ret;
         } catch (org.tukaani.xz.MemoryLimitException e) {
             //convert to commons-compress MemoryLimtException
-            throw new MemoryLimitException(e.getMemoryNeeded(), e.getMemoryLimit());
+            throw new MemoryLimitException("Exceeded memory limit", e);
         }
     }
 
@@ -132,7 +132,7 @@ public class XZCompressorInputStream extends CompressorInputStream {
             return in.skip(n);
         } catch (org.tukaani.xz.MemoryLimitException e) {
             //convert to commons-compress MemoryLimtException
-            throw new MemoryLimitException(e.getMemoryNeeded(), e.getMemoryLimit());
+            throw new MemoryLimitException("Excedded memory limit", e);
         }
     }
 
diff --git a/src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java b/src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java
index 28b69a29..ca61cd3e 100644
--- a/src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java
+++ b/src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java
@@ -22,6 +22,7 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.nio.ByteOrder;
 
+import org.apache.commons.compress.MemoryLimit;
 import org.apache.commons.compress.compressors.lzw.LZWInputStream;
 
 /**
@@ -51,7 +52,7 @@ public class ZCompressorInputStream extends LZWInputStream {
         if (blockMode) {
             setClearCode(DEFAULT_CODE_SIZE);
         }
-        initializeTables(maxCodeSize);
+        initializeTables(maxCodeSize, MemoryLimit.getMemoryLimitInKb());
         clearEntries();
     }
     
