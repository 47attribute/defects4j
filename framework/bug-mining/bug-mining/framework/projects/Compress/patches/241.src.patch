diff --git a/src/main/java/org/apache/commons/compress/MemoryLimitException.java b/src/main/java/org/apache/commons/compress/MemoryLimitException.java
deleted file mode 100644
index 122edb16..00000000
--- a/src/main/java/org/apache/commons/compress/MemoryLimitException.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.apache.commons.compress;
-
-import java.io.IOException;
-
-/**
- * If a stream checks for estimated memory allocation, and the estimate
- * goes above the memory limit, this is thrown.  This can also be thrown
- * if a stream tries to allocate a byte array that is larger than
- * the allowable limit.
- *
- * @since 1.14
- */
-public class MemoryLimitException extends IOException {
-
-    //long instead of int to account for overflow for corrupt files
-    private final long memoryNeededInKb;
-    private final int memoryLimitInKb;
-
-    public MemoryLimitException(long memoryNeededInKb, int memoryLimitInKb) {
-        super(buildMessage(memoryNeededInKb, memoryLimitInKb));
-        this.memoryNeededInKb = memoryNeededInKb;
-        this.memoryLimitInKb = memoryLimitInKb;
-    }
-
-    public MemoryLimitException(long memoryNeededInKb, int memoryLimitInKb, Exception e) {
-        super(buildMessage(memoryNeededInKb, memoryLimitInKb), e);
-        this.memoryNeededInKb = memoryNeededInKb;
-        this.memoryLimitInKb = memoryLimitInKb;
-    }
-
-    public long getMemoryNeededInKb() {
-        return memoryNeededInKb;
-    }
-
-    public int getMemoryLimitInKb() {
-        return memoryLimitInKb;
-    }
-
-    private static String buildMessage(long memoryNeededInKb, int memoryLimitInKb) {
-        return "" + memoryNeededInKb + " kb of memory would be needed; limit was "
-                + memoryLimitInKb + " kb. " +
-                "If the file is not corrupt, consider increasing the memory limit.";
-    }
-}
diff --git a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
index f3433d9f..a29179cd 100644
--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java
@@ -349,52 +349,28 @@ public class CompressorStreamFactory implements CompressorStreamProvider {
      */
     private volatile boolean decompressConcatenated = false;
 
-    private final int memoryLimitInKb;
     /**
      * Create an instance with the decompress Concatenated option set to false.
      */
     public CompressorStreamFactory() {
         this.decompressUntilEOF = null;
-        this.memoryLimitInKb = -1;
     }
 
     /**
      * Create an instance with the provided decompress Concatenated option.
-     *
+     * 
      * @param decompressUntilEOF
      *            if true, decompress until the end of the input; if false, stop
      *            after the first stream and leave the input position to point
      *            to the next byte after the stream. This setting applies to the
      *            gzip, bzip2 and xz formats only.
-     *
-     * @param memoryLimitInKb
-     *            Some streams require allocation of potentially significant
-     *            byte arrays/tables, and they can offer checks to prevent OOMs
-     *            on corrupt files.  Set the maximum allowed memory allocation in KBs.
-     *
-     * @since 1.14
+     * @since 1.10
      */
-    public CompressorStreamFactory(final boolean decompressUntilEOF, final int memoryLimitInKb) {
+    public CompressorStreamFactory(final boolean decompressUntilEOF) {
         this.decompressUntilEOF = Boolean.valueOf(decompressUntilEOF);
         // Also copy to existing variable so can continue to use that as the
         // current value
         this.decompressConcatenated = decompressUntilEOF;
-        this.memoryLimitInKb = memoryLimitInKb;
-    }
-
-
-    /**
-     * Create an instance with the provided decompress Concatenated option.
-     * 
-     * @param decompressUntilEOF
-     *            if true, decompress until the end of the input; if false, stop
-     *            after the first stream and leave the input position to point
-     *            to the next byte after the stream. This setting applies to the
-     *            gzip, bzip2 and xz formats only.
-     * @since 1.10
-     */
-    public CompressorStreamFactory(final boolean decompressUntilEOF) {
-        this(decompressUntilEOF, -1);
     }
 
     /**
@@ -497,9 +473,7 @@ public class CompressorStreamFactory implements CompressorStreamProvider {
      *            the input stream
      * @return compressor input stream
      * @throws CompressorException
-     *             if the compressor name is not known or not available,
-     *             or if there's an IOException or MemoryLimitException thrown
-     *             during initialization
+     *             if the compressor name is not known or not available
      * @throws IllegalArgumentException
      *             if the name or input stream is null
      */
@@ -529,14 +503,14 @@ public class CompressorStreamFactory implements CompressorStreamProvider {
                 if (!XZUtils.isXZCompressionAvailable()) {
                     throw new CompressorException("XZ compression is not available.");
                 }
-                return new XZCompressorInputStream(in, actualDecompressConcatenated, memoryLimitInKb);
+                return new XZCompressorInputStream(in, actualDecompressConcatenated);
             }
 
             if (LZMA.equalsIgnoreCase(name)) {
                 if (!LZMAUtils.isLZMACompressionAvailable()) {
                     throw new CompressorException("LZMA compression is not available");
                 }
-                return new LZMACompressorInputStream(in, memoryLimitInKb);
+                return new LZMACompressorInputStream(in);
             }
 
             if (PACK200.equalsIgnoreCase(name)) {
@@ -552,7 +526,7 @@ public class CompressorStreamFactory implements CompressorStreamProvider {
             }
 
             if (Z.equalsIgnoreCase(name)) {
-                return new ZCompressorInputStream(in, memoryLimitInKb);
+                return new ZCompressorInputStream(in);
             }
 
             if (DEFLATE.equalsIgnoreCase(name)) {
diff --git a/src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java b/src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java
index 5723b5c2..556c78c7 100644
--- a/src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java
+++ b/src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java
@@ -20,8 +20,6 @@ package org.apache.commons.compress.compressors.lzma;
 
 import java.io.IOException;
 import java.io.InputStream;
-
-import org.apache.commons.compress.MemoryLimitException;
 import org.tukaani.xz.LZMAInputStream;
 
 import org.apache.commons.compress.compressors.CompressorInputStream;
@@ -33,36 +31,21 @@ import org.apache.commons.compress.compressors.CompressorInputStream;
 public class LZMACompressorInputStream extends CompressorInputStream {
     private final InputStream in;
 
-    public LZMACompressorInputStream(final InputStream inputStream)
-            throws IOException {
-        in = new LZMAInputStream(inputStream, -1);
-    }
-
     /**
      * Creates a new input stream that decompresses LZMA-compressed data
      * from the specified input stream.
      *
      * @param       inputStream where to read the compressed data
      *
-     * @param       memoryLimitInKb calculated memory use threshold.  Throws MemoryLimitException
-     *                            if calculate memory use is above this threshold
-     *
      * @throws      IOException if the input is not in the .lzma format,
      *                          the input is corrupt or truncated, the .lzma
      *                          headers specify sizes that are not supported
      *                          by this implementation, or the underlying
      *                          <code>inputStream</code> throws an exception
-     *
-     * @since 1.14
      */
-    public LZMACompressorInputStream(final InputStream inputStream, int memoryLimitInKb)
+    public LZMACompressorInputStream(final InputStream inputStream)
             throws IOException {
-        try {
-            in = new LZMAInputStream(inputStream, memoryLimitInKb);
-        } catch (org.tukaani.xz.MemoryLimitException e) {
-            //convert to commons-compress exception
-            throw new MemoryLimitException(e.getMemoryNeeded(), e.getMemoryLimit(), e);
-        }
+        in = new LZMAInputStream(inputStream);
     }
 
     /** {@inheritDoc} */
diff --git a/src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java b/src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java
index 2a6127db..5967f66b 100644
--- a/src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java
+++ b/src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java
@@ -22,7 +22,6 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.nio.ByteOrder;
 
-import org.apache.commons.compress.MemoryLimitException;
 import org.apache.commons.compress.compressors.CompressorInputStream;
 import org.apache.commons.compress.utils.BitInputStream;
 
@@ -114,30 +113,6 @@ public abstract class LZWInputStream extends CompressorInputStream {
 
     /**
      * Initializes the arrays based on the maximum code size.
-     * First checks that the estimated memory usage is below memoryLimitInKb
-     *
-     * @param maxCodeSize maximum code size
-     * @param memoryLimitInKb maximum allowed estimated memory usage in Kb
-     * @throws MemoryLimitException if estimated memory usage is greater than memoryLimitInKb
-     */
-    protected void initializeTables(final int maxCodeSize, final int memoryLimitInKb)
-            throws MemoryLimitException {
-
-        if (memoryLimitInKb > -1) {
-            final int maxTableSize = 1 << maxCodeSize;
-            //account for potential overflow
-            long memoryUsageInBytes = (long) maxTableSize * 6;//(4 (prefixes) + 1 (characters) +1 (outputStack))
-            long memoryUsageInKb = memoryUsageInBytes >> 10;
-
-            if (memoryUsageInKb > (long)memoryLimitInKb) {
-                throw new MemoryLimitException(memoryUsageInKb, memoryLimitInKb);
-            }
-        }
-        initializeTables(maxCodeSize);
-    }
-
-    /**
-     * Initializes the arrays based on the maximum code size.
      * @param maxCodeSize maximum code size
      */
     protected void initializeTables(final int maxCodeSize) {
diff --git a/src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java b/src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java
index fc0cbf52..27d70d23 100644
--- a/src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java
+++ b/src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java
@@ -20,8 +20,6 @@ package org.apache.commons.compress.compressors.xz;
 
 import java.io.IOException;
 import java.io.InputStream;
-
-import org.apache.commons.compress.MemoryLimitException;
 import org.tukaani.xz.XZ;
 import org.tukaani.xz.SingleXZInputStream;
 import org.tukaani.xz.XZInputStream;
@@ -94,72 +92,30 @@ public class XZCompressorInputStream extends CompressorInputStream {
     public XZCompressorInputStream(final InputStream inputStream,
                                    final boolean decompressConcatenated)
             throws IOException {
-        this(inputStream, decompressConcatenated, -1);
-    }
-
-    /**
-     * Creates a new input stream that decompresses XZ-compressed data
-     * from the specified input stream.
-     *
-     * @param       inputStream where to read the compressed data
-     * @param       decompressConcatenated
-     *                          if true, decompress until the end of the
-     *                          input; if false, stop after the first .xz
-     *                          stream and leave the input position to point
-     *                          to the next byte after the .xz stream
-     * @param       memoryLimitInKb memory limit used when reading blocks.  If
-     *                          the estimated memory limit is exceeded on {@link #read()},
-     *                          a {@link MemoryLimitException} is thrown.
-     *
-     * @throws      IOException if the input is not in the .xz format,
-     *                          the input is corrupt or truncated, the .xz
-     *                          headers specify options that are not supported
-     *                          by this implementation,
-     *                          or the underlying <code>inputStream</code> throws an exception
-     *
-     * @since 1.14
-     */
-    public XZCompressorInputStream(InputStream inputStream,
-                                   boolean decompressConcatenated, final int memoryLimitInKb)
-            throws IOException {
         if (decompressConcatenated) {
-            in = new XZInputStream(inputStream, memoryLimitInKb);
+            in = new XZInputStream(inputStream);
         } else {
-            in = new SingleXZInputStream(inputStream, memoryLimitInKb);
+            in = new SingleXZInputStream(inputStream);
         }
     }
 
     @Override
     public int read() throws IOException {
-        try {
-            final int ret = in.read();
-            count(ret == -1 ? -1 : 1);
-            return ret;
-        } catch (org.tukaani.xz.MemoryLimitException e) {
-            throw new MemoryLimitException(e.getMemoryNeeded(), e.getMemoryLimit(), e);
-        }
+        final int ret = in.read();
+        count(ret == -1 ? -1 : 1);
+        return ret;
     }
 
     @Override
     public int read(final byte[] buf, final int off, final int len) throws IOException {
-        try {
-            final int ret = in.read(buf, off, len);
-            count(ret);
-            return ret;
-        } catch (org.tukaani.xz.MemoryLimitException e) {
-            //convert to commons-compress MemoryLimtException
-            throw new MemoryLimitException(e.getMemoryNeeded(), e.getMemoryLimit(), e);
-        }
+        final int ret = in.read(buf, off, len);
+        count(ret);
+        return ret;
     }
 
     @Override
     public long skip(final long n) throws IOException {
-        try {
-            return in.skip(n);
-        } catch (org.tukaani.xz.MemoryLimitException e) {
-            //convert to commons-compress MemoryLimtException
-            throw new MemoryLimitException(e.getMemoryNeeded(), e.getMemoryLimit(), e);
-        }
+        return in.skip(n);
     }
 
     @Override
diff --git a/src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java b/src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java
index 994e102e..799e58d5 100644
--- a/src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java
+++ b/src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java
@@ -37,9 +37,8 @@ public class ZCompressorInputStream extends LZWInputStream {
     private final boolean blockMode;
     private final int maxCodeSize;
     private long totalCodesRead = 0;
-
-    public ZCompressorInputStream(final InputStream inputStream, final int memoryLimitInKb)
-            throws IOException {
+    
+    public ZCompressorInputStream(final InputStream inputStream) throws IOException {
         super(inputStream, ByteOrder.LITTLE_ENDIAN);
         final int firstByte = (int) in.readBits(8);
         final int secondByte = (int) in.readBits(8);
@@ -52,13 +51,9 @@ public class ZCompressorInputStream extends LZWInputStream {
         if (blockMode) {
             setClearCode(DEFAULT_CODE_SIZE);
         }
-        initializeTables(maxCodeSize, memoryLimitInKb);
+        initializeTables(maxCodeSize);
         clearEntries();
     }
-
-    public ZCompressorInputStream(final InputStream inputStream) throws IOException {
-        this(inputStream, -1);
-    }
     
     private void clearEntries() {
         setTableSize((1 << 8) + (blockMode ? 1 : 0));
