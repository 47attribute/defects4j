diff --git a/src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java b/src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java
index 6fde36d4..67abcd3a 100644
--- a/src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java
+++ b/src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java
@@ -31,7 +31,6 @@ import java.io.FileInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 
-import org.apache.commons.compress.MemoryLimitException;
 import org.apache.commons.compress.MockEvilInputStream;
 import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
 import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;
@@ -134,10 +133,6 @@ public final class DetectCompressorTestCase {
         assertEquals(CompressorStreamFactory.SNAPPY_FRAMED, detect("bla.tar.sz"));
         assertEquals(CompressorStreamFactory.Z, detect("bla.tar.Z"));
 
-        //make sure we don't oom on detect
-        assertEquals(CompressorStreamFactory.Z, detect("COMPRESS-386"));
-        assertEquals(CompressorStreamFactory.LZMA, detect("COMPRESS-382"));
-
         try {
             CompressorStreamFactory.detect(new BufferedInputStream(new ByteArrayInputStream(new byte[0])));
             fail("shouldn't be able to detect empty stream");
@@ -171,55 +166,6 @@ public final class DetectCompressorTestCase {
         return name;
     }
 
-    @Test(expected = MemoryLimitException.class)
-    public void testLZMAMemoryLimit() throws Exception {
-        getStreamFor("COMPRESS-382", 100);
-    }
-
-    @Test(expected = MemoryLimitException.class)
-    public void testZMemoryLimit() throws Exception {
-        getStreamFor("COMPRESS-386", 100);
-    }
-
-    @Test(expected = MemoryLimitException.class)
-    public void testXZMemoryLimitOnRead() throws Exception {
-        //Even though the file is very small, the memory limit
-        //has to be quite large (8296 KiB) because of the dictionary size
-
-        //This is triggered on read(); not during initialization.
-        //This test is here instead of the xz unit test to make sure
-        //that the parameter is properly passed via the CompressorStreamFactory
-        try (InputStream compressorIs = getStreamFor("bla.tar.xz", 100)) {
-            compressorIs.read();
-        }
-    }
-
-    @Test(expected = MemoryLimitException.class)
-    public void testXZMemoryLimitOnSkip() throws Exception {
-        try (InputStream compressorIs = getStreamFor("bla.tar.xz", 100)) {
-            compressorIs.skip(10);
-        }
-    }
-
-    private InputStream getStreamFor(final String fileName, final int memoryLimitInKb) throws Exception {
-        CompressorStreamFactory fac = new CompressorStreamFactory(true,
-                memoryLimitInKb);
-        InputStream is = new BufferedInputStream(
-                new FileInputStream(getFile(fileName)));
-        try {
-            return fac.createCompressorInputStream(is);
-        } catch (CompressorException e) {
-            if (e.getCause() != null && e.getCause() instanceof Exception) {
-                //unwrap cause to reveal MemoryLimitException
-                throw (Exception)e.getCause();
-            } else {
-                throw e;
-            }
-        }
-
-    }
-
-
     @Test
     public void testOverride() {
         CompressorStreamFactory fac = new CompressorStreamFactory();
