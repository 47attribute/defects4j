diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java b/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java
index f0508740..90bd7505 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java
@@ -25,14 +25,14 @@ import java.util.zip.ZipException;
 /**
  * <p>An extra field that stores additional file and directory timestamp data
  * for zip entries.   Each zip entry can include up to three timestamps
- * (modify, access, create*).  The timestamps are stored as 32 bit signed
+ * (modify, access, create*).  The timestamps are stored as 32 bit unsigned
  * integers representing seconds since UNIX epoch (Jan 1st, 1970, UTC).
  * This field improves on zip's default timestamp granularity, since it
  * allows one to store additional timestamps, and, in addition, the timestamps
  * are stored using per-second granularity (zip's default behaviour can only store
  * timestamps to the nearest <em>even</em> second).
  * </p><p>
- * Unfortunately, 32 (signed) bits can only store dates up to the year 2037,
+ * Unfortunately, 32 (unsigned) bits can only store dates up to the year 2106,
  * and so this extra field will eventually be obsolete.  Enjoy it while it lasts!
  * </p>
  * <ul>
@@ -370,7 +370,7 @@ public class X5455_ExtendedTimestamp implements ZipExtraField, Cloneable, Serial
      * @return modify time as java.util.Date or null.
      */
     public Date getModifyJavaTime() {
-        return zipLongToDate(modifyTime);
+        return modifyTime != null ? new Date(modifyTime.getValue() * 1000) : null;
     }
 
     /**
@@ -382,11 +382,7 @@ public class X5455_ExtendedTimestamp implements ZipExtraField, Cloneable, Serial
      * @return access time as java.util.Date or null.
      */
     public Date getAccessJavaTime() {
-        return zipLongToDate(accessTime);
-    }
-
-    private static Date zipLongToDate(ZipLong unixTime) {
-        return unixTime != null ? new Date(unixTime.getIntValue() * 1000L) : null;
+        return accessTime != null ? new Date(accessTime.getValue() * 1000) : null;
     }
 
     /**
@@ -404,7 +400,7 @@ public class X5455_ExtendedTimestamp implements ZipExtraField, Cloneable, Serial
      * @return create time as java.util.Date or null.
      */
     public Date getCreateJavaTime() {
-        return zipLongToDate(createTime);
+        return createTime != null ? new Date(createTime.getValue() * 1000) : null;
     }
 
     /**
@@ -522,12 +518,10 @@ public class X5455_ExtendedTimestamp implements ZipExtraField, Cloneable, Serial
     private static ZipLong dateToZipLong(final Date d) {
         if (d == null) { return null; }
 
-        return unixTimeToZipLong(d.getTime() / 1000);
-    }
-
-    private static ZipLong unixTimeToZipLong(long l) {
-        if (l < Integer.MIN_VALUE || l > Integer.MAX_VALUE) {
-            throw new IllegalArgumentException("X5455 timestamps must fit in a signed 32 bit integer: " + l);
+        final long TWO_TO_32 = 0x100000000L;
+        final long l = d.getTime() / 1000;
+        if (l >= TWO_TO_32) {
+            throw new IllegalArgumentException("Cannot set an X5455 timestamp larger than 2^32: " + l);
         }
         return new ZipLong(l);
     }
