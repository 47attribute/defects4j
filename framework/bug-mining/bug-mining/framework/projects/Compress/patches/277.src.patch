diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.java b/src/main/java/org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.java
index a92f9c71..5d7bfc45 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.java
@@ -112,13 +112,6 @@ public class UnsupportedZipFeatureException extends ZipException {
          * @since 1.5
          */
         public static final Feature SPLITTING = new Feature("splitting");
-        /**
-         * The archive contains entries with unknown compressed size
-         * for a compression method that doesn't support detection of
-         * the end of the compressed stream.
-         * @since 1.16
-         */
-        public static final Feature UNKNOWN_COMPRESSED_SIZE = new Feature("unknown compressed size");
 
         private final String name;
 
diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
index 41e6940b..755c7c7f 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
@@ -412,8 +412,8 @@ public class ZipArchiveInputStream extends ArchiveInputStream {
         if (ae instanceof ZipArchiveEntry) {
             final ZipArchiveEntry ze = (ZipArchiveEntry) ae;
             return ZipUtil.canHandleEntryData(ze)
-                && supportsDataDescriptorFor(ze)
-                && supportsCompressedSizeFor(ze);
+                && supportsDataDescriptorFor(ze);
+
         }
         return false;
     }
@@ -438,10 +438,6 @@ public class ZipArchiveInputStream extends ArchiveInputStream {
             throw new UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,
                     current.entry);
         }
-        if (!supportsCompressedSizeFor(current.entry)) {
-            throw new UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.UNKNOWN_COMPRESSED_SIZE,
-                    current.entry);
-        }
 
         int read;
         if (current.entry.getMethod() == ZipArchiveOutputStream.STORED) {
@@ -808,19 +804,6 @@ public class ZipArchiveInputStream extends ArchiveInputStream {
     }
 
     /**
-     * Whether the compressed size for the entry is either known or
-     * not required by the compression method being used.
-     */
-    private boolean supportsCompressedSizeFor(final ZipArchiveEntry entry) {
-        return entry.getCompressedSize() != ArchiveEntry.SIZE_UNKNOWN
-            || entry.getMethod() == ZipEntry.DEFLATED
-            || entry.getMethod() == ZipMethod.ENHANCED_DEFLATED.getCode()
-            || (entry.getGeneralPurposeBit().usesDataDescriptor()
-                && allowStoredEntriesWithDataDescriptor
-                && entry.getMethod() == ZipEntry.STORED);
-    }
-
-    /**
      * Caches a stored entry that uses the data descriptor.
      *
      * <ul>
