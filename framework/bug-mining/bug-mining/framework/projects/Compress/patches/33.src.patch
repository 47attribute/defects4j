diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java b/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java
index 91afa328..9f9de11c 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java
@@ -86,28 +86,13 @@ public class ExtraFieldUtils {
 
     /**
      * Split the array into ExtraFields and populate them with the
-     * given data as local file data, throwing an exception if the
-     * data cannot be parsed.
+     * given data as local file data.
      * @param data an array of bytes as it appears in local file data
      * @return an array of ExtraFields
      * @throws ZipException on error
      */
     public static ZipExtraField[] parse(byte[] data) throws ZipException {
-        return parse(data, true, UnparseableExtraField.THROW);
-    }
-
-    /**
-     * Split the array into ExtraFields and populate them with the
-     * given data, throwing an exception if the data cannot be parsed.
-     * @param data an array of bytes
-     * @param local whether data originates from the local file data
-     * or the central directory
-     * @return an array of ExtraFields
-     * @throws ZipException on error
-     */
-    public static ZipExtraField[] parse(byte[] data, boolean local)
-        throws ZipException {
-        return parse(data, local, UnparseableExtraField.THROW);
+        return parse(data, true);
     }
 
     /**
@@ -116,50 +101,23 @@ public class ExtraFieldUtils {
      * @param data an array of bytes
      * @param local whether data originates from the local file data
      * or the central directory
-     * @param onUnparseableData what to do if the extra field data
-     * cannot be parsed.
      * @return an array of ExtraFields
      * @throws ZipException on error
      */
-    public static ZipExtraField[] parse(byte[] data, boolean local,
-                                        UnparseableExtraField onUnparseableData)
+    public static ZipExtraField[] parse(byte[] data, boolean local)
         throws ZipException {
         List v = new ArrayList();
         int start = 0;
-        LOOP:
         while (start <= data.length - WORD) {
             ZipShort headerId = new ZipShort(data, start);
             int length = (new ZipShort(data, start + 2)).getValue();
             if (start + WORD + length > data.length) {
-                switch(onUnparseableData.getKey()) {
-                case UnparseableExtraField.THROW_KEY:
-                    throw new ZipException("bad extra field starting at "
-                                           + start + ".  Block length of "
-                                           + length + " bytes exceeds remaining"
-                                           + " data of "
-                                           + (data.length - start - WORD)
-                                           + " bytes.");
-                case UnparseableExtraField.READ_KEY:
-                    UnparseableExtraFieldData field =
-                        new UnparseableExtraFieldData();
-                    if (local) {
-                        field.parseFromLocalFileData(data, start,
-                                                     data.length - start);
-                    } else {
-                        field.parseFromCentralDirectoryData(data, start,
-                                                            data.length - start);
-                    }
-                    v.add(field);
-                    /*FALLTHROUGH*/
-                case UnparseableExtraField.SKIP_KEY:
-                    // since we cannot parse the data we must assume
-                    // the extra field consumes the whole rest of the
-                    // available data
-                    break LOOP;
-                default:
-                    throw new ZipException("unknown UnparseableExtraField key: "
-                                           + onUnparseableData.getKey());
-                }
+                throw new ZipException("bad extra field starting at "
+                                       + start + ".  Block length of "
+                                       + length + " bytes exceeds remaining"
+                                       + " data of "
+                                       + (data.length - start - WORD)
+                                       + " bytes.");
             }
             try {
                 ZipExtraField ze = createExtraField(headerId);
@@ -188,19 +146,13 @@ public class ExtraFieldUtils {
      * @return an array of bytes
      */
     public static byte[] mergeLocalFileDataData(ZipExtraField[] data) {
-        final boolean lastIsUnparseableHolder = data.length > 0
-            && data[data.length - 1] instanceof UnparseableExtraFieldData;
-        int regularExtraFieldCount =
-            lastIsUnparseableHolder ? data.length - 1 : data.length;
-
-        int sum = WORD * regularExtraFieldCount;
+        int sum = WORD * data.length;
         for (int i = 0; i < data.length; i++) {
             sum += data[i].getLocalFileDataLength().getValue();
         }
-
         byte[] result = new byte[sum];
         int start = 0;
-        for (int i = 0; i < regularExtraFieldCount; i++) {
+        for (int i = 0; i < data.length; i++) {
             System.arraycopy(data[i].getHeaderId().getBytes(),
                              0, result, start, 2);
             System.arraycopy(data[i].getLocalFileDataLength().getBytes(),
@@ -209,10 +161,6 @@ public class ExtraFieldUtils {
             System.arraycopy(local, 0, result, start + WORD, local.length);
             start += (local.length + WORD);
         }
-        if (lastIsUnparseableHolder) {
-            byte[] local = data[data.length - 1].getLocalFileDataData();
-            System.arraycopy(local, 0, result, start, local.length);
-        }
         return result;
     }
 
@@ -222,18 +170,13 @@ public class ExtraFieldUtils {
      * @return an array of bytes
      */
     public static byte[] mergeCentralDirectoryData(ZipExtraField[] data) {
-        final boolean lastIsUnparseableHolder = data.length > 0
-            && data[data.length - 1] instanceof UnparseableExtraFieldData;
-        int regularExtraFieldCount =
-            lastIsUnparseableHolder ? data.length - 1 : data.length;
-
-        int sum = WORD * regularExtraFieldCount;
+        int sum = WORD * data.length;
         for (int i = 0; i < data.length; i++) {
             sum += data[i].getCentralDirectoryLength().getValue();
         }
         byte[] result = new byte[sum];
         int start = 0;
-        for (int i = 0; i < regularExtraFieldCount; i++) {
+        for (int i = 0; i < data.length; i++) {
             System.arraycopy(data[i].getHeaderId().getBytes(),
                              0, result, start, 2);
             System.arraycopy(data[i].getCentralDirectoryLength().getBytes(),
@@ -242,60 +185,6 @@ public class ExtraFieldUtils {
             System.arraycopy(local, 0, result, start + WORD, local.length);
             start += (local.length + WORD);
         }
-        if (lastIsUnparseableHolder) {
-            byte[] local = data[data.length - 1].getCentralDirectoryData();
-            System.arraycopy(local, 0, result, start, local.length);
-        }
         return result;
     }
-
-    /**
-     * "enum" for the possible actions to take if the extra field
-     * cannot be parsed.
-     */
-    public static final class UnparseableExtraField {
-        /**
-         * Key for "throw an exception" action.
-         */
-        public static final int THROW_KEY = 0;
-        /**
-         * Key for "skip" action.
-         */
-        public static final int SKIP_KEY = 1;
-        /**
-         * Key for "read" action.
-         */
-        public static final int READ_KEY = 2;
-
-        /**
-         * Throw an exception if field cannot be parsed.
-         */
-        public static final UnparseableExtraField THROW
-            = new UnparseableExtraField(THROW_KEY);
-
-        /**
-         * Skip the extra field entirely and don't make its data
-         * available - effectively removing the extra field data.
-         */
-        public static final UnparseableExtraField SKIP
-            = new UnparseableExtraField(SKIP_KEY);
-
-        /**
-         * Read the extra field data into an instance of {@link
-         * UnparseableExtraFieldData UnparseableExtraFieldData}.
-         */
-        public static final UnparseableExtraField READ
-            = new UnparseableExtraField(READ_KEY);
-
-        private final int key;
-
-        private UnparseableExtraField(int k) {
-            key = k;
-        }
-
-        /**
-         * Key of the action to take.
-         */
-        public int getKey() { return key; }
-    }
 }
diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java b/src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java
deleted file mode 100644
index 7bd5860b..00000000
--- a/src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java
+++ /dev/null
@@ -1,113 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.apache.commons.compress.archivers.zip;
-
-/**
- * Wrapper for extra field data that doesn't conform to the recommended format of header-tag + size + data.
- *
- * <p>The header-id is artificial (and not listed as a know ID in
- * {@link http://www.pkware.com/documents/casestudies/APPNOTE.TXT
- * APPNOTE.TXT}.  Since it isn't used anywhere except to satisfy the
- * ZipExtraField contract it shouldn't matter anyway.</p>
- * @NotThreadSafe
- */
-public final class UnparseableExtraFieldData implements ZipExtraField {
-    private static final ZipShort HEADER_ID = new ZipShort(0xACC1);
-
-    private byte[] localFileData;
-    private byte[] centralDirectoryData;
-
-    /**
-     * The Header-ID.
-     *
-     * @return a completely arbitrary value that should be ignored.
-     */
-    public ZipShort getHeaderId() {
-        return HEADER_ID;
-    }
-
-    /**
-     * Length of the complete extra field in the local file data.
-     *
-     * @return The LocalFileDataLength value
-     */
-    public ZipShort getLocalFileDataLength() {
-        return new ZipShort(localFileData == null ? 0 : localFileData.length);
-    }
-
-    /**
-     * Length of the complete extra field in the central directory.
-     *
-     * @return The CentralDirectoryLength value
-     */
-    public ZipShort getCentralDirectoryLength() {
-        return centralDirectoryData == null
-            ? getLocalFileDataLength()
-            : new ZipShort(centralDirectoryData.length);
-    }
-
-    /**
-     * The actual data to put into local file data.
-     *
-     * @return The LocalFileDataData value
-     */
-    public byte[] getLocalFileDataData() {
-        return ZipUtil.copy(localFileData);
-    }
-
-    /**
-     * The actual data to put into central directory.
-     *
-     * @return The CentralDirectoryData value
-     */
-    public byte[] getCentralDirectoryData() {
-        return centralDirectoryData == null
-            ? getLocalFileDataData() : ZipUtil.copy(centralDirectoryData);
-    }
-
-    /**
-     * Populate data from this array as if it was in local file data.
-     *
-     * @param buffer the buffer to read data from
-     * @param offset offset into buffer to read data
-     * @param length the length of data
-     */
-    public void parseFromLocalFileData(byte[] buffer, int offset, int length) {
-        localFileData = new byte[length];
-        System.arraycopy(buffer, offset, localFileData, 0, length);
-    }
-
-    /**
-     * Populate data from this array as if it was in central directory data.
-     *
-     * @param buffer the buffer to read data from
-     * @param offset offset into buffer to read data
-     * @param length the length of data
-     * @exception ZipException on error
-     */
-    public void parseFromCentralDirectoryData(byte[] buffer, int offset,
-                                              int length) {
-        centralDirectoryData = new byte[length];
-        System.arraycopy(buffer, offset, centralDirectoryData, 0, length);
-        if (localFileData == null) {
-            parseFromLocalFileData(buffer, offset, length);
-        }
-    }
-
-}
diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java b/src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java
index e0bdf199..72594051 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java
@@ -61,7 +61,7 @@ public class UnrecognizedExtraField implements ZipExtraField {
      * @param data the field data to use
      */
     public void setLocalFileDataData(byte[] data) {
-        localData = ZipUtil.copy(data);
+        localData = copy(data);
     }
 
     /**
@@ -77,7 +77,7 @@ public class UnrecognizedExtraField implements ZipExtraField {
      * @return the local data
      */
     public byte[] getLocalFileDataData() {
-        return ZipUtil.copy(localData);
+        return copy(localData);
     }
 
     /**
@@ -91,7 +91,7 @@ public class UnrecognizedExtraField implements ZipExtraField {
      * @param data the data to use
      */
     public void setCentralDirectoryData(byte[] data) {
-        centralData = ZipUtil.copy(data);
+        centralData = copy(data);
     }
 
     /**
@@ -112,7 +112,7 @@ public class UnrecognizedExtraField implements ZipExtraField {
      */
     public byte[] getCentralDirectoryData() {
         if (centralData != null) {
-            return ZipUtil.copy(centralData);
+            return copy(centralData);
         }
         return getLocalFileDataData();
     }
@@ -145,4 +145,12 @@ public class UnrecognizedExtraField implements ZipExtraField {
         }
     }
 
+    private static byte[] copy(byte[] from) {
+        if (from != null) {
+            byte[] to = new byte[from.length];
+            System.arraycopy(from, 0, to, 0, to.length);
+            return to;
+        }
+        return null;
+    }
 }
diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java b/src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java
index 289068ff..84a7f1c5 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java
@@ -167,17 +167,5 @@ public abstract class ZipUtil {
         return null;
     }
 
-    /**
-     * Create a copy of the given array - or return null if the
-     * argument is null.
-     */
-    static byte[] copy(byte[] from) {
-        if (from != null) {
-            byte[] to = new byte[from.length];
-            System.arraycopy(from, 0, to, 0, to.length);
-            return to;
-        }
-        return null;
-    }
 
 }
\ No newline at end of file
