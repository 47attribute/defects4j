diff --git a/src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java b/src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java
index 5cd090b7..9626c77f 100644
--- a/src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java
+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java
@@ -18,7 +18,6 @@
 
 package org.apache.commons.compress.archivers.zip;
 
-import java.util.Arrays;
 import junit.framework.TestCase;
 
 /**
@@ -85,59 +84,6 @@ public class ExtraFieldUtilsTest extends TestCase implements UnixStat {
         }
     }
 
-    public void testParseWithRead() throws Exception {
-        ZipExtraField[] ze =
-            ExtraFieldUtils.parse(data, true,
-                                  ExtraFieldUtils.UnparseableExtraField.READ);
-        assertEquals("number of fields", 2, ze.length);
-        assertTrue("type field 1", ze[0] instanceof AsiExtraField);
-        assertEquals("mode field 1", 040755,
-                     ((AsiExtraField) ze[0]).getMode());
-        assertTrue("type field 2", ze[1] instanceof UnrecognizedExtraField);
-        assertEquals("data length field 2", 1,
-                     ze[1].getLocalFileDataLength().getValue());
-
-        byte[] data2 = new byte[data.length-1];
-        System.arraycopy(data, 0, data2, 0, data2.length);
-        ze = ExtraFieldUtils.parse(data2, true,
-                                   ExtraFieldUtils.UnparseableExtraField.READ);
-        assertEquals("number of fields", 2, ze.length);
-        assertTrue("type field 1", ze[0] instanceof AsiExtraField);
-        assertEquals("mode field 1", 040755,
-                     ((AsiExtraField) ze[0]).getMode());
-        assertTrue("type field 2", ze[1] instanceof UnparseableExtraFieldData);
-        assertEquals("data length field 2", 4,
-                     ze[1].getLocalFileDataLength().getValue());
-        byte[] expectedData = new byte[4];
-        for (int i = 0; i < 4; i++) {
-            assertEquals("byte number " + i,
-                         data2[data.length - 5 + i],
-                         ze[1].getLocalFileDataData()[i]);
-        }
-    }
-
-    public void testParseWithSkip() throws Exception {
-        ZipExtraField[] ze =
-            ExtraFieldUtils.parse(data, true,
-                                  ExtraFieldUtils.UnparseableExtraField.SKIP);
-        assertEquals("number of fields", 2, ze.length);
-        assertTrue("type field 1", ze[0] instanceof AsiExtraField);
-        assertEquals("mode field 1", 040755,
-                     ((AsiExtraField) ze[0]).getMode());
-        assertTrue("type field 2", ze[1] instanceof UnrecognizedExtraField);
-        assertEquals("data length field 2", 1,
-                     ze[1].getLocalFileDataLength().getValue());
-
-        byte[] data2 = new byte[data.length-1];
-        System.arraycopy(data, 0, data2, 0, data2.length);
-        ze = ExtraFieldUtils.parse(data2, true,
-                                   ExtraFieldUtils.UnparseableExtraField.SKIP);
-        assertEquals("number of fields", 1, ze.length);
-        assertTrue("type field 1", ze[0] instanceof AsiExtraField);
-        assertEquals("mode field 1", 040755,
-                     ((AsiExtraField) ze[0]).getMode());
-    }
-
     /**
      * Test merge methods
      */
@@ -166,30 +112,4 @@ public class ExtraFieldUtilsTest extends TestCase implements UnixStat {
         }
 
     }
-
-    public void testMergeWithUnparseableData() throws Exception {
-        ZipExtraField d = new UnparseableExtraFieldData();
-        d.parseFromLocalFileData(new byte[] {1, 0, 1, 0}, 0, 4);
-        byte[] local =
-            ExtraFieldUtils.mergeLocalFileDataData(new ZipExtraField[] {a, d});
-        assertEquals("local length", data.length - 1, local.length);
-        for (int i = 0; i < local.length; i++) {
-            assertEquals("local byte " + i, data[i], local[i]);
-        }
-
-        byte[] dCentral = d.getCentralDirectoryData();
-        byte[] data2 = new byte[4 + aLocal.length + dCentral.length];
-        System.arraycopy(data, 0, data2, 0, 4 + aLocal.length + 2);
-        System.arraycopy(dCentral, 0, data2,
-                         4 + aLocal.length, dCentral.length);
-
-
-        byte[] central =
-            ExtraFieldUtils.mergeCentralDirectoryData(new ZipExtraField[] {a, d});
-        assertEquals("central length", data2.length, central.length);
-        for (int i = 0; i < central.length; i++) {
-            assertEquals("central byte " + i, data2[i], central[i]);
-        }
-
-    }
 }
