diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java
index 9bf624dc..79f4d16b 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java
@@ -18,11 +18,9 @@
 package org.apache.commons.compress.archivers.zip;
 
 import java.io.File;
-import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Date;
 import java.util.LinkedHashMap;
-import java.util.List;
 import java.util.zip.ZipException;
 import org.apache.commons.compress.archivers.ArchiveEntry;
 
@@ -30,22 +28,6 @@ import org.apache.commons.compress.archivers.ArchiveEntry;
  * Extension that adds better handling of extra fields and provides
  * access to the internal and external file attributes.
  *
- * <p>The extra data is expected to follow the recommendation of
- * {@link http://www.pkware.com/documents/casestudies/APPNOTE.TXT
- * APPNOTE.txt}:</p>
- * <ul>
- *   <li>the extra byte array consists of a sequence of extra fields</li>
- *   <li>each extra fields starts by a two byte header id followed by
- *   a two byte sequence holding the length of the remainder of
- *   data.</li>
- * </ul>
- *
- * <p>Any extra data that cannot be parsed by the rules above will be
- * consumed as "unparseable" extra data and treated differently by the
- * methods of this class.  Versions prior to Apache Commons Compress
- * 1.1 would have thrown an exception if any attempt was made to read
- * or write extra data not conforming to the recommendation.</p>
- *
  * @NotThreadSafe
  */
 public class ZipArchiveEntry extends java.util.zip.ZipEntry
@@ -72,7 +54,6 @@ public class ZipArchiveEntry extends java.util.zip.ZipEntry
     private int platform = PLATFORM_FAT;
     private long externalAttributes = 0;
     private LinkedHashMap/*<ZipShort, ZipExtraField>*/ extraFields = null;
-    private UnparseableExtraFieldData unparseableExtra = null;
     private String name = null;
 
     /**
@@ -94,9 +75,7 @@ public class ZipArchiveEntry extends java.util.zip.ZipEntry
         setName(entry.getName());
         byte[] extra = entry.getExtra();
         if (extra != null) {
-            setExtraFields(ExtraFieldUtils.parse(extra, true,
-                                                 ExtraFieldUtils
-                                                 .UnparseableExtraField.READ));
+            setExtraFields(ExtraFieldUtils.parse(extra));
         } else {
             // initializes extra data to an empty byte array
             setExtra();
@@ -113,7 +92,7 @@ public class ZipArchiveEntry extends java.util.zip.ZipEntry
         this((java.util.zip.ZipEntry) entry);
         setInternalAttributes(entry.getInternalAttributes());
         setExternalAttributes(entry.getExternalAttributes());
-        setExtraFields(entry.getExtraFields(true));
+        setExtraFields(entry.getExtraFields());
     }
 
     /**
@@ -139,9 +118,10 @@ public class ZipArchiveEntry extends java.util.zip.ZipEntry
     public Object clone() {
         ZipArchiveEntry e = (ZipArchiveEntry) super.clone();
 
+        e.extraFields = extraFields != null ? (LinkedHashMap) extraFields.clone() : null;
         e.setInternalAttributes(getInternalAttributes());
         e.setExternalAttributes(getExternalAttributes());
-        e.setExtraFields(getExtraFields(true));
+        e.setExtraFields(getExtraFields());
         return e;
     }
 
@@ -266,45 +246,25 @@ public class ZipArchiveEntry extends java.util.zip.ZipEntry
     public void setExtraFields(ZipExtraField[] fields) {
         extraFields = new LinkedHashMap();
         for (int i = 0; i < fields.length; i++) {
-            if (fields[i] instanceof UnparseableExtraFieldData) {
-                unparseableExtra = (UnparseableExtraFieldData) fields[i];
-            } else {
             extraFields.put(fields[i].getHeaderId(), fields[i]);
-            }
         }
         setExtra();
     }
 
     /**
-     * Retrieves all extra fields that have been parsed successfully.
-     * @return an array of the extra fields
-     */
-    public ZipExtraField[] getExtraFields() {
-        return getExtraFields(false);
-    }
-
-    /**
      * Retrieves extra fields.
-     * @param includeUnparseable whether to also return unparseable
-     * extra fields as {@link UnparseableExtraFieldData} if such data
-     * exists.
      * @return an array of the extra fields
      */
-    public ZipExtraField[] getExtraFields(boolean includeUnparseable) {
+    public ZipExtraField[] getExtraFields() {
         if (extraFields == null) {
-            return !includeUnparseable || unparseableExtra == null
-                ? new ZipExtraField[0]
-                : new ZipExtraField[] { unparseableExtra };
+            return new ZipExtraField[0];
         }
-        List result = new ArrayList(extraFields.values());
-        if (includeUnparseable && unparseableExtra != null) {
-            result.add(unparseableExtra);
-        }
-        return (ZipExtraField[]) result.toArray(new ZipExtraField[0]);
+        ZipExtraField[] result = new ZipExtraField[extraFields.size()];
+        return (ZipExtraField[]) extraFields.values().toArray(result);
     }
 
     /**
-     * Adds an extra field - replacing an already present extra field
+     * Adds an extra fields - replacing an already present extra field
      * of the same type.
      *
      * <p>If no extra field of the same type exists, the field will be
@@ -312,28 +272,21 @@ public class ZipArchiveEntry extends java.util.zip.ZipEntry
      * @param ze an extra field
      */
     public void addExtraField(ZipExtraField ze) {
-        if (ze instanceof UnparseableExtraFieldData) {
-            unparseableExtra = (UnparseableExtraFieldData) ze;
-        } else {
         if (extraFields == null) {
             extraFields = new LinkedHashMap();
         }
         extraFields.put(ze.getHeaderId(), ze);
-        }
         setExtra();
     }
 
     /**
-     * Adds an extra field - replacing an already present extra field
+     * Adds an extra fields - replacing an already present extra field
      * of the same type.
      *
      * <p>The new extra field will be the first one.</p>
      * @param ze an extra field
      */
     public void addAsFirstExtraField(ZipExtraField ze) {
-        if (ze instanceof UnparseableExtraFieldData) {
-            unparseableExtra = (UnparseableExtraFieldData) ze;
-        } else {
         LinkedHashMap copy = extraFields;
         extraFields = new LinkedHashMap();
         extraFields.put(ze.getHeaderId(), ze);
@@ -341,12 +294,11 @@ public class ZipArchiveEntry extends java.util.zip.ZipEntry
             copy.remove(ze.getHeaderId());
             extraFields.putAll(copy);
         }
-        }
         setExtra();
     }
 
     /**
-     * Remove an extra field.
+     * Remove an extra fields.
      * @param type the type of extra field to remove
      */
     public void removeExtraField(ZipShort type) {
@@ -360,17 +312,6 @@ public class ZipArchiveEntry extends java.util.zip.ZipEntry
     }
 
     /**
-     * Removes unparseable extra field data.
-     */
-    public void removeUnparseableExtraFieldData() {
-        if (unparseableExtra == null) {
-            throw new java.util.NoSuchElementException();
-        }
-        unparseableExtra = null;
-        setExtra();
-    }
-
-    /**
      * Looks up an extra field by its header id.
      *
      * @return null if no such field exists.
@@ -383,30 +324,16 @@ public class ZipArchiveEntry extends java.util.zip.ZipEntry
     }
 
     /**
-     * Looks up extra field data that couldn't be parsed correctly.
-     *
-     * @return null if no such field exists.
-     */
-    public UnparseableExtraFieldData getUnparseableExtraFieldData() {
-        return unparseableExtra;
-    }
-
-    /**
-     * Parses the given bytes as extra field data and consumes any
-     * unparseable data as an {@link UnparseableExtraFieldData}
-     * instance.
+     * Throws an Exception if extra data cannot be parsed into extra fields.
      * @param extra an array of bytes to be parsed into extra fields
      * @throws RuntimeException if the bytes cannot be parsed
      * @throws RuntimeException on error
      */
     public void setExtra(byte[] extra) throws RuntimeException {
         try {
-            ZipExtraField[] local =
-                ExtraFieldUtils.parse(extra, true,
-                                      ExtraFieldUtils.UnparseableExtraField.READ);
+            ZipExtraField[] local = ExtraFieldUtils.parse(extra, true);
             mergeExtraFields(local, true);
         } catch (ZipException e) {
-            // actually this is not be possible as of Commons Compress 1.1
             throw new RuntimeException("Error parsing extra fields for entry: "
                                        + getName() + " - " + e.getMessage(), e);
         }
@@ -419,7 +346,7 @@ public class ZipArchiveEntry extends java.util.zip.ZipEntry
      * modify super's data directly.
      */
     protected void setExtra() {
-        super.setExtra(ExtraFieldUtils.mergeLocalFileDataData(getExtraFields(true)));
+        super.setExtra(ExtraFieldUtils.mergeLocalFileDataData(getExtraFields()));
     }
 
     /**
@@ -427,9 +354,7 @@ public class ZipArchiveEntry extends java.util.zip.ZipEntry
      */
     public void setCentralDirectoryExtra(byte[] b) {
         try {
-            ZipExtraField[] central =
-                ExtraFieldUtils.parse(b, false,
-                                      ExtraFieldUtils.UnparseableExtraField.READ);
+            ZipExtraField[] central = ExtraFieldUtils.parse(b, false);
             mergeExtraFields(central, false);
         } catch (ZipException e) {
             throw new RuntimeException(e.getMessage(), e);
@@ -450,7 +375,7 @@ public class ZipArchiveEntry extends java.util.zip.ZipEntry
      * @return the central directory extra data
      */
     public byte[] getCentralDirectoryExtra() {
-        return ExtraFieldUtils.mergeCentralDirectoryData(getExtraFields(true));
+        return ExtraFieldUtils.mergeCentralDirectoryData(getExtraFields());
     }
 
     /**
@@ -504,12 +429,7 @@ public class ZipArchiveEntry extends java.util.zip.ZipEntry
             setExtraFields(f);
         } else {
             for (int i = 0; i < f.length; i++) {
-                ZipExtraField existing;
-                if (f[i] instanceof UnparseableExtraFieldData) {
-                    existing = unparseableExtra;
-                } else {
-                    existing = getExtraField(f[i].getHeaderId());
-                }
+                ZipExtraField existing = getExtraField(f[i].getHeaderId());
                 if (existing == null) {
                     addExtraField(f[i]);
                 } else {
