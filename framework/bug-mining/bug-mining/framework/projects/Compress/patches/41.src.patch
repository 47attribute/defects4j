diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java b/src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java
index d2d1a888..34c20ef0 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java
@@ -21,9 +21,8 @@ package org.apache.commons.compress.archivers.zip;
  * Parser/encoder for the "general purpose bit" field in ZIP's local
  * file and central directory headers.
  * @since Apache Commons Compress 1.1
- * @NotThreadSafe
  */
-public final class GeneralPurposeBit {
+public class GeneralPurposeBit {
     /**
      * Indicates that the file is encrypted.
      */
@@ -148,22 +147,4 @@ public final class GeneralPurposeBit {
         b.useEncryption((generalPurposeFlag & ENCRYPTION_FLAG) != 0);
         return b;
     }
-
-    public int hashCode() {
-        return 3 * (7 * (13 * (17 * (encryptionFlag ? 1 : 0)
-                               + (strongEncryptionFlag ? 1 : 0))
-                         + (languageEncodingFlag ? 1 : 0))
-                    + (dataDescriptorFlag ? 1 : 0));
-    }
-
-    public boolean equals(Object o) {
-        if (!(o instanceof GeneralPurposeBit)) {
-            return false;
-        }
-        GeneralPurposeBit g = (GeneralPurposeBit) o;
-        return g.encryptionFlag == encryptionFlag
-            && g.strongEncryptionFlag == strongEncryptionFlag
-            && g.languageEncodingFlag == languageEncodingFlag
-            && g.dataDescriptorFlag == dataDescriptorFlag;
-    }
 }
diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.java b/src/main/java/org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.java
index 86175e25..3dc1ea7d 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.java
@@ -70,10 +70,6 @@ public class UnsupportedZipFeatureException extends ZipException {
          * The entry used an unsupported compression method.
          */
         public static Feature METHOD = new Feature("compression method");
-        /**
-         * The entry uses a data descriptor.
-         */
-        public static Feature DATA_DESCRIPTOR = new Feature("data descriptor");
         
         private final String name;
 
diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java
index acc0a087..a5550f0b 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java
@@ -74,7 +74,8 @@ public class ZipArchiveEntry extends java.util.zip.ZipEntry
     private LinkedHashMap/*<ZipShort, ZipExtraField>*/ extraFields = null;
     private UnparseableExtraFieldData unparseableExtra = null;
     private String name = null;
-    private GeneralPurposeBit gpb = new GeneralPurposeBit();
+    private boolean encrypted;
+    private boolean stronglyEncrypted;
 
     /**
      * Creates a new zip entry with the specified name.
@@ -478,19 +479,38 @@ public class ZipArchiveEntry extends java.util.zip.ZipEntry
     }
 
     /**
-     * The "general purpose bit" field.
+     * Whether the entry is encrypted.
      * @since Apache Commons Compress 1.1
      */
-    public GeneralPurposeBit getGeneralPurposeBit() {
-        return gpb;
+    public boolean isEncrypted() {
+        return encrypted;
     }
 
     /**
-     * The "general purpose bit" field.
+     * Whether the entry is encrypted using strong encryption.
      * @since Apache Commons Compress 1.1
      */
-    public void setGeneralPurposeBit(GeneralPurposeBit b) {
-        gpb = b;
+    public boolean isStronglyEncrypted() {
+        return stronglyEncrypted && encrypted;
+    }
+
+    /**
+     * Whether the entry is encrypted.
+     * @since Apache Commons Compress 1.1
+     */
+    public void setEncrypted(boolean b) {
+        encrypted = b;
+    }
+
+    /**
+     * Whether the entry is encrypted using strong encryption.
+     * @since Apache Commons Compress 1.1
+     */
+    public void setStronglyEncrypted(boolean b) {
+        stronglyEncrypted = b;
+        if (b) {
+            setEncrypted(true);
+        }
     }
 
     /**
@@ -574,7 +594,6 @@ public class ZipArchiveEntry extends java.util.zip.ZipEntry
             && Arrays.equals(getCentralDirectoryExtra(),
                              other.getCentralDirectoryExtra())
             && Arrays.equals(getLocalFileDataExtra(),
-                             other.getLocalFileDataExtra())
-            && gpb.equals(other.gpb);
+                             other.getLocalFileDataExtra());
     }
 }
diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
index a41deb5e..3a8ff14c 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java
@@ -139,7 +139,8 @@ public class ZipArchiveInputStream extends ArchiveInputStream {
         final ZipEncoding entryEncoding =
             hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;
         hasDataDescriptor = gpFlag.usesDataDescriptor();
-        current.setGeneralPurposeBit(gpFlag);
+        current.setEncrypted(gpFlag.usesEncryption());
+        current.setStronglyEncrypted(gpFlag.usesStrongEncryption());
 
         off += SHORT;
 
diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
index 3f0eafa6..4085e41e 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java
@@ -368,7 +368,8 @@ public class ZipFile {
             final boolean hasUTF8Flag = gpFlag.usesUTF8ForNames();
             final ZipEncoding entryEncoding =
                 hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;
-            ze.setGeneralPurposeBit(gpFlag);
+            ze.setEncrypted(gpFlag.usesEncryption());
+            ze.setStronglyEncrypted(gpFlag.usesStrongEncryption());
 
             off += SHORT;
 
diff --git a/src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java b/src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java
index 1997cc53..c6091b11 100644
--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java
+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java
@@ -184,8 +184,7 @@ public abstract class ZipUtil {
      * Whether this library is able to read or write the given entry.
      */
     static boolean canHandleEntryData(ZipArchiveEntry entry) {
-        return supportsEncryptionOf(entry) && supportsMethodOf(entry)
-            && supportsDataDescriptorFor(entry);
+        return supportsEncryptionOf(entry) && supportsMethodOf(entry);
     }
 
     /**
@@ -195,7 +194,7 @@ public abstract class ZipUtil {
      * @return true if the entry isn't encrypted at all
      */
     private static boolean supportsEncryptionOf(ZipArchiveEntry entry) {
-        return !entry.getGeneralPurposeBit().usesEncryption();
+        return !entry.isEncrypted();
     }
 
     /**
@@ -210,17 +209,6 @@ public abstract class ZipUtil {
     }
 
     /**
-     * Whether this entry requires a data descriptor this library can work with.
-     *
-     * @return true if the entry doesn't require any data descriptor
-     * or the method is DEFLATED).
-     */
-    private static boolean supportsDataDescriptorFor(ZipArchiveEntry entry) {
-        return !entry.getGeneralPurposeBit().usesDataDescriptor()
-            || entry.getMethod() == ZipArchiveEntry.DEFLATED;
-    }
-
-    /**
      * Checks whether the entry requires features not (yet) supported
      * by the library and throws an exception if it does.
      */
@@ -236,10 +224,5 @@ public abstract class ZipUtil {
                 new UnsupportedZipFeatureException(UnsupportedZipFeatureException
                                                    .Feature.METHOD, ze);
         }
-        if (!supportsDataDescriptorFor(ze)) {
-            throw
-                new UnsupportedZipFeatureException(UnsupportedZipFeatureException
-                                                   .Feature.DATA_DESCRIPTOR, ze);
-        }
     }
 }
\ No newline at end of file
