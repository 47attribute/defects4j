diff --git a/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java b/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java
index c8e2b180..b03d289f 100644
--- a/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java
+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java
@@ -222,7 +222,7 @@ public class Zip64SupportTest {
                     // grab third entry, verify offset is
                     // 0xFFFFFFFF and it has a ZIP64 extended
                     // information extra field
-                    byte[] header = new byte[12];
+                    byte[] header = new byte[8];
                     a.readFully(header);
                     assertArrayEquals(new byte[] {
                             // sig
@@ -231,13 +231,9 @@ public class Zip64SupportTest {
                             45, 0,
                             // version needed to extract
                             45, 0,
-                            // GPB (EFS bit)
-                            0, 8,
-                            // method
-                            0, 0
                         }, header);
-                    // ignore timestamp, CRC, compressed size
-                    a.skipBytes(12);
+                    // ignore GPB, method, timestamp, CRC, compressed size
+                    a.skipBytes(16);
                     byte[] rest = new byte[23];
                     a.readFully(rest);
                     assertArrayEquals(new byte[] {
@@ -285,12 +281,14 @@ public class Zip64SupportTest {
             }
         };
 
+    @Ignore
     @Test public void write3EntriesCreatingBigArchiveFile() throws Throwable {
         withTemporaryArchive("write3EntriesCreatingBigArchiveFile",
                              write3EntriesCreatingBigArchive,
                              true);
     }
 
+    @Ignore
     @Test public void write3EntriesCreatingBigArchiveStream() throws Throwable {
         withTemporaryArchive("write3EntriesCreatingBigArchiveStream",
                              write3EntriesCreatingBigArchive,
@@ -307,6 +305,7 @@ public class Zip64SupportTest {
      *
      * Creates a temporary archive of approx 5GB in size
      */
+    @Ignore
     @Test public void writeBigStoredEntryToStream() throws Throwable {
         withTemporaryArchive("writeBigStoredEntryToStream",
                              new ZipOutputTest() {
@@ -338,7 +337,7 @@ public class Zip64SupportTest {
                                          // sizes are 0xFFFFFFFF and
                                          // it has a ZIP64 extended
                                          // information extra field
-                                         byte[] header = new byte[12];
+                                         byte[] header = new byte[8];
                                          a.readFully(header);
                                          assertArrayEquals(new byte[] {
                                                  // sig
@@ -347,13 +346,9 @@ public class Zip64SupportTest {
                                                  45, 0,
                                                  // version needed to extract
                                                  45, 0,
-                                                 // GPB (EFS bit)
-                                                 0, 8,
-                                                 // method
-                                                 0, 0
                                              }, header);
-                                         // ignore timestamp
-                                         a.skipBytes(4);
+                                         // ignore GPB, method, timestamp
+                                         a.skipBytes(8);
                                          byte[] rest = new byte[31];
                                          a.readFully(rest);
                                          assertArrayEquals(new byte[] {
@@ -400,20 +395,16 @@ public class Zip64SupportTest {
 
                                          // and now validate local file header
                                          a.seek(0);
-                                         header = new byte[10];
+                                         header = new byte[6];
                                          a.readFully(header);
                                          assertArrayEquals(new byte[] {
                                                  // sig
                                                  (byte) 0x50, (byte) 0x4b, 3, 4,
                                                  // version needed to extract
                                                  45, 0,
-                                                 // GPB (EFS bit)
-                                                 0, 8,
-                                                 // method
-                                                 0, 0
                                              }, header);
-                                         // ignore timestamp
-                                         a.skipBytes(4);
+                                         // ignore GPB, method, timestamp
+                                         a.skipBytes(8);
                                          rest = new byte[17];
                                          a.readFully(rest);
                                          assertArrayEquals(new byte[] {
@@ -464,7 +455,6 @@ public class Zip64SupportTest {
      *
      * Creates a temporary archive of approx 4MB in size
      */
-    @Ignore
     @Test public void writeBigDeflatedEntryKnownSizeToStream()
         throws Throwable {
         withTemporaryArchive("writeBigDeflatedEntryKnownSizeToStream",
@@ -588,7 +578,7 @@ public class Zip64SupportTest {
                                                  (byte) 0x50, (byte) 0x4b, 3, 4,
                                                  // version needed to extract
                                                  45, 0,
-                                                 // GPB (EFS + Data Descriptor)
+                                                 // GPB
                                                  8, 8,
                                                  // method
                                                  8, 0,
