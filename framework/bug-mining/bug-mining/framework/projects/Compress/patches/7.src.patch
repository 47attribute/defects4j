diff --git a/src/main/java/org/apache/commons/compress/changes/ChangeSet.java b/src/main/java/org/apache/commons/compress/changes/ChangeSet.java
index 36c4794b..8d9b01af 100644
--- a/src/main/java/org/apache/commons/compress/changes/ChangeSet.java
+++ b/src/main/java/org/apache/commons/compress/changes/ChangeSet.java
@@ -18,12 +18,16 @@
  */
 package org.apache.commons.compress.changes;
 
+import java.io.IOException;
 import java.io.InputStream;
 import java.util.Iterator;
 import java.util.LinkedHashSet;
 import java.util.Set;
 
 import org.apache.commons.compress.archivers.ArchiveEntry;
+import org.apache.commons.compress.archivers.ArchiveInputStream;
+import org.apache.commons.compress.archivers.ArchiveOutputStream;
+import org.apache.commons.compress.utils.IOUtils;
 
 /**
  * ChangeSet collects and performs changes to an archive.
@@ -38,8 +42,8 @@ public final class ChangeSet {
 
     /**
      * Deletes the file with the filename from the archive. 
+     * This method is not thread safe.
      * 
-     * @NotThreadSafe
      * @param pFilename
      *            the filename of the file to delete
      */
@@ -60,9 +64,61 @@ public final class ChangeSet {
     }
 
     /**
-     * Adds an delete change.
+     * Performs all changes collected in this ChangeSet on the input stream and
+     * streams the result to the output stream. Since this method works on a copy
+     * of the actual ChangSet, perform may be called more than once.
+     * 
+     * @param in
+     *            the InputStream to perform the changes on
+     * @param out
+     *            the resulting OutputStream with all modifications
+     * @throws IOException
+     *             if an read/write error occurs
+     */
+    public void perform(ArchiveInputStream in, ArchiveOutputStream out)
+            throws IOException {
+        Set workingSet = new LinkedHashSet(changes);
+        for (Iterator it = workingSet.iterator(); it.hasNext();) {
+            Change change = (Change) it.next();
+
+            if (change.type() == Change.TYPE_ADD) {
+                copyStream(change.getInput(), out, change.getEntry());
+                it.remove();
+            }
+        }
+
+        ArchiveEntry entry = null;
+        while ((entry = in.getNextEntry()) != null) {
+            boolean copy = true;
+
+            for (Iterator it = workingSet.iterator(); it.hasNext();) {
+                Change change = (Change) it.next();
+
+                if (change.type() == Change.TYPE_DELETE
+                        && entry.getName() != null) {
+                    if (entry.getName().equals(change.targetFile())) {
+                        copy = false;
+                        it.remove();
+                        break;
+                    } else if (entry.getName().matches(
+                            change.targetFile() + "/.*")) {
+                        copy = false;
+                        break;
+                    }
+                }
+            }
+
+            if (copy) {
+                if (!isDeletedLater(workingSet, entry)) {
+                    copyStream(in, out, entry);
+                }
+            }
+        }
+    }
+
+    /**
+     * Adds an delete change. This method is not thread safe.
      * 
-     * @NotThreadSafe
      * @param pChange
      *            the change which should result in a deletion
      */
@@ -92,11 +148,50 @@ public final class ChangeSet {
     }
 
     /**
-     * Returns the list of changes as a copy. Changes on this set
-     * are not reflected on this ChangeSet and vice versa.
-     * @return the changes as a copy
+     * Checks if an ArchiveEntry is deleted later in the ChangeSet. This is
+     * necessary if an file is added with this ChangeSet, but later became
+     * deleted in the same set.
+     * 
+     * @param entry
+     *            the entry to check
+     * @return true, if this entry has an deletion change later, false otherwise
+     */
+    private boolean isDeletedLater(Set workingSet, ArchiveEntry entry) {
+        String source = entry.getName();
+
+        if (!workingSet.isEmpty()) {
+            for (Iterator it = workingSet.iterator(); it.hasNext();) {
+                Change change = (Change) it.next();
+                if (change.type() == Change.TYPE_DELETE) {
+                    String target = change.targetFile();
+
+                    if (source.equals(target)) {
+                        return true;
+                    }
+
+                    return source.matches(target + "/.*");
+                }
+            }
+        }
+        return false;
+    }
+
+    /**
+     * Copies the ArchiveEntry to the Output stream
+     * 
+     * @param in
+     *            the stream to read the data from
+     * @param out
+     *            the stream to write the data to
+     * @param entry
+     *            the entry to write
+     * @throws IOException
+     *             if data cannot be read or written
      */
-    Set getChanges() {
-        return new LinkedHashSet(changes);
+    private static void copyStream(InputStream in, ArchiveOutputStream out,
+            ArchiveEntry entry) throws IOException {
+        out.putArchiveEntry(entry);
+        IOUtils.copy(in, out);
+        out.closeArchiveEntry();
     }
 }
diff --git a/src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java b/src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java
deleted file mode 100644
index 014a2aa6..00000000
--- a/src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java
+++ /dev/null
@@ -1,152 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
- */
-package org.apache.commons.compress.changes;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.Iterator;
-import java.util.LinkedHashSet;
-import java.util.Set;
-
-import org.apache.commons.compress.archivers.ArchiveEntry;
-import org.apache.commons.compress.archivers.ArchiveInputStream;
-import org.apache.commons.compress.archivers.ArchiveOutputStream;
-import org.apache.commons.compress.utils.IOUtils;
-
-/**
- * Performs ChangeSet operations on a stream.
- * This class is thread safe and can be used multiple times.
- * It operates on a copy of the ChangeSet. If the ChangeSet changes,
- * a new Performer must be created.
- * 
- * @Threadsafe
- * @Immutable
- */
-public class ChangeSetPerformer {
-    private Set changes = null;
-    
-    /**
-     * Constructs a ChangeSetPerformer with the changes from this ChangeSet
-     * @param changeSet the ChangeSet which operations are used for performing
-     */
-    public ChangeSetPerformer(final ChangeSet changeSet) {
-        changes = changeSet.getChanges();
-    }
-    
-    /**
-     * Performs all changes collected in this ChangeSet on the input stream and
-     * streams the result to the output stream. Perform may be called more than once.
-     * 
-     * @param in
-     *            the InputStream to perform the changes on
-     * @param out
-     *            the resulting OutputStream with all modifications
-     * @throws IOException
-     *             if an read/write error occurs
-     */
-    public void perform(ArchiveInputStream in, ArchiveOutputStream out)
-            throws IOException {
-        Set workingSet = new LinkedHashSet(changes);
-        
-        for (Iterator it = workingSet.iterator(); it.hasNext();) {
-            Change change = (Change) it.next();
-
-            if (change.type() == Change.TYPE_ADD) {
-                copyStream(change.getInput(), out, change.getEntry());
-                it.remove();
-            }
-        }
-
-        ArchiveEntry entry = null;
-        while ((entry = in.getNextEntry()) != null) {
-            boolean copy = true;
-
-            for (Iterator it = workingSet.iterator(); it.hasNext();) {
-                Change change = (Change) it.next();
-
-                if (change.type() == Change.TYPE_DELETE
-                        && entry.getName() != null) {
-                    if (entry.getName().equals(change.targetFile())) {
-                        copy = false;
-                        it.remove();
-                        break;
-                    } else if (entry.getName().matches(
-                            change.targetFile() + "/.*")) {
-                        copy = false;
-                        break;
-                    }
-                }
-            }
-
-            if (copy) {
-                if (!isDeletedLater(workingSet, entry)) {
-                    copyStream(in, out, entry);
-                }
-            }
-        }
-    }
-
-    /**
-     * Checks if an ArchiveEntry is deleted later in the ChangeSet. This is
-     * necessary if an file is added with this ChangeSet, but later became
-     * deleted in the same set.
-     * 
-     * @param entry
-     *            the entry to check
-     * @return true, if this entry has an deletion change later, false otherwise
-     */
-    private boolean isDeletedLater(Set workingSet, ArchiveEntry entry) {
-        String source = entry.getName();
-
-        if (!workingSet.isEmpty()) {
-            for (Iterator it = workingSet.iterator(); it.hasNext();) {
-                Change change = (Change) it.next();
-                if (change.type() == Change.TYPE_DELETE) {
-                    String target = change.targetFile();
-
-                    if (source.equals(target)) {
-                        return true;
-                    }
-
-                    return source.matches(target + "/.*");
-                }
-            }
-        }
-        return false;
-    }
-
-    /**
-     * Copies the ArchiveEntry to the Output stream
-     * 
-     * @param in
-     *            the stream to read the data from
-     * @param out
-     *            the stream to write the data to
-     * @param entry
-     *            the entry to write
-     * @throws IOException
-     *             if data cannot be read or written
-     */
-    private void copyStream(InputStream in, ArchiveOutputStream out,
-            ArchiveEntry entry) throws IOException {
-        out.putArchiveEntry(entry);
-        IOUtils.copy(in, out);
-        out.closeArchiveEntry();
-    }
-}
