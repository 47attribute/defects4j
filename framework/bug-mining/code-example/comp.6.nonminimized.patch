diff --git a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java
index 76e2866..d0cc5eb 100644
--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java
+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java
@@ -59,18 +59,6 @@ public class ArArchiveInputStream extends ArchiveInputStream {
      *             if the entry could not be read
      */
     public ArArchiveEntry getNextArEntry() throws IOException {
-        if (currentEntry != null) {
-            final long entryEnd = entryOffset + currentEntry.getLength();
-            while (offset < entryEnd) {
-                int x = read();
-                if (x == -1) {
-                    // hit EOF before previous entry was complete
-                    // TODO: throw an exception instead?
-                    return null;
-                }
-            }
-            currentEntry = null;
-        }
 
         if (offset == 0) {
             final byte[] expected = ArArchiveEntry.HEADER.getBytes();
@@ -125,7 +113,6 @@ public class ArArchiveInputStream extends ArchiveInputStream {
             }
         }
 
-        entryOffset = offset;
         currentEntry = new ArArchiveEntry(new String(name).trim(),
                                           Long.parseLong(new String(length)
                                                          .trim()));
@@ -146,9 +133,9 @@ public class ArArchiveInputStream extends ArchiveInputStream {
     }
 
     public int read() throws IOException {
-        byte[] single = new byte[1];
-        int num = read(single, 0, 1);
-        return num == -1 ? -1 : single[0] & 0xff;
+        final int ret = input.read();
+        offset += (ret > 0 ? 1 : 0);
+        return ret;
     }
 
     public int read(byte[] b) throws IOException {
@@ -156,15 +143,7 @@ public class ArArchiveInputStream extends ArchiveInputStream {
     }
 
     public int read(byte[] b, final int off, final int len) throws IOException {
-        int toRead = len;
-        if (currentEntry != null) {
-            final long entryEnd = entryOffset + currentEntry.getLength();
-            if (len > 0 && entryEnd > offset) {
-                toRead = (int) Math.min(len, entryEnd - offset);
-            } else {
-                return -1;
-            }
-        }
+        int toRead = len;    
         final int ret = this.input.read(b, off, toRead);
         offset += (ret > 0 ? ret : 0);
         return ret;
