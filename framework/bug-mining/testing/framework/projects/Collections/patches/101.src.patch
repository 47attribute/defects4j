diff --git a/src/main/java/org/apache/commons/collections4/bag/CompliantBag.java b/src/main/java/org/apache/commons/collections4/bag/CompliantBag.java
index e7955000..561f4e4b 100644
--- a/src/main/java/org/apache/commons/collections4/bag/CompliantBag.java
+++ b/src/main/java/org/apache/commons/collections4/bag/CompliantBag.java
@@ -69,7 +69,7 @@ public final class CompliantBag<E>
      */
     private void writeObject(final ObjectOutputStream out) throws IOException {
         out.defaultWriteObject();
-        out.writeObject(decorated());
+        out.writeObject(collection);
     }
 
     /**
@@ -83,7 +83,7 @@ public final class CompliantBag<E>
     @SuppressWarnings("unchecked") // will throw CCE, see Javadoc
     private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {
         in.defaultReadObject();
-        setCollection((Collection<E>) in.readObject());
+        collection = (Collection<E>) in.readObject();
     }
 
     //-----------------------------------------------------------------------
diff --git a/src/main/java/org/apache/commons/collections4/bag/TransformedBag.java b/src/main/java/org/apache/commons/collections4/bag/TransformedBag.java
index 52a01cff..c75ddc5f 100644
--- a/src/main/java/org/apache/commons/collections4/bag/TransformedBag.java
+++ b/src/main/java/org/apache/commons/collections4/bag/TransformedBag.java
@@ -107,7 +107,7 @@ public class TransformedBag<E> extends TransformedCollection<E> implements Bag<E
      * @return the decorated bag
      */
     protected Bag<E> getBag() {
-        return (Bag<E>) decorated();
+        return (Bag<E>) collection;
     }
 
     //-----------------------------------------------------------------------
diff --git a/src/main/java/org/apache/commons/collections4/bag/TransformedSortedBag.java b/src/main/java/org/apache/commons/collections4/bag/TransformedSortedBag.java
index 1ec6f35e..962ce31a 100644
--- a/src/main/java/org/apache/commons/collections4/bag/TransformedSortedBag.java
+++ b/src/main/java/org/apache/commons/collections4/bag/TransformedSortedBag.java
@@ -108,7 +108,7 @@ public class TransformedSortedBag<E> extends TransformedBag<E> implements Sorted
      * @return the decorated bag
      */
     protected SortedBag<E> getSortedBag() {
-        return (SortedBag<E>) decorated();
+        return (SortedBag<E>) collection;
     }
 
     //-----------------------------------------------------------------------
diff --git a/src/main/java/org/apache/commons/collections4/bag/UnmodifiableBag.java b/src/main/java/org/apache/commons/collections4/bag/UnmodifiableBag.java
index f5b56240..0177141d 100644
--- a/src/main/java/org/apache/commons/collections4/bag/UnmodifiableBag.java
+++ b/src/main/java/org/apache/commons/collections4/bag/UnmodifiableBag.java
@@ -83,7 +83,7 @@ public final class UnmodifiableBag<E>
      */
     private void writeObject(final ObjectOutputStream out) throws IOException {
         out.defaultWriteObject();
-        out.writeObject(decorated());
+        out.writeObject(collection);
     }
 
     /**
@@ -97,7 +97,7 @@ public final class UnmodifiableBag<E>
     @SuppressWarnings("unchecked") // will throw CCE, see Javadoc
     private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {
         in.defaultReadObject();
-        setCollection((Collection<E>) in.readObject());
+        collection = (Collection<E>) in.readObject();
     }
 
     //-----------------------------------------------------------------------
diff --git a/src/main/java/org/apache/commons/collections4/bag/UnmodifiableSortedBag.java b/src/main/java/org/apache/commons/collections4/bag/UnmodifiableSortedBag.java
index 52d71953..99ca360c 100644
--- a/src/main/java/org/apache/commons/collections4/bag/UnmodifiableSortedBag.java
+++ b/src/main/java/org/apache/commons/collections4/bag/UnmodifiableSortedBag.java
@@ -83,7 +83,7 @@ public final class UnmodifiableSortedBag<E>
      */
     private void writeObject(final ObjectOutputStream out) throws IOException {
         out.defaultWriteObject();
-        out.writeObject(decorated());
+        out.writeObject(collection);
     }
 
     /**
@@ -97,7 +97,7 @@ public final class UnmodifiableSortedBag<E>
     @SuppressWarnings("unchecked") // will throw CCE, see Javadoc
     private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {
         in.defaultReadObject();
-        setCollection((Collection<E>) in.readObject());
+        collection = (Collection<E>) in.readObject();
     }
 
     //-----------------------------------------------------------------------
diff --git a/src/main/java/org/apache/commons/collections4/collection/AbstractCollectionDecorator.java b/src/main/java/org/apache/commons/collections4/collection/AbstractCollectionDecorator.java
index de1d484c..e2f0c14a 100644
--- a/src/main/java/org/apache/commons/collections4/collection/AbstractCollectionDecorator.java
+++ b/src/main/java/org/apache/commons/collections4/collection/AbstractCollectionDecorator.java
@@ -46,7 +46,7 @@ public abstract class AbstractCollectionDecorator<E>
     private static final long serialVersionUID = 6249888059822088500L;
 
     /** The collection being decorated */
-    private Collection<E> collection;
+    protected Collection<E> collection;
 
     /**
      * Constructor only used in deserialization, do not use otherwise.
@@ -79,17 +79,6 @@ public abstract class AbstractCollectionDecorator<E>
         return collection;
     }
 
-    /**
-     * Sets the collection being decorated.
-     * <p>
-     * <b>NOTE:</b> this method should only be used during deserialization
-     *
-     * @param coll  the decorated collection
-     */
-    protected void setCollection(final Collection<E> coll) {
-        this.collection = coll;
-    }
-
     //-----------------------------------------------------------------------
 
     public boolean add(final E object) {
diff --git a/src/main/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollection.java b/src/main/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollection.java
index 48dfac1b..fcdc0462 100644
--- a/src/main/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollection.java
+++ b/src/main/java/org/apache/commons/collections4/collection/UnmodifiableBoundedCollection.java
@@ -82,7 +82,7 @@ public final class UnmodifiableBoundedCollection<E> extends AbstractCollectionDe
                 break;  // normal loop exit
             }
             if (coll instanceof AbstractCollectionDecorator) {
-                coll = ((AbstractCollectionDecorator<E>) coll).decorated();
+                coll = ((AbstractCollectionDecorator<E>) coll).collection;
             } else if (coll instanceof SynchronizedCollection) {
                 coll = ((SynchronizedCollection<E>) coll).decorated();
             }
diff --git a/src/main/java/org/apache/commons/collections4/list/AbstractSerializableListDecorator.java b/src/main/java/org/apache/commons/collections4/list/AbstractSerializableListDecorator.java
index a71f7293..6391dc90 100644
--- a/src/main/java/org/apache/commons/collections4/list/AbstractSerializableListDecorator.java
+++ b/src/main/java/org/apache/commons/collections4/list/AbstractSerializableListDecorator.java
@@ -55,7 +55,7 @@ public abstract class AbstractSerializableListDecorator<E>
      */
     private void writeObject(final ObjectOutputStream out) throws IOException {
         out.defaultWriteObject();
-        out.writeObject(decorated());
+        out.writeObject(collection);
     }
 
     /**
@@ -68,7 +68,7 @@ public abstract class AbstractSerializableListDecorator<E>
     @SuppressWarnings("unchecked")
     private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {
         in.defaultReadObject();
-        setCollection((Collection<E>) in.readObject());
+        collection = (Collection<E>) in.readObject();
     }
 
 }
diff --git a/src/main/java/org/apache/commons/collections4/list/TransformedList.java b/src/main/java/org/apache/commons/collections4/list/TransformedList.java
index adf19d8f..45dd699e 100644
--- a/src/main/java/org/apache/commons/collections4/list/TransformedList.java
+++ b/src/main/java/org/apache/commons/collections4/list/TransformedList.java
@@ -111,7 +111,7 @@ public class TransformedList<E> extends TransformedCollection<E> implements List
      * @return the decorated list
      */
     protected List<E> getList() {
-        return (List<E>) decorated();
+        return (List<E>) collection;
     }
 
     //-----------------------------------------------------------------------
diff --git a/src/main/java/org/apache/commons/collections4/map/AbstractInputCheckedMapDecorator.java b/src/main/java/org/apache/commons/collections4/map/AbstractInputCheckedMapDecorator.java
index bd9f0517..733d5f68 100644
--- a/src/main/java/org/apache/commons/collections4/map/AbstractInputCheckedMapDecorator.java
+++ b/src/main/java/org/apache/commons/collections4/map/AbstractInputCheckedMapDecorator.java
@@ -121,13 +121,13 @@ abstract class AbstractInputCheckedMapDecorator<K, V>
 
         @Override
         public Iterator<Map.Entry<K, V>> iterator() {
-            return new EntrySetIterator(this.decorated().iterator(), parent);
+            return new EntrySetIterator(collection.iterator(), parent);
         }
 
         @Override
         @SuppressWarnings("unchecked")
         public Object[] toArray() {
-            final Object[] array = this.decorated().toArray();
+            final Object[] array = collection.toArray();
             for (int i = 0; i < array.length; i++) {
                 array[i] = new MapEntry((Map.Entry<K, V>) array[i], parent);
             }
@@ -143,7 +143,7 @@ abstract class AbstractInputCheckedMapDecorator<K, V>
                 // where another thread could access data before we decorate it
                 result = (Object[]) Array.newInstance(array.getClass().getComponentType(), 0);
             }
-            result = this.decorated().toArray(result);
+            result = collection.toArray(result);
             for (int i = 0; i < result.length; i++) {
                 result[i] = new MapEntry((Map.Entry<K, V>) result[i], parent);
             }
diff --git a/src/main/java/org/apache/commons/collections4/map/UnmodifiableEntrySet.java b/src/main/java/org/apache/commons/collections4/map/UnmodifiableEntrySet.java
index 5d0d6530..fe9984d3 100644
--- a/src/main/java/org/apache/commons/collections4/map/UnmodifiableEntrySet.java
+++ b/src/main/java/org/apache/commons/collections4/map/UnmodifiableEntrySet.java
@@ -103,13 +103,13 @@ public final class UnmodifiableEntrySet<K, V>
     //-----------------------------------------------------------------------
     @Override
     public Iterator<Map.Entry<K, V>> iterator() {
-        return new UnmodifiableEntrySetIterator(decorated().iterator());
+        return new UnmodifiableEntrySetIterator(collection.iterator());
     }
 
     @Override
     @SuppressWarnings("unchecked")
     public Object[] toArray() {
-        final Object[] array = decorated().toArray();
+        final Object[] array = collection.toArray();
         for (int i = 0; i < array.length; i++) {
             array[i] = new UnmodifiableEntry((Map.Entry<K, V>) array[i]);
         }
@@ -125,7 +125,7 @@ public final class UnmodifiableEntrySet<K, V>
             // where another thread could access data before we decorate it
             result = (Object[]) Array.newInstance(array.getClass().getComponentType(), 0);
         }
-        result = decorated().toArray(result);
+        result = collection.toArray(result);
         for (int i = 0; i < result.length; i++) {
             result[i] = new UnmodifiableEntry((Map.Entry<K, V>) result[i]);
         }
diff --git a/src/main/java/org/apache/commons/collections4/queue/TransformedQueue.java b/src/main/java/org/apache/commons/collections4/queue/TransformedQueue.java
index 9b2d672e..8453d9ce 100644
--- a/src/main/java/org/apache/commons/collections4/queue/TransformedQueue.java
+++ b/src/main/java/org/apache/commons/collections4/queue/TransformedQueue.java
@@ -106,7 +106,7 @@ public class TransformedQueue<E> extends TransformedCollection<E> implements Que
      * @return the decorated queue
      */
     protected Queue<E> getQueue() {
-        return (Queue<E>) decorated();
+        return (Queue<E>) collection;
     }
 
     //-----------------------------------------------------------------------
diff --git a/src/main/java/org/apache/commons/collections4/queue/UnmodifiableQueue.java b/src/main/java/org/apache/commons/collections4/queue/UnmodifiableQueue.java
index d9ea2f17..0124a1d1 100644
--- a/src/main/java/org/apache/commons/collections4/queue/UnmodifiableQueue.java
+++ b/src/main/java/org/apache/commons/collections4/queue/UnmodifiableQueue.java
@@ -79,7 +79,7 @@ public final class UnmodifiableQueue<E>
      */
     private void writeObject(final ObjectOutputStream out) throws IOException {
         out.defaultWriteObject();
-        out.writeObject(decorated());
+        out.writeObject(collection);
     }
 
     /**
@@ -92,7 +92,7 @@ public final class UnmodifiableQueue<E>
     @SuppressWarnings("unchecked")
     private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {
         in.defaultReadObject();
-        setCollection((Collection<E>) in.readObject());
+        collection = (Collection<E>) in.readObject();
     }
 
     //-----------------------------------------------------------------------
diff --git a/src/main/java/org/apache/commons/collections4/set/AbstractSerializableSetDecorator.java b/src/main/java/org/apache/commons/collections4/set/AbstractSerializableSetDecorator.java
index 0e4e3d34..2c0120c1 100644
--- a/src/main/java/org/apache/commons/collections4/set/AbstractSerializableSetDecorator.java
+++ b/src/main/java/org/apache/commons/collections4/set/AbstractSerializableSetDecorator.java
@@ -55,7 +55,7 @@ public abstract class AbstractSerializableSetDecorator<E>
      */
     private void writeObject(final ObjectOutputStream out) throws IOException {
         out.defaultWriteObject();
-        out.writeObject(decorated());
+        out.writeObject(collection);
     }
 
     /**
@@ -68,7 +68,7 @@ public abstract class AbstractSerializableSetDecorator<E>
     @SuppressWarnings("unchecked")
     private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {
         in.defaultReadObject();
-        setCollection((Collection<E>) in.readObject());
+        collection = (Collection<E>) in.readObject();
     }
 
 }
diff --git a/src/main/java/org/apache/commons/collections4/set/ListOrderedSet.java b/src/main/java/org/apache/commons/collections4/set/ListOrderedSet.java
index 0652d3f2..c8d3c4ad 100644
--- a/src/main/java/org/apache/commons/collections4/set/ListOrderedSet.java
+++ b/src/main/java/org/apache/commons/collections4/set/ListOrderedSet.java
@@ -181,18 +181,18 @@ public class ListOrderedSet<E>
     // -----------------------------------------------------------------------
     @Override
     public void clear() {
-        decorated().clear();
+        collection.clear();
         setOrder.clear();
     }
 
     @Override
     public OrderedIterator<E> iterator() {
-        return new OrderedSetIterator<E>(setOrder.listIterator(), decorated());
+        return new OrderedSetIterator<E>(setOrder.listIterator(), collection);
     }
 
     @Override
     public boolean add(final E object) {
-        if (decorated().add(object)) {
+        if (collection.add(object)) {
             setOrder.add(object);
             return true;
         }
@@ -210,7 +210,7 @@ public class ListOrderedSet<E>
 
     @Override
     public boolean remove(final Object object) {
-        final boolean result = decorated().remove(object);
+        final boolean result = collection.remove(object);
         if (result) {
             setOrder.remove(object);
         }
@@ -230,11 +230,11 @@ public class ListOrderedSet<E>
     public boolean retainAll(final Collection<?> coll) {
         final Set<Object> collectionRetainAll = new HashSet<Object>();
         for (final Object next : coll) {
-            if (decorated().contains(next)) {
+            if (collection.contains(next)) {
                 collectionRetainAll.add(next);
             }
         }
-        if (collectionRetainAll.size() == decorated().size()) {
+        if (collectionRetainAll.size() == collection.size()) {
             return false;
         }
         if (collectionRetainAll.size() == 0) {
@@ -298,7 +298,7 @@ public class ListOrderedSet<E>
      */
     public void add(final int index, final E object) {
         if (!contains(object)) {
-            decorated().add(object);
+            collection.add(object);
             setOrder.add(index, object);
         }
     }
@@ -322,7 +322,7 @@ public class ListOrderedSet<E>
             if (contains(e)) {
                 continue;
             }
-            decorated().add(e);
+            collection.add(e);
             toAdd.add(e);
             changed = true;
         }
diff --git a/src/main/java/org/apache/commons/collections4/set/TransformedSortedSet.java b/src/main/java/org/apache/commons/collections4/set/TransformedSortedSet.java
index 9bd663b0..1dac60c5 100644
--- a/src/main/java/org/apache/commons/collections4/set/TransformedSortedSet.java
+++ b/src/main/java/org/apache/commons/collections4/set/TransformedSortedSet.java
@@ -109,7 +109,7 @@ public class TransformedSortedSet<E> extends TransformedSet<E> implements Sorted
      * @return the decorated set
      */
     protected SortedSet<E> getSortedSet() {
-        return (SortedSet<E>) decorated();
+        return (SortedSet<E>) collection;
     }
 
     //-----------------------------------------------------------------------
diff --git a/src/main/java/org/apache/commons/collections4/set/UnmodifiableSortedSet.java b/src/main/java/org/apache/commons/collections4/set/UnmodifiableSortedSet.java
index ef533d7b..aa60bfd5 100644
--- a/src/main/java/org/apache/commons/collections4/set/UnmodifiableSortedSet.java
+++ b/src/main/java/org/apache/commons/collections4/set/UnmodifiableSortedSet.java
@@ -69,7 +69,7 @@ public final class UnmodifiableSortedSet<E>
      */
     private void writeObject(final ObjectOutputStream out) throws IOException {
         out.defaultWriteObject();
-        out.writeObject(decorated());
+        out.writeObject(collection);
     }
 
     /**
@@ -82,7 +82,7 @@ public final class UnmodifiableSortedSet<E>
     @SuppressWarnings("unchecked") // (1) should only fail if input stream is incorrect
     private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {
         in.defaultReadObject();
-        setCollection((Collection<E>) in.readObject()); // (1)
+        collection = (Collection<E>) in.readObject(); // (1)
     }
 
     //-----------------------------------------------------------------------
