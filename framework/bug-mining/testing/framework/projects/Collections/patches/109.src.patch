diff --git a/src/main/java/org/apache/commons/collections4/MultiMap.java b/src/main/java/org/apache/commons/collections4/MultiMap.java
index db0d4b14..df662a3e 100644
--- a/src/main/java/org/apache/commons/collections4/MultiMap.java
+++ b/src/main/java/org/apache/commons/collections4/MultiMap.java
@@ -56,13 +56,12 @@ public interface MultiMap<K, V> extends IterableMap<K, Object> {
      *
      * @param key  the key to remove from
      * @param item  the item to remove
-     * @return {@code true} if the mapping was removed, {@code false} otherwise
+     * @return the value removed (which was passed in), null if nothing removed
      * @throws UnsupportedOperationException if the map is unmodifiable
      * @throws ClassCastException if the key or value is of an invalid type
      * @throws NullPointerException if the key or value is null and null is invalid
-     * @since 4.0 (signature in previous releases: V remove(K, V))
      */
-    boolean removeMapping(K key, V item);
+    public V remove(K key, V item);
 
     //-----------------------------------------------------------------------
     /**
diff --git a/src/main/java/org/apache/commons/collections4/map/MultiValueMap.java b/src/main/java/org/apache/commons/collections4/map/MultiValueMap.java
index a6fa11e7..7125b3a9 100644
--- a/src/main/java/org/apache/commons/collections4/map/MultiValueMap.java
+++ b/src/main/java/org/apache/commons/collections4/map/MultiValueMap.java
@@ -205,21 +205,22 @@ public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object> impleme
      *
      * @param key  the key to remove from
      * @param value the value to remove
-     * @return {@code true} if the mapping was removed, {@code false} otherwise
+     * @return the value removed (which was passed in), null if nothing removed
      */
-    public boolean removeMapping(final Object key, final Object value) {
+    @SuppressWarnings("unchecked")
+    public V remove(final Object key, final Object value) {
         final Collection<V> valuesForKey = getCollection(key);
         if (valuesForKey == null) {
-            return false;
+            return null;
         }
         final boolean removed = valuesForKey.remove(value);
         if (removed == false) {
-            return false;
+            return null;
         }
         if (valuesForKey.isEmpty()) {
             remove(key);
         }
-        return true;
+        return (V) value;
     }
 
     /**
