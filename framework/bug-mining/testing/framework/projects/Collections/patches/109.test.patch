diff --git a/src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java b/src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java
index 0d0438bc..02c5cc9b 100644
--- a/src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java
+++ b/src/test/java/org/apache/commons/collections4/map/MultiValueMapTest.java
@@ -25,6 +25,7 @@ import java.util.Iterator;
 import java.util.LinkedList;
 import java.util.Map;
 
+
 import org.apache.commons.collections4.AbstractObjectTest;
 import org.apache.commons.collections4.IteratorUtils;
 import org.apache.commons.collections4.MultiMap;
@@ -178,7 +179,7 @@ public class MultiValueMapTest<K, V> extends AbstractObjectTest {
         final MultiValueMap<K, V> one = new MultiValueMap<K, V>();
         final Integer value = Integer.valueOf(1);
         one.put((K) "One", value);
-        one.removeMapping("One", value);
+        one.remove("One", value);
 
         final MultiValueMap<K, V> two = new MultiValueMap<K, V>();
         assertEquals(two, one);
@@ -206,7 +207,7 @@ public class MultiValueMapTest<K, V> extends AbstractObjectTest {
         assertEquals(4, map.totalSize());
         map.remove("A");
         assertEquals(3, map.totalSize());
-        map.removeMapping("B", "BC");
+        map.remove("B", "BC");
         assertEquals(2, map.totalSize());
     }
 
@@ -224,7 +225,7 @@ public class MultiValueMapTest<K, V> extends AbstractObjectTest {
         assertEquals(2, map.size());
         map.remove("A");
         assertEquals(1, map.size());
-        map.removeMapping("B", "BC");
+        map.remove("B", "BC");
         assertEquals(1, map.size());
     }
 
@@ -248,7 +249,7 @@ public class MultiValueMapTest<K, V> extends AbstractObjectTest {
         map.remove("A");
         assertEquals(0, map.size("A"));
         assertEquals(3, map.size("B"));
-        map.removeMapping("B", "BC");
+        map.remove("B", "BC");
         assertEquals(0, map.size("A"));
         assertEquals(2, map.size("B"));
     }
@@ -376,11 +377,11 @@ public class MultiValueMapTest<K, V> extends AbstractObjectTest {
         map.put((K) "A", "AA");
         map.put((K) "A", "AB");
         map.put((K) "A", "AC");
-        assertEquals(false, map.removeMapping("C", "CA"));
-        assertEquals(false, map.removeMapping("A", "AD"));
-        assertEquals(true, map.removeMapping("A", "AC"));
-        assertEquals(true, map.removeMapping("A", "AB"));
-        assertEquals(true, map.removeMapping("A", "AA"));
+        assertEquals(null, map.remove("C", "CA"));
+        assertEquals(null, map.remove("A", "AD"));
+        assertEquals("AC", map.remove("A", "AC"));
+        assertEquals("AB", map.remove("A", "AB"));
+        assertEquals("AA", map.remove("A", "AA"));
         assertEquals(new MultiValueMap<K, V>(), map);
     }
 
@@ -396,8 +397,7 @@ public class MultiValueMapTest<K, V> extends AbstractObjectTest {
 
     @Override
     public Object makeObject() {
-        @SuppressWarnings("unchecked")
-        final Map<String, String> m = makeEmptyMap();
+        final Map m = makeEmptyMap();
         m.put("a", "1");
         m.put("a", "1b");
         m.put("b", "2");
@@ -407,7 +407,6 @@ public class MultiValueMapTest<K, V> extends AbstractObjectTest {
         return m;
     }
 
-    @SuppressWarnings("rawtypes")
     private Map makeEmptyMap() {
         return new MultiValueMap();
     }
