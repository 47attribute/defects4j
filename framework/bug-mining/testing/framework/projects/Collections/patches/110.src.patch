diff --git a/src/main/java/org/apache/commons/collections4/map/MultiKeyMap.java b/src/main/java/org/apache/commons/collections4/map/MultiKeyMap.java
index 4853e1a9..fedd8422 100644
--- a/src/main/java/org/apache/commons/collections4/map/MultiKeyMap.java
+++ b/src/main/java/org/apache/commons/collections4/map/MultiKeyMap.java
@@ -195,9 +195,8 @@ public class MultiKeyMap<K, V> extends AbstractMapDecorator<MultiKey<? extends K
      * @param key1  the first key
      * @param key2  the second key
      * @return the value mapped to the removed key, null if key not in map
-     * @since 4.0 (previous name: remove(Object, Object))
      */
-    public V removeMultiKey(final Object key1, final Object key2) {
+    public V remove(final Object key1, final Object key2) {
         final int hashCode = hash(key1, key2);
         final int index = decorated().hashIndex(hashCode, decorated().data.length);
         AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];
@@ -328,9 +327,8 @@ public class MultiKeyMap<K, V> extends AbstractMapDecorator<MultiKey<? extends K
      * @param key2  the second key
      * @param key3  the third key
      * @return the value mapped to the removed key, null if key not in map
-     * @since 4.0 (previous name: remove(Object, Object, Object))
      */
-    public V removeMultiKey(final Object key1, final Object key2, final Object key3) {
+    public V remove(final Object key1, final Object key2, final Object key3) {
         final int hashCode = hash(key1, key2, key3);
         final int index = decorated().hashIndex(hashCode, decorated().data.length);
         AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];
@@ -471,9 +469,8 @@ public class MultiKeyMap<K, V> extends AbstractMapDecorator<MultiKey<? extends K
      * @param key3  the third key
      * @param key4  the fourth key
      * @return the value mapped to the removed key, null if key not in map
-     * @since 4.0 (previous name: remove(Object, Object, Object, Object))
      */
-    public V removeMultiKey(final Object key1, final Object key2, final Object key3, final Object key4) {
+    public V remove(final Object key1, final Object key2, final Object key3, final Object key4) {
         final int hashCode = hash(key1, key2, key3, key4);
         final int index = decorated().hashIndex(hashCode, decorated().data.length);
         AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];
@@ -625,10 +622,8 @@ public class MultiKeyMap<K, V> extends AbstractMapDecorator<MultiKey<? extends K
      * @param key4  the fourth key
      * @param key5  the fifth key
      * @return the value mapped to the removed key, null if key not in map
-     * @since 4.0 (previous name: remove(Object, Object, Object, Object, Object))
      */
-    public V removeMultiKey(final Object key1, final Object key2, final Object key3,
-                            final Object key4, final Object key5) {
+    public V remove(final Object key1, final Object key2, final Object key3, final Object key4, final Object key5) {
         final int hashCode = hash(key1, key2, key3, key4, key5);
         final int index = decorated().hashIndex(hashCode, decorated().data.length);
         AbstractHashedMap.HashEntry<MultiKey<? extends K>, V> entry = decorated().data[index];
