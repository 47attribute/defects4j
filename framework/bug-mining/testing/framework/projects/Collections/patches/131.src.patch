diff --git a/src/main/java/org/apache/commons/collections4/set/ListOrderedSet.java b/src/main/java/org/apache/commons/collections4/set/ListOrderedSet.java
index b4a476ce..48356fc7 100644
--- a/src/main/java/org/apache/commons/collections4/set/ListOrderedSet.java
+++ b/src/main/java/org/apache/commons/collections4/set/ListOrderedSet.java
@@ -225,31 +225,27 @@ public class ListOrderedSet<E>
         return result;
     }
 
-    /**
-     * {@inheritDoc}
-     * <p>
-     * This implementation iterates over the elements of this set, checking
-     * each element in turn to see if it's contained in <code>coll</code>.
-     * If it's not contained, it's removed from this set. As a consequence,
-     * it is advised to use a collection type for <code>coll</code> that provides
-     * a fast (e.g. O(1)) implementation of {@link Collection#contains(Object)}.
-     */
     @Override
     public boolean retainAll(final Collection<?> coll) {
-        boolean result = decorated().retainAll(coll);
-        if (result == false) {
+        final Set<Object> collectionRetainAll = new HashSet<Object>();
+        for (final Object next : coll) {
+            if (decorated().contains(next)) {
+                collectionRetainAll.add(next);
+            }
+        }
+        if (collectionRetainAll.size() == decorated().size()) {
             return false;
         }
-        if (decorated().size() == 0) {
-            setOrder.clear();
+        if (collectionRetainAll.size() == 0) {
+            clear();
         } else {
-            for (Iterator<E> it = setOrder.iterator(); it.hasNext();) {
-                if (!decorated().contains(it.next())) {
+            for (final Iterator<E> it = iterator(); it.hasNext();) {
+                if (!collectionRetainAll.contains(it.next())) {
                     it.remove();
                 }
             }
         }
-        return result;
+        return true;
     }
 
     @Override
