diff --git a/src/main/java/org/apache/commons/collections4/functors/CloneTransformer.java b/src/main/java/org/apache/commons/collections4/functors/CloneTransformer.java
index 4361845a..d99d492b 100644
--- a/src/main/java/org/apache/commons/collections4/functors/CloneTransformer.java
+++ b/src/main/java/org/apache/commons/collections4/functors/CloneTransformer.java
@@ -16,22 +16,22 @@
  */
 package org.apache.commons.collections4.functors;
 
+import java.io.Serializable;
+
 import org.apache.commons.collections4.Transformer;
 
 /**
  * Transformer implementation that returns a clone of the input object.
  * <p>
  * Clone is performed using <code>PrototypeFactory.prototypeFactory(input).create()</code>.
- * <p>
- * <b>WARNING:</b> from v4.1 onwards this class will <b>not</b> be serializable anymore
- * in order to prevent potential remote code execution exploits. Please refer to
- * <a href="https://issues.apache.org/jira/browse/COLLECTIONS-580">COLLECTIONS-580</a>
- * for more details.
  *
  * @since 3.0
  * @version $Id$
  */
-public class CloneTransformer<T> implements Transformer<T, T> {
+public class CloneTransformer<T> implements Transformer<T, T>, Serializable {
+
+    /** Serial version UID */
+    private static final long serialVersionUID = -8188742709499652567L;
 
     /** Singleton predicate instance */
     @SuppressWarnings("rawtypes") // the singleton instance works for all types
@@ -46,7 +46,7 @@ public class CloneTransformer<T> implements Transformer<T, T> {
      */
     @SuppressWarnings("unchecked") // the singleton instance works for all types
     public static <T> Transformer<T, T> cloneTransformer() {
-        return INSTANCE;
+        return (Transformer<T, T>) INSTANCE;
     }
 
     /**
@@ -62,7 +62,6 @@ public class CloneTransformer<T> implements Transformer<T, T> {
      * @param input  the input object to transform
      * @return the transformed result
      */
-    @Override
     public T transform(final T input) {
         if (input == null) {
             return null;
@@ -70,4 +69,8 @@ public class CloneTransformer<T> implements Transformer<T, T> {
         return PrototypeFactory.prototypeFactory(input).create();
     }
 
+    private Object readResolve() {
+        return INSTANCE;
+    }
+
 }
diff --git a/src/main/java/org/apache/commons/collections4/functors/ForClosure.java b/src/main/java/org/apache/commons/collections4/functors/ForClosure.java
index e2e94594..da2ecf0e 100644
--- a/src/main/java/org/apache/commons/collections4/functors/ForClosure.java
+++ b/src/main/java/org/apache/commons/collections4/functors/ForClosure.java
@@ -16,20 +16,20 @@
  */
 package org.apache.commons.collections4.functors;
 
+import java.io.Serializable;
+
 import org.apache.commons.collections4.Closure;
 
 /**
  * Closure implementation that calls another closure n times, like a for loop.
- * <p>
- * <b>WARNING:</b> from v4.1 onwards this class will <b>not</b> be serializable anymore
- * in order to prevent potential remote code execution exploits. Please refer to
- * <a href="https://issues.apache.org/jira/browse/COLLECTIONS-580">COLLECTIONS-580</a>
- * for more details.
  *
  * @since 3.0
  * @version $Id$
  */
-public class ForClosure<E> implements Closure<E> {
+public class ForClosure<E> implements Closure<E>, Serializable {
+
+    /** Serial version UID */
+    private static final long serialVersionUID = -1190120533393621674L;
 
     /** The number of times to loop */
     private final int iCount;
@@ -76,7 +76,6 @@ public class ForClosure<E> implements Closure<E> {
      *
      * @param input  the input object
      */
-    @Override
     public void execute(final E input) {
         for (int i = 0; i < iCount; i++) {
             iClosure.execute(input);
diff --git a/src/main/java/org/apache/commons/collections4/functors/InstantiateFactory.java b/src/main/java/org/apache/commons/collections4/functors/InstantiateFactory.java
index 457643c8..1179b5e7 100644
--- a/src/main/java/org/apache/commons/collections4/functors/InstantiateFactory.java
+++ b/src/main/java/org/apache/commons/collections4/functors/InstantiateFactory.java
@@ -16,6 +16,7 @@
  */
 package org.apache.commons.collections4.functors;
 
+import java.io.Serializable;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 
@@ -24,16 +25,14 @@ import org.apache.commons.collections4.FunctorException;
 
 /**
  * Factory implementation that creates a new object instance by reflection.
- * <p>
- * <b>WARNING:</b> from v4.1 onwards this class will <b>not</b> be serializable anymore
- * in order to prevent potential remote code execution exploits. Please refer to
- * <a href="https://issues.apache.org/jira/browse/COLLECTIONS-580">COLLECTIONS-580</a>
- * for more details.
  *
  * @since 3.0
  * @version $Id$
  */
-public class InstantiateFactory<T> implements Factory<T> {
+public class InstantiateFactory<T> implements Factory<T>, Serializable {
+
+    /** The serial version */
+    private static final long serialVersionUID = -7732226881069447957L;
 
     /** The class to create */
     private final Class<T> iClassToInstantiate;
@@ -119,7 +118,6 @@ public class InstantiateFactory<T> implements Factory<T> {
      *
      * @return the new object
      */
-    @Override
     public T create() {
         // needed for post-serialization
         if (iConstructor == null) {
diff --git a/src/main/java/org/apache/commons/collections4/functors/InstantiateTransformer.java b/src/main/java/org/apache/commons/collections4/functors/InstantiateTransformer.java
index 757f2a9a..e5a000ea 100644
--- a/src/main/java/org/apache/commons/collections4/functors/InstantiateTransformer.java
+++ b/src/main/java/org/apache/commons/collections4/functors/InstantiateTransformer.java
@@ -16,6 +16,7 @@
  */
 package org.apache.commons.collections4.functors;
 
+import java.io.Serializable;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
 
@@ -24,16 +25,14 @@ import org.apache.commons.collections4.Transformer;
 
 /**
  * Transformer implementation that creates a new object instance by reflection.
- * <p>
- * <b>WARNING:</b> from v4.1 onwards this class will <b>not</b> be serializable anymore
- * in order to prevent potential remote code execution exploits. Please refer to
- * <a href="https://issues.apache.org/jira/browse/COLLECTIONS-580">COLLECTIONS-580</a>
- * for more details.
  *
  * @since 3.0
  * @version $Id$
  */
-public class InstantiateTransformer<T> implements Transformer<Class<? extends T>, T> {
+public class InstantiateTransformer<T> implements Transformer<Class<? extends T>, T>, Serializable {
+
+    /** The serial version */
+    private static final long serialVersionUID = 3786388740793356347L;
 
     /** Singleton instance that uses the no arg constructor */
     @SuppressWarnings("rawtypes")
@@ -52,7 +51,7 @@ public class InstantiateTransformer<T> implements Transformer<Class<? extends T>
      */
     @SuppressWarnings("unchecked")
     public static <T> Transformer<Class<? extends T>, T> instantiateTransformer() {
-        return NO_ARG_INSTANCE;
+        return (Transformer<Class<? extends T>, T>) NO_ARG_INSTANCE;
     }
 
     /**
@@ -108,7 +107,6 @@ public class InstantiateTransformer<T> implements Transformer<Class<? extends T>
      * @param input  the input object to transform
      * @return the transformed result
      */
-    @Override
     public T transform(final Class<? extends T> input) {
         try {
             if (input == null) {
diff --git a/src/main/java/org/apache/commons/collections4/functors/InvokerTransformer.java b/src/main/java/org/apache/commons/collections4/functors/InvokerTransformer.java
index 45d90b2f..09d79ef2 100644
--- a/src/main/java/org/apache/commons/collections4/functors/InvokerTransformer.java
+++ b/src/main/java/org/apache/commons/collections4/functors/InvokerTransformer.java
@@ -16,6 +16,7 @@
  */
 package org.apache.commons.collections4.functors;
 
+import java.io.Serializable;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
@@ -24,16 +25,14 @@ import org.apache.commons.collections4.Transformer;
 
 /**
  * Transformer implementation that creates a new object instance by reflection.
- * <p>
- * <b>WARNING:</b> from v4.1 onwards this class will <b>not</b> be serializable anymore
- * in order to prevent potential remote code execution exploits. Please refer to
- * <a href="https://issues.apache.org/jira/browse/COLLECTIONS-580">COLLECTIONS-580</a>
- * for more details.
  *
  * @since 3.0
  * @version $Id$
  */
-public class InvokerTransformer<I, O> implements Transformer<I, O> {
+public class InvokerTransformer<I, O> implements Transformer<I, O>, Serializable {
+
+    /** The serial version */
+    private static final long serialVersionUID = -8653385846894047688L;
 
     /** The method name to call */
     private final String iMethodName;
@@ -122,7 +121,6 @@ public class InvokerTransformer<I, O> implements Transformer<I, O> {
      * @param input  the input object to transform
      * @return the transformed result, null if null input
      */
-    @Override
     @SuppressWarnings("unchecked")
     public O transform(final Object input) {
         if (input == null) {
diff --git a/src/main/java/org/apache/commons/collections4/functors/PrototypeFactory.java b/src/main/java/org/apache/commons/collections4/functors/PrototypeFactory.java
index 13186cd3..9d808c4e 100644
--- a/src/main/java/org/apache/commons/collections4/functors/PrototypeFactory.java
+++ b/src/main/java/org/apache/commons/collections4/functors/PrototypeFactory.java
@@ -30,12 +30,6 @@ import org.apache.commons.collections4.FunctorException;
 
 /**
  * Factory implementation that creates a new instance each time based on a prototype.
- * <p>
- * <b>WARNING:</b> from v4.1 onwards {@link Factory} instances returned by
- * {@link #prototypeFactory(Object)} will <b>not</b> be serializable anymore in order
- * to prevent potential remote code execution exploits. Please refer to
- * <a href="https://issues.apache.org/jira/browse/COLLECTIONS-580">COLLECTIONS-580</a>
- * for more details.
  *
  * @since 3.0
  * @version $Id$
@@ -97,7 +91,10 @@ public class PrototypeFactory {
     /**
      * PrototypeCloneFactory creates objects by copying a prototype using the clone method.
      */
-    static class PrototypeCloneFactory<T> implements Factory<T> {
+    static class PrototypeCloneFactory<T> implements Factory<T>, Serializable {
+
+        /** The serial version */
+        private static final long serialVersionUID = 5604271422565175555L;
 
         /** The object to clone each time */
         private final T iPrototype;
@@ -129,7 +126,6 @@ public class PrototypeFactory {
          *
          * @return the new object
          */
-        @Override
         @SuppressWarnings("unchecked")
         public T create() {
             // needed for post-serialization
@@ -152,7 +148,10 @@ public class PrototypeFactory {
     /**
      * PrototypeSerializationFactory creates objects by cloning a prototype using serialization.
      */
-    static class PrototypeSerializationFactory<T extends Serializable> implements Factory<T> {
+    static class PrototypeSerializationFactory<T extends Serializable> implements Factory<T>, Serializable {
+
+        /** The serial version */
+        private static final long serialVersionUID = -8704966966139178833L;
 
         /** The object to clone via serialization each time */
         private final T iPrototype;
@@ -170,7 +169,6 @@ public class PrototypeFactory {
          *
          * @return the new object
          */
-        @Override
         @SuppressWarnings("unchecked")
         public T create() {
             final ByteArrayOutputStream baos = new ByteArrayOutputStream(512);
diff --git a/src/main/java/org/apache/commons/collections4/functors/WhileClosure.java b/src/main/java/org/apache/commons/collections4/functors/WhileClosure.java
index 8f183490..525bc9a9 100644
--- a/src/main/java/org/apache/commons/collections4/functors/WhileClosure.java
+++ b/src/main/java/org/apache/commons/collections4/functors/WhileClosure.java
@@ -16,22 +16,22 @@
  */
 package org.apache.commons.collections4.functors;
 
+import java.io.Serializable;
+
 import org.apache.commons.collections4.Closure;
 import org.apache.commons.collections4.Predicate;
 
 /**
  * Closure implementation that executes a closure repeatedly until a condition is met,
  * like a do-while or while loop.
- * <p>
- * <b>WARNING:</b> from v4.1 onwards this class will <b>not</b> be serializable anymore
- * in order to prevent potential remote code execution exploits. Please refer to
- * <a href="https://issues.apache.org/jira/browse/COLLECTIONS-580">COLLECTIONS-580</a>
- * for more details.
  *
  * @since 3.0
  * @version $Id$
  */
-public class WhileClosure<E> implements Closure<E> {
+public class WhileClosure<E> implements Closure<E>, Serializable {
+
+    /** Serial version UID */
+    private static final long serialVersionUID = -3110538116913760108L;
 
     /** The test condition */
     private final Predicate<? super E> iPredicate;
@@ -81,7 +81,6 @@ public class WhileClosure<E> implements Closure<E> {
      *
      * @param input  the input object
      */
-    @Override
     public void execute(final E input) {
         if (iDoLoop) {
             iClosure.execute(input);
diff --git a/src/main/java/org/apache/commons/collections4/functors/package-info.java b/src/main/java/org/apache/commons/collections4/functors/package-info.java
index c30ba19b..198fc541 100644
--- a/src/main/java/org/apache/commons/collections4/functors/package-info.java
+++ b/src/main/java/org/apache/commons/collections4/functors/package-info.java
@@ -21,22 +21,6 @@
  * {@link org.apache.commons.collections4.Transformer Transformer} and
  * {@link org.apache.commons.collections4.Factory Factory} interfaces.
  * These provide simple callbacks for processing with collections.
- * <p>
- * <b>WARNING:</b> from v4.1 onwards several unsafe classes in this package
- * will not be serializable anymore in order to prevent potential remote
- * code execution exploits.
- * <p>
- * Classes considered to be unsafe are:
- * <ul>
- * <li>CloneTransformer</li>
- * <li>ForClosure</li>
- * <li>InstantiateFactory</li>
- * <li>InstantiateTransformer</li>
- * <li>InvokerTransformer</li>
- * <li>PrototypeFactory$PrototypeCloneFactory</li>
- * <li>PrototypeFactory$PrototypeSerializationFactory</li>
- * <li>WhileClosure</li>
- * </ul>
  *
  * @version $Id$
  */
