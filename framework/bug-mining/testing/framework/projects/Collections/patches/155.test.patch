diff --git a/src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java b/src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java
index 3ea05e0f..4ce341f7 100644
--- a/src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java
+++ b/src/test/java/org/apache/commons/collections4/map/ReferenceMapTest.java
@@ -16,12 +16,6 @@
  */
 package org.apache.commons.collections4.map;
 
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.io.ObjectInputStream;
-import java.io.ObjectOutputStream;
-
 import java.lang.ref.WeakReference;
 import java.util.Map;
 
@@ -255,31 +249,6 @@ public class ReferenceMapTest<K, V> extends AbstractIterableMapTest<K, V> {
         }
     }
 
-    /**
-     * Test whether after serialization the "data" HashEntry array is the same size as the original.<p>
-     * 
-     * See <a href="https://issues.apache.org/jira/browse/COLLECTIONS-599">COLLECTIONS-599: HashEntry array object naming data initialized with double the size during deserialization</a>
-     */
-    public void testDataSizeAfterSerialization() throws IOException, ClassNotFoundException {
-        
-        ReferenceMap<String,String> serialiseMap = new ReferenceMap<>(ReferenceStrength.WEAK, ReferenceStrength.WEAK, true);
-        serialiseMap.put("KEY", "VALUE");
-        
-        ByteArrayOutputStream baos = new ByteArrayOutputStream();
-        try (ObjectOutputStream out = new ObjectOutputStream(baos)) {
-            out.writeObject(serialiseMap);
-        }
-        
-        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
-        try (ObjectInputStream in = new ObjectInputStream(bais)) {
-            @SuppressWarnings("unchecked")
-            ReferenceMap<String,String> deserialisedMap = (ReferenceMap<String,String>) in.readObject();
-            assertEquals(1, deserialisedMap.size());
-            assertEquals(serialiseMap.data.length, deserialisedMap.data.length);
-        }
-        
-    }
-    
     @SuppressWarnings("unused")
     private static void gc() {
         try {
