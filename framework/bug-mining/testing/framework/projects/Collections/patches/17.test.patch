diff --git a/src/test/org/apache/commons/collections/collection/TestCompositeCollection.java b/src/test/org/apache/commons/collections/collection/TestCompositeCollection.java
index 52e07cfb..dc5656d1 100644
--- a/src/test/org/apache/commons/collections/collection/TestCompositeCollection.java
+++ b/src/test/org/apache/commons/collections/collection/TestCompositeCollection.java
@@ -355,16 +355,4 @@ public class TestCompositeCollection extends AbstractTestCollection {
         assertTrue(c.contains("1"));
         assertEquals(2, c.size());
     }
-
-    public String getCompatibilityVersion() {
-        return "3.3";
-    }
-
-//    public void testCreate() throws Exception {
-//        resetEmpty();
-//        writeExternalFormToDisk((java.io.Serializable) collection, "/tmp/CompositeCollection.emptyCollection.version3.3.obj");
-//        resetFull();
-//        writeExternalFormToDisk((java.io.Serializable) collection, "/tmp/CompositeCollection.fullCollection.version3.3.obj");
-//    }
-
 }
diff --git a/src/test/org/apache/commons/collections/map/EmptyMapMutator.java b/src/test/org/apache/commons/collections/map/EmptyMapMutator.java
deleted file mode 100644
index 58d4de4f..00000000
--- a/src/test/org/apache/commons/collections/map/EmptyMapMutator.java
+++ /dev/null
@@ -1,43 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.apache.commons.collections.map;
-
-import java.util.Map;
-import java.util.Collection;
-
-/**
- * This class is used in TestCompositeMap. When testing serialization, 
- * the class has to be separate of TestCompositeMap, else the test 
- * class also has to be serialized. 
- */
-class EmptyMapMutator implements CompositeMap.MapMutator {
-    public void resolveCollision(CompositeMap composite,
-    Map existing,
-    Map added,
-    Collection intersect) {
-        // Do nothing
-    }
-    
-    public Object put(CompositeMap map, Map[] composited, Object key, Object value) {
-        return composited[0].put(key, value);
-    }
-    
-    public void putAll(CompositeMap map, Map[] composited, Map t) {
-        composited[0].putAll(t);
-    }
-    
-}
diff --git a/src/test/org/apache/commons/collections/map/TestCompositeMap.java b/src/test/org/apache/commons/collections/map/TestCompositeMap.java
index 17202600..dfff654c 100644
--- a/src/test/org/apache/commons/collections/map/TestCompositeMap.java
+++ b/src/test/org/apache/commons/collections/map/TestCompositeMap.java
@@ -58,7 +58,23 @@ public class TestCompositeMap extends AbstractTestMap {
     public Map makeEmptyMap() {
         CompositeMap map = new CompositeMap();
         map.addComposited(new HashMap());
-        map.setMutator( new EmptyMapMutator() );
+        map.setMutator(new CompositeMap.MapMutator() {
+            public void resolveCollision(CompositeMap composite,
+            Map existing,
+            Map added,
+            Collection intersect) {
+                // Do nothing
+            }
+            
+            public Object put(CompositeMap map, Map[] composited, Object key, Object value) {
+                return composited[0].put(key, value);
+            }
+            
+            public void putAll(CompositeMap map, Map[] composited, Map t) {
+                composited[0].putAll(t);
+            }
+            
+        });
         return map;
     }
     
@@ -207,16 +223,5 @@ public class TestCompositeMap extends AbstractTestMap {
         map.putAll(null);
         assertTrue(pass);
     }
-
-    public String getCompatibilityVersion() {
-        return "3.3";
-    }
-
-//    public void testCreate() throws Exception {
-//        resetEmpty();
-//        writeExternalFormToDisk((java.io.Serializable) map, "/tmp/CompositeMap.emptyCollection.version3.3.obj");
-//        resetFull();
-//        writeExternalFormToDisk((java.io.Serializable) map, "/tmp/CompositeMap.fullCollection.version3.3.obj");
-//    }
-
 }
+
diff --git a/src/test/org/apache/commons/collections/set/EmptySetMutator.java b/src/test/org/apache/commons/collections/set/EmptySetMutator.java
deleted file mode 100644
index cc57bfd0..00000000
--- a/src/test/org/apache/commons/collections/set/EmptySetMutator.java
+++ /dev/null
@@ -1,55 +0,0 @@
-/*
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.apache.commons.collections.set;
-
-import java.util.Collection;
-import java.util.Set;
-
-import org.apache.commons.collections.collection.CompositeCollection;
-
-/**
- * This class is used in TestCompositeSet. When testing serialization, 
- * the class has to be separate of TestCompositeSet, else the test 
- * class also has to be serialized. 
- */
-class EmptySetMutator implements CompositeSet.SetMutator {
-    private Set contained;
-
-    public EmptySetMutator(Set set) {
-        this.contained = set;
-    }
-
-    public void resolveCollision(CompositeSet comp, Set existing, 
-        Set added, Collection intersects) {
-        throw new IllegalArgumentException();
-    }
-    
-    public boolean add(CompositeCollection composite, 
-        Collection[] collections, Object obj) {
-        return contained.add(obj);
-    }
-    
-    public boolean addAll(CompositeCollection composite, 
-        Collection[] collections, Collection coll) {
-        return contained.addAll(coll);
-    }
-    
-    public boolean remove(CompositeCollection composite, 
-        Collection[] collections, Object obj) {
-        return contained.remove(obj);
-    }
-}
diff --git a/src/test/org/apache/commons/collections/set/TestCompositeSet.java b/src/test/org/apache/commons/collections/set/TestCompositeSet.java
index 8d46697b..155cb098 100644
--- a/src/test/org/apache/commons/collections/set/TestCompositeSet.java
+++ b/src/test/org/apache/commons/collections/set/TestCompositeSet.java
@@ -48,7 +48,27 @@ public class TestCompositeSet extends AbstractTestSet {
     public Set makeEmptySet() {
         final HashSet contained = new HashSet();
         CompositeSet set = new CompositeSet(contained);
-        set.setMutator( new EmptySetMutator(contained) );
+        set.setMutator(new CompositeSet.SetMutator() {
+            public void resolveCollision(CompositeSet comp, Set existing, 
+                Set added, Collection intersects) {
+                throw new IllegalArgumentException();
+            }
+            
+            public boolean add(CompositeCollection composite, 
+                Collection[] collections, Object obj) {
+                return contained.add(obj);
+            }
+            
+            public boolean addAll(CompositeCollection composite, 
+                Collection[] collections, Collection coll) {
+                return contained.addAll(coll);
+            }
+            
+            public boolean remove(CompositeCollection composite, 
+                Collection[] collections, Object obj) {
+                return contained.remove(obj);
+            }
+        });
         return set;
     }
     
@@ -153,16 +173,4 @@ public class TestCompositeSet extends AbstractTestSet {
             // expected
         }
     }
-
-    public String getCompatibilityVersion() {
-        return "3.3";
-    }
-
-//    public void testCreate() throws Exception {
-//        resetEmpty();
-//        writeExternalFormToDisk((java.io.Serializable) collection, "/tmp/CompositeSet.emptyCollection.version3.3.obj");
-//        resetFull();
-//        writeExternalFormToDisk((java.io.Serializable) collection, "/tmp/CompositeSet.fullCollection.version3.3.obj");
-//    }
-
 }
