diff --git a/src/java/org/apache/commons/collections/map/MultiValueMap.java b/src/java/org/apache/commons/collections/map/MultiValueMap.java
index cdbfebc9..160ce81a 100644
--- a/src/java/org/apache/commons/collections/map/MultiValueMap.java
+++ b/src/java/org/apache/commons/collections/map/MultiValueMap.java
@@ -29,7 +29,6 @@ import java.util.Iterator;
 import java.util.Map;
 import java.util.Set;
 
-import org.apache.commons.collections.CollectionUtils;
 import org.apache.commons.collections.Factory;
 import org.apache.commons.collections.FunctorException;
 import org.apache.commons.collections.MultiMap;
@@ -67,15 +66,15 @@ import org.apache.commons.collections.iterators.IteratorChain;
  * @version $Revision$ $Date$
  * @since Commons Collections 3.2
  */
-public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object> implements MultiMap<K, V>, Serializable {
+public class MultiValueMap extends AbstractMapDecorator implements MultiMap, Serializable {
 
     /** Serialization version */
     private static final long serialVersionUID = -2214159910087182007L;
 
     /** The factory for creating value collections. */
-    private final Factory<? extends Collection<V>> collectionFactory;
+    private final Factory collectionFactory;
     /** The cached values. */
-    private transient Collection<V> valuesView;
+    private transient Collection valuesView;
 
     /**
      * Creates a map which wraps the given map and
@@ -83,9 +82,8 @@ public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object> impleme
      *
      * @param map  the map to wrap
      */
-    @SuppressWarnings("unchecked")
-    public static <K, V> MultiValueMap<K, V> decorate(Map<K, ? super Collection<V>> map) {
-        return MultiValueMap.<K, V, ArrayList>decorate((Map<K, ? super Collection>) map, ArrayList.class);
+    public static MultiValueMap decorate(Map map) {
+        return new MultiValueMap(map, new ReflectionFactory(ArrayList.class));
     }
 
     /**
@@ -95,8 +93,8 @@ public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object> impleme
      * @param map  the map to wrap
      * @param collectionClass  the type of the collection class
      */
-    public static <K, V, C extends Collection<V>> MultiValueMap<K, V> decorate(Map<K, ? super C> map, Class<C> collectionClass) {
-        return new MultiValueMap<K, V>(map, new ReflectionFactory<C>(collectionClass));
+    public static MultiValueMap decorate(Map map, Class collectionClass) {
+        return new MultiValueMap(map, new ReflectionFactory(collectionClass));
     }
 
     /**
@@ -106,8 +104,8 @@ public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object> impleme
      * @param map  the map to decorate
      * @param collectionFactory  the collection factory (must return a Collection object).
      */
-    public static <K, V, C extends Collection<V>> MultiValueMap<K, V> decorate(Map<K, ? super C> map, Factory<C> collectionFactory) {
-        return new MultiValueMap<K, V>(map, collectionFactory);
+    public static MultiValueMap decorate(Map map, Factory collectionFactory) {
+        return new MultiValueMap(map, collectionFactory);
     }
 
     //-----------------------------------------------------------------------
@@ -115,7 +113,6 @@ public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object> impleme
      * Creates a MultiValueMap based on a <code>HashMap</code> and
      * storing the multiple values in an <code>ArrayList</code>.
      */
-    @SuppressWarnings("unchecked")
     public MultiValueMap() {
         this(new HashMap(), new ReflectionFactory(ArrayList.class));
     }
@@ -127,9 +124,8 @@ public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object> impleme
      * @param map  the map to decorate
      * @param collectionFactory  the collection factory which must return a Collection instance
      */
-    @SuppressWarnings("unchecked")
-    protected <C extends Collection<V>> MultiValueMap(Map<K, ? super C> map, Factory<C> collectionFactory) {
-        super((Map<K, Object>) map);
+    protected MultiValueMap(Map map, Factory collectionFactory) {
+        super(map);
         if (collectionFactory == null) {
             throw new IllegalArgumentException("The factory must not be null");
         }
@@ -175,7 +171,7 @@ public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object> impleme
 //            Collection coll = (Collection) keyValuePair.getValue();
 //            coll.clear();
 //        }
-        decorated().clear();
+        getMap().clear();
     }
 
     /**
@@ -191,9 +187,8 @@ public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object> impleme
      * @param value the value to remove
      * @return the value removed (which was passed in), null if nothing removed
      */
-    @SuppressWarnings("unchecked")
-    public V remove(Object key, Object value) {
-        Collection<V> valuesForKey = getCollection(key);
+    public Object remove(Object key, Object value) {
+        Collection valuesForKey = getCollection(key);
         if (valuesForKey == null) {
             return null;
         }
@@ -204,7 +199,7 @@ public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object> impleme
         if (valuesForKey.isEmpty()) {
             remove(key);
         }
-        return (V) value;
+        return value;
     }
 
     /**
@@ -215,14 +210,17 @@ public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object> impleme
      * @param value  the value to search for
      * @return true if the map contains the value
      */
-    @SuppressWarnings("unchecked")
     public boolean containsValue(Object value) {
-        Set<Map.Entry<K, Object>> pairs = decorated().entrySet();
-        if (pairs != null) {
-            for (Map.Entry<K, Object> entry : pairs) {
-                if (((Collection<V>) entry.getValue()).contains(value)) {
-                    return true;
-                }
+        Set pairs = getMap().entrySet();
+        if (pairs == null) {
+            return false;
+        }
+        Iterator pairsIterator = pairs.iterator();
+        while (pairsIterator.hasNext()) {
+            Map.Entry keyValuePair = (Map.Entry) pairsIterator.next();
+            Collection coll = (Collection) keyValuePair.getValue();
+            if (coll.contains(value)) {
+                return true;
             }
         }
         return false;
@@ -238,20 +236,19 @@ public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object> impleme
      * @param value  the value to add to the collection at the key
      * @return the value added if the map changed and null if the map did not change
      */
-    @SuppressWarnings("unchecked")
-    public Object put(K key, Object value) {
+    public Object put(Object key, Object value) {
         boolean result = false;
-        Collection<V> coll = getCollection(key);
+        Collection coll = getCollection(key);
         if (coll == null) {
             coll = createCollection(1);  // might produce a non-empty collection
-            coll.add((V) value);
+            coll.add(value);
             if (coll.size() > 0) {
                 // only add if non-zero size to maintain class state
-                decorated().put(key, coll);
+                getMap().put(key, coll);
                 result = true;  // map definitely changed
             }
         } else {
-            result = coll.add((V) value);
+            result = coll.add(value);
         }
         return (result ? value : null);
     }
@@ -267,15 +264,17 @@ public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object> impleme
      *
      * @param map  the map to copy (either a normal or multi map)
      */
-    @SuppressWarnings("unchecked")
-    public void putAll(Map<? extends K, ?> map) {
+    public void putAll(Map map) {
         if (map instanceof MultiMap) {
-            for (Map.Entry<? extends K, Object> entry : ((MultiMap<? extends K, V>) map).entrySet()) {
-                putAll(entry.getKey(), (Collection<V>) entry.getValue());
+            for (Iterator it = map.entrySet().iterator(); it.hasNext();) {
+                Map.Entry entry = (Map.Entry) it.next();
+                Collection coll = (Collection) entry.getValue();
+                putAll(entry.getKey(), coll);
             }
         } else {
-            for (Map.Entry<? extends K, ?> entry : map.entrySet()) {
-                put(entry.getKey(), (V) entry.getValue());
+            for (Iterator it = map.entrySet().iterator(); it.hasNext();) {
+                Map.Entry entry = (Map.Entry) it.next();
+                put(entry.getKey(), entry.getValue());
             }
         }
     }
@@ -287,10 +286,11 @@ public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object> impleme
      *
      * @return a collection view of the values contained in this map
      */
-    @SuppressWarnings("unchecked")
-    public Collection<Object> values() {
-        Collection<V> vs = valuesView;
-        return (Collection<Object>) (vs != null ? vs : (valuesView = new Values()));
+    public Collection values() {
+        if (valuesView == null) {
+            valuesView = new Values();
+        }
+        return valuesView;
     }
 
     /**
@@ -300,7 +300,7 @@ public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object> impleme
      * @return true if the map contains the value
      */
     public boolean containsValue(Object key, Object value) {
-        Collection<V> coll = getCollection(key);
+        Collection coll = getCollection(key);
         if (coll == null) {
             return false;
         }
@@ -314,9 +314,8 @@ public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object> impleme
      * @param key  the key to retrieve
      * @return the collection mapped to the key, null if no mapping
      */
-    @SuppressWarnings("unchecked")
-    public Collection<V> getCollection(Object key) {
-        return (Collection<V>) decorated().get(key);
+    public Collection getCollection(Object key) {
+        return (Collection) getMap().get(key);
     }
 
     /**
@@ -326,7 +325,7 @@ public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object> impleme
      * @return the size of the collection at the key, zero if key not in map
      */
     public int size(Object key) {
-        Collection<V> coll = getCollection(key);
+        Collection coll = getCollection(key);
         if (coll == null) {
             return 0;
         }
@@ -341,18 +340,18 @@ public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object> impleme
      * @param values  the values to add to the collection at the key, null ignored
      * @return true if this map changed
      */
-    public boolean putAll(K key, Collection<V> values) {
+    public boolean putAll(Object key, Collection values) {
         if (values == null || values.size() == 0) {
             return false;
         }
         boolean result = false;
-        Collection<V> coll = getCollection(key);
+        Collection coll = getCollection(key);
         if (coll == null) {
             coll = createCollection(values.size());  // might produce a non-empty collection
             coll.addAll(values);
             if (coll.size() > 0) {
                 // only add if non-zero size to maintain class state
-                decorated().put(key, coll);
+                getMap().put(key, coll);
                 result = true;  // map definitely changed
             }
         } else {
@@ -367,11 +366,12 @@ public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object> impleme
      * @param key  the key to get an iterator for
      * @return the iterator of the collection at the key, empty iterator if key not in map
      */
-    public Iterator<V> iterator(Object key) {
+    public Iterator iterator(Object key) {
         if (!containsKey(key)) {
-            return EmptyIterator.<V>getInstance();
+            return EmptyIterator.INSTANCE;
+        } else {
+            return new ValuesIterator(key);
         }
-        return new ValuesIterator(key);
     }
 
     /**
@@ -381,8 +381,10 @@ public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object> impleme
      */
     public int totalSize() {
         int total = 0;
-        for (Object v : decorated().values()) {
-            total += CollectionUtils.size(v);
+        Collection values = getMap().values();
+        for (Iterator it = values.iterator(); it.hasNext();) {
+            Collection coll = (Collection) it.next();
+            total += coll.size();
         }
         return total;
     }
@@ -397,18 +399,18 @@ public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object> impleme
      * @param size  the collection size that is about to be added
      * @return the new collection
      */
-    protected Collection<V> createCollection(int size) {
-        return collectionFactory.create();
+    protected Collection createCollection(int size) {
+        return (Collection) collectionFactory.create();
     }
 
     //-----------------------------------------------------------------------
     /**
      * Inner class that provides the values view.
      */
-    private class Values extends AbstractCollection<V> {
-        public Iterator<V> iterator() {
-            final IteratorChain<V> chain = new IteratorChain<V>();
-            for (Iterator<K> it = keySet().iterator(); it.hasNext();) {
+    private class Values extends AbstractCollection {
+        public Iterator iterator() {
+            final IteratorChain chain = new IteratorChain();
+            for (Iterator it = keySet().iterator(); it.hasNext();) {
                 chain.addIterator(new ValuesIterator(it.next()));
             }
             return chain;
@@ -426,10 +428,10 @@ public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object> impleme
     /**
      * Inner class that provides the values iterator.
      */
-    private class ValuesIterator implements Iterator<V> {
+    private class ValuesIterator implements Iterator {
         private final Object key;
-        private final Collection<V> values;
-        private final Iterator<V> iterator;
+        private final Collection values;
+        private final Iterator iterator;
 
         public ValuesIterator(Object key) {
             this.key = key;
@@ -448,7 +450,7 @@ public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object> impleme
             return iterator.hasNext();
         }
 
-        public V next() {
+        public Object next() {
             return iterator.next();
         }
     }
@@ -456,18 +458,14 @@ public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object> impleme
     /**
      * Inner class that provides a simple reflection factory.
      */
-    private static class ReflectionFactory<T extends Collection<?>> implements Factory<T>, Serializable {
-
-        /** Serialization version */
-        private static final long serialVersionUID = 2986114157496788874L;
-
-        private final Class<T> clazz;
+    private static class ReflectionFactory implements Factory, Serializable {
+        private final Class clazz;
 
-        public ReflectionFactory(Class<T> clazz) {
+        public ReflectionFactory(Class clazz) {
             this.clazz = clazz;
         }
 
-        public T create() {
+        public Object create() {
             try {
                 return clazz.newInstance();
             } catch (Exception ex) {
