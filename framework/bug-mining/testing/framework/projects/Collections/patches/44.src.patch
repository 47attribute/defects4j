diff --git a/src/java/org/apache/commons/collections/map/LRUMap.java b/src/java/org/apache/commons/collections/map/LRUMap.java
index 6e3fbf0b..58126653 100644
--- a/src/java/org/apache/commons/collections/map/LRUMap.java
+++ b/src/java/org/apache/commons/collections/map/LRUMap.java
@@ -23,7 +23,6 @@ import java.io.Serializable;
 import java.util.Map;
 
 import org.apache.commons.collections.BoundedMap;
-import org.apache.commons.collections.MapIterator;
 
 /**
  * A <code>Map</code> implementation with a fixed maximum size which removes
@@ -34,13 +33,6 @@ import org.apache.commons.collections.MapIterator;
  * change the order. Queries such as containsKey and containsValue or access
  * via views also do not change the order.
  * <p>
- * A somewhat subtle ramification of the least recently used
- * algorithm is that calls to {@link #get(Object)} stand a very good chance
- * of modifying the map's iteration order and thus invalidating any
- * iterators currently in use.  It is therefore suggested that iterations
- * over an {@link LRUMap} instance access entry values only through a
- * {@link MapIterator} or {@link #entrySet()} iterator.
- * <p>
  * The map implements <code>OrderedMap</code> and entries may be queried using
  * the bidirectional <code>OrderedMapIterator</code>. The order returned is
  * least recently used to most recently used. Iterators from map views can
