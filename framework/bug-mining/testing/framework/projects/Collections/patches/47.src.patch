diff --git a/src/java/org/apache/commons/collections/map/CaseInsensitiveMap.java b/src/java/org/apache/commons/collections/map/CaseInsensitiveMap.java
index fdb10350..e21415bc 100644
--- a/src/java/org/apache/commons/collections/map/CaseInsensitiveMap.java
+++ b/src/java/org/apache/commons/collections/map/CaseInsensitiveMap.java
@@ -46,11 +46,6 @@ import java.util.Map;
  * returns <code>"Four".</code>  The <code>Set</code> returned by <code>keySet()</code>
  * equals <code>{"one", "two", null}.</code>
  * <p>
- * <strong>This map will violate the detail of various Map and map view contracts.</note>
- * As a general rule, don't compare this map to other maps. In particular, you can't
- * use decorators like {@link ListOrderedMap} on it, which silently assume that these
- * contracts are fulfilled.
- * <p>
  * <strong>Note that CaseInsensitiveMap is not synchronized and is not thread-safe.</strong>
  * If you wish to use this map from multiple threads concurrently, you must use
  * appropriate synchronization. The simplest approach is to wrap this map
diff --git a/src/java/org/apache/commons/collections/map/IdentityMap.java b/src/java/org/apache/commons/collections/map/IdentityMap.java
index c2be2e25..62793cdc 100644
--- a/src/java/org/apache/commons/collections/map/IdentityMap.java
+++ b/src/java/org/apache/commons/collections/map/IdentityMap.java
@@ -26,10 +26,8 @@ import java.util.Map;
  * A <code>Map</code> implementation that matches keys and values based
  * on <code>==</code> not <code>equals()</code>.
  * <p>
- * <strong>This map will violate the detail of various Map and map view contracts.</note>
- * As a general rule, don't compare this map to other maps. In particular, you can't
- * use decorators like {@link ListOrderedMap} on it, which silently assume that these
- * contracts are fulfilled.
+ * This map will violate the detail of various Map and map view contracts.
+ * As a general rule, don't compare this map to other maps.
  * <p>
  * <strong>Note that IdentityMap is not synchronized and is not thread-safe.</strong>
  * If you wish to use this map from multiple threads concurrently, you must use
diff --git a/src/java/org/apache/commons/collections/map/ListOrderedMap.java b/src/java/org/apache/commons/collections/map/ListOrderedMap.java
index 0ac82119..4d92ceaf 100644
--- a/src/java/org/apache/commons/collections/map/ListOrderedMap.java
+++ b/src/java/org/apache/commons/collections/map/ListOrderedMap.java
@@ -58,17 +58,6 @@ import org.apache.commons.collections.list.UnmodifiableList;
  * using {@link java.util.Collections#synchronizedMap(Map)}. This class may throw 
  * exceptions when accessed by concurrent threads without synchronization.
  * <p>
- * <strong>Note that ListOrderedMap doesn't work with {@link IdentityMap},
- * {@link CaseInsensitiveMap}, or similar maps that violate the general
- * contract of {@link java.util.Map}.</strong> The <code>ListOrderedMap</code>
- * (or, more precisely, the underlying <code>List</code>) is relying on
- * {@link Object#java.lang.equals(Object) equals()}. This is fine, as long as the
- * decorated <code>Map</code> is also based on {@link Object#equals(Object) equals()},
- * and {@link Object#hashCode() hashCode()}, which {@link IdentityMap}, and
- * {@link CaseInsensitiveMap} don't: The former uses <code>==</code>, and
- * the latter uses {@link Object#equals(Object) equals()} on a lowercased
- * key.
- * <p>
  * This class is Serializable from Commons Collections 3.1.
  *
  * @since Commons Collections 3.0
