diff --git a/src/java/org/apache/commons/collections/comparators/ComparableComparator.java b/src/java/org/apache/commons/collections/comparators/ComparableComparator.java
index 693ba378..4ab30cd8 100644
--- a/src/java/org/apache/commons/collections/comparators/ComparableComparator.java
+++ b/src/java/org/apache/commons/collections/comparators/ComparableComparator.java
@@ -46,7 +46,6 @@ public class ComparableComparator<E extends Comparable<? super E>> implements Co
     private static final long serialVersionUID=-291439688585137865L;
 
     /** The singleton instance. */
-    @SuppressWarnings("rawtypes")
     public static final ComparableComparator<?> INSTANCE = new ComparableComparator();
 
     //-----------------------------------------------------------------------
diff --git a/src/java/org/apache/commons/collections/iterators/CollatingIterator.java b/src/java/org/apache/commons/collections/iterators/CollatingIterator.java
index f2e00e57..eca54c2e 100644
--- a/src/java/org/apache/commons/collections/iterators/CollatingIterator.java
+++ b/src/java/org/apache/commons/collections/iterators/CollatingIterator.java
@@ -26,7 +26,6 @@ import java.util.NoSuchElementException;
 
 import org.apache.commons.collections.list.UnmodifiableList;
 
-
 /**
  * Provides an ordered iteration over the elements contained in a collection of
  * ordered Iterators.
@@ -64,10 +63,8 @@ public class CollatingIterator<E> implements Iterator<E> {
     // Constructors
     // ----------------------------------------------------------------------
     /**
-     * Constructs a new <code>CollatingIterator</code>. A comparator must be
-     * set by calling {@link #setComparator(Comparator)} before invoking
-     * {@link #hasNext()}, or {@link #next()} for the first time. Child
-     * iterators will have to be manually added using the
+     * Constructs a new <code>CollatingIterator</code>. Natural sort order will
+     * be used, and child iterators will have to be manually added using the
      * {@link #addIterator(Iterator)} method.
      */
     public CollatingIterator() {
@@ -79,9 +76,8 @@ public class CollatingIterator<E> implements Iterator<E> {
      * specified comparator for ordering. Child iterators will have to be
      * manually added using the {@link #addIterator(Iterator)} method.
      * 
-     * @param comp the comparator to use to sort; must not be null,
-     *   unless you'll be invoking {@link #setComparator(Comparator)}
-     *   later on.
+     * @param comp the comparator to use to sort, or null to use natural sort
+     * order
      */
     public CollatingIterator(final Comparator<? super E> comp) {
         this(comp, 2);
@@ -93,9 +89,8 @@ public class CollatingIterator<E> implements Iterator<E> {
      * capacity. Child iterators will have to be manually added using the
      * {@link #addIterator(Iterator)} method.
      * 
-     * @param comp the comparator to use to sort; must not be null,
-     *   unless you'll be invoking {@link #setComparator(Comparator)}
-     *   later on.
+     * @param comp the comparator to use to sort, or null to use natural sort
+     * order
      * @param initIterCapacity the initial capacity for the internal list of
      * child iterators
      */
@@ -109,9 +104,8 @@ public class CollatingIterator<E> implements Iterator<E> {
      * specified comparator to provide ordered iteration over the two given
      * iterators.
      * 
-     * @param comp the comparator to use to sort; must not be null,
-     *   unless you'll be invoking {@link #setComparator(Comparator)}
-     *   later on.
+     * @param comp the comparator to use to sort, or null to use natural sort
+     * order
      * @param a the first child ordered iterator
      * @param b the second child ordered iterator
      * @throws NullPointerException if either iterator is null
@@ -127,9 +121,8 @@ public class CollatingIterator<E> implements Iterator<E> {
      * specified comparator to provide ordered iteration over the array of
      * iterators.
      * 
-     * @param comp the comparator to use to sort; must not be null,
-     *   unless you'll be invoking {@link #setComparator(Comparator)}
-     *   later on.
+     * @param comp the comparator to use to sort, or null to use natural sort
+     * order
      * @param iterators the array of iterators
      * @throws NullPointerException if iterators array is or contains null
      */
@@ -145,9 +138,8 @@ public class CollatingIterator<E> implements Iterator<E> {
      * specified comparator to provide ordered iteration over the collection of
      * iterators.
      * 
-     * @param comp the comparator to use to sort; must not be null,
-     *   unless you'll be invoking {@link #setComparator(Comparator)}
-     *   later on.
+     * @param comp the comparator to use to sort, or null to use natural sort
+     * order
      * @param iterators the collection of iterators
      * @throws NullPointerException if the iterators collection is or contains
      * null
@@ -212,11 +204,7 @@ public class CollatingIterator<E> implements Iterator<E> {
     }
 
     /**
-     * Sets the {@link Comparator} by which collation occurs. If you
-     * would like to use the natural sort order (or, in other words,
-     * if the elements in the iterators are implementing the
-     * {@link java.lang.Comparable} interface), then use the
-     * {@link org.apache.commons.collections.comparators.ComparableComparator}.
+     * Sets the {@link Comparator} by which collation occurs.
      * 
      * @throws IllegalStateException if iteration has started
      */
@@ -361,9 +349,6 @@ public class CollatingIterator<E> implements Iterator<E> {
                     leastObject = values.get(i);
                 } else {
                     E curObject = values.get(i);
-                    if (comparator == null) {
-                        throw new NullPointerException("You must invoke setComparator() to set a compator first.");
-                    }
                     if (comparator.compare(curObject, leastObject) < 0) {
                         leastObject = curObject;
                         leastIndex = i;
