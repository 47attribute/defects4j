diff --git a/src/java/org/apache/commons/collections/map/AbstractHashedMap.java b/src/java/org/apache/commons/collections/map/AbstractHashedMap.java
index 0f10a79d..51da6425 100644
--- a/src/java/org/apache/commons/collections/map/AbstractHashedMap.java
+++ b/src/java/org/apache/commons/collections/map/AbstractHashedMap.java
@@ -124,7 +124,7 @@ public class AbstractHashedMap<K, V> extends AbstractMap<K, V> implements Iterab
      * default load factor.
      *
      * @param initialCapacity  the initial capacity
-     * @throws IllegalArgumentException if the initial capacity is negative
+     * @throws IllegalArgumentException if the initial capacity is less than one
      */
     protected AbstractHashedMap(int initialCapacity) {
         this(initialCapacity, DEFAULT_LOAD_FACTOR);
@@ -136,14 +136,14 @@ public class AbstractHashedMap<K, V> extends AbstractMap<K, V> implements Iterab
      *
      * @param initialCapacity  the initial capacity
      * @param loadFactor  the load factor
-     * @throws IlleagalArgumentException if the initial capacity is negative
-     * @throws IllegalArgumentException if the load factor is less than or equal to zero 
+     * @throws IllegalArgumentException if the initial capacity is less than one
+     * @throws IllegalArgumentException if the load factor is less than or equal to zero
      */
     @SuppressWarnings("unchecked")
     protected AbstractHashedMap(int initialCapacity, float loadFactor) {
         super();
-        if (initialCapacity < 0) {
-            throw new IllegalArgumentException("Initial capacity must be a non negative number");  
+        if (initialCapacity < 1) {
+            throw new IllegalArgumentException("Initial capacity must be greater than 0");
         }
         if (loadFactor <= 0.0f || Float.isNaN(loadFactor)) {
             throw new IllegalArgumentException("Load factor must be greater than 0");
diff --git a/src/java/org/apache/commons/collections/map/AbstractLinkedMap.java b/src/java/org/apache/commons/collections/map/AbstractLinkedMap.java
index b928e06e..c27906bf 100644
--- a/src/java/org/apache/commons/collections/map/AbstractLinkedMap.java
+++ b/src/java/org/apache/commons/collections/map/AbstractLinkedMap.java
@@ -89,7 +89,7 @@ public abstract class AbstractLinkedMap<K, V> extends AbstractHashedMap<K, V> im
      * Constructs a new, empty map with the specified initial capacity. 
      *
      * @param initialCapacity  the initial capacity
-     * @throws IllegalArgumentException if the initial capacity is negative
+     * @throws IllegalArgumentException if the initial capacity is less than one
      */
     protected AbstractLinkedMap(int initialCapacity) {
         super(initialCapacity);
@@ -101,7 +101,7 @@ public abstract class AbstractLinkedMap<K, V> extends AbstractHashedMap<K, V> im
      *
      * @param initialCapacity  the initial capacity
      * @param loadFactor  the load factor
-     * @throws IllegalArgumentException if the initial capacity is negative
+     * @throws IllegalArgumentException if the initial capacity is less than one
      * @throws IllegalArgumentException if the load factor is less than zero
      */
     protected AbstractLinkedMap(int initialCapacity, float loadFactor) {
diff --git a/src/java/org/apache/commons/collections/map/CaseInsensitiveMap.java b/src/java/org/apache/commons/collections/map/CaseInsensitiveMap.java
index ab0eaab1..fdb10350 100644
--- a/src/java/org/apache/commons/collections/map/CaseInsensitiveMap.java
+++ b/src/java/org/apache/commons/collections/map/CaseInsensitiveMap.java
@@ -78,7 +78,7 @@ public class CaseInsensitiveMap<K, V> extends AbstractHashedMap<K, V> implements
      * Constructs a new, empty map with the specified initial capacity. 
      *
      * @param initialCapacity  the initial capacity
-     * @throws IllegalArgumentException if the initial capacity is negative
+     * @throws IllegalArgumentException if the initial capacity is less than one
      */
     public CaseInsensitiveMap(int initialCapacity) {
         super(initialCapacity);
@@ -90,7 +90,7 @@ public class CaseInsensitiveMap<K, V> extends AbstractHashedMap<K, V> implements
      *
      * @param initialCapacity  the initial capacity
      * @param loadFactor  the load factor
-     * @throws IllegalArgumentException if the initial capacity is negative
+     * @throws IllegalArgumentException if the initial capacity is less than one
      * @throws IllegalArgumentException if the load factor is less than zero
      */
     public CaseInsensitiveMap(int initialCapacity, float loadFactor) {
diff --git a/src/java/org/apache/commons/collections/map/HashedMap.java b/src/java/org/apache/commons/collections/map/HashedMap.java
index 56baa689..a966fd73 100644
--- a/src/java/org/apache/commons/collections/map/HashedMap.java
+++ b/src/java/org/apache/commons/collections/map/HashedMap.java
@@ -58,7 +58,7 @@ public class HashedMap<K, V>
      * Constructs a new, empty map with the specified initial capacity.
      *
      * @param initialCapacity  the initial capacity
-     * @throws IllegalArgumentException if the initial capacity is negative
+     * @throws IllegalArgumentException if the initial capacity is less than one
      */
     public HashedMap(int initialCapacity) {
         super(initialCapacity);
@@ -70,7 +70,7 @@ public class HashedMap<K, V>
      *
      * @param initialCapacity  the initial capacity
      * @param loadFactor  the load factor
-     * @throws IllegalArgumentException if the initial capacity is negative
+     * @throws IllegalArgumentException if the initial capacity is less than one
      * @throws IllegalArgumentException if the load factor is less than zero
      */
     public HashedMap(int initialCapacity, float loadFactor) {
diff --git a/src/java/org/apache/commons/collections/map/IdentityMap.java b/src/java/org/apache/commons/collections/map/IdentityMap.java
index cd908f88..c2be2e25 100644
--- a/src/java/org/apache/commons/collections/map/IdentityMap.java
+++ b/src/java/org/apache/commons/collections/map/IdentityMap.java
@@ -60,7 +60,7 @@ public class IdentityMap<K, V>
      * Constructs a new, empty map with the specified initial capacity.
      *
      * @param initialCapacity  the initial capacity
-     * @throws IllegalArgumentException if the initial capacity is negative
+     * @throws IllegalArgumentException if the initial capacity is less than one
      */
     public IdentityMap(int initialCapacity) {
         super(initialCapacity);
@@ -72,7 +72,7 @@ public class IdentityMap<K, V>
      *
      * @param initialCapacity  the initial capacity
      * @param loadFactor  the load factor
-     * @throws IllegalArgumentException if the initial capacity is negative
+     * @throws IllegalArgumentException if the initial capacity is less than one
      * @throws IllegalArgumentException if the load factor is less than zero
      */
     public IdentityMap(int initialCapacity, float loadFactor) {
diff --git a/src/java/org/apache/commons/collections/map/LinkedMap.java b/src/java/org/apache/commons/collections/map/LinkedMap.java
index c1ce5aca..981c037b 100644
--- a/src/java/org/apache/commons/collections/map/LinkedMap.java
+++ b/src/java/org/apache/commons/collections/map/LinkedMap.java
@@ -78,7 +78,7 @@ public class LinkedMap<K, V> extends AbstractLinkedMap<K, V> implements Serializ
      * Constructs a new, empty map with the specified initial capacity. 
      *
      * @param initialCapacity  the initial capacity
-     * @throws IllegalArgumentException if the initial capacity is negative
+     * @throws IllegalArgumentException if the initial capacity is less than one
      */
     public LinkedMap(int initialCapacity) {
         super(initialCapacity);
@@ -90,7 +90,7 @@ public class LinkedMap<K, V> extends AbstractLinkedMap<K, V> implements Serializ
      *
      * @param initialCapacity  the initial capacity
      * @param loadFactor  the load factor
-     * @throws IllegalArgumentException if the initial capacity is negative
+     * @throws IllegalArgumentException if the initial capacity is less than one
      * @throws IllegalArgumentException if the load factor is less than zero
      */
     public LinkedMap(int initialCapacity, float loadFactor) {
