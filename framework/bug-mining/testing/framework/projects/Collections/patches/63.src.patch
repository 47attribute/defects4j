diff --git a/src/main/java/org/apache/commons/collections/functors/ChainedClosure.java b/src/main/java/org/apache/commons/collections/functors/ChainedClosure.java
index ec43ee89..063ac253 100644
--- a/src/main/java/org/apache/commons/collections/functors/ChainedClosure.java
+++ b/src/main/java/org/apache/commons/collections/functors/ChainedClosure.java
@@ -50,7 +50,8 @@ public class ChainedClosure<E> implements Closure<E>, Serializable {
         if (closures.length == 0) {
             return NOPClosure.<E>nopClosure();
         }
-        return new ChainedClosure<E>(FunctorUtils.copy(closures));
+        closures = FunctorUtils.copy(closures);
+        return new ChainedClosure<E>(closures);
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/collections/functors/ChainedTransformer.java b/src/main/java/org/apache/commons/collections/functors/ChainedTransformer.java
index 40e11190..541ef41b 100644
--- a/src/main/java/org/apache/commons/collections/functors/ChainedTransformer.java
+++ b/src/main/java/org/apache/commons/collections/functors/ChainedTransformer.java
@@ -53,7 +53,8 @@ public class ChainedTransformer<T> implements Transformer<T, T>, Serializable {
         if (transformers.length == 0) {
             return NOPTransformer.<T>nopTransformer();
         }
-        return new ChainedTransformer<T>(FunctorUtils.copy(transformers));
+        transformers = FunctorUtils.copy(transformers);
+        return new ChainedTransformer<T>(transformers);
     }
     
     /**
diff --git a/src/main/java/org/apache/commons/collections/functors/NonePredicate.java b/src/main/java/org/apache/commons/collections/functors/NonePredicate.java
index d2065bbd..b240ebab 100644
--- a/src/main/java/org/apache/commons/collections/functors/NonePredicate.java
+++ b/src/main/java/org/apache/commons/collections/functors/NonePredicate.java
@@ -58,7 +58,8 @@ public final class NonePredicate<T> implements Predicate<T>, PredicateDecorator<
         if (predicates.length == 0) {
             return TruePredicate.<T>truePredicate();
         }
-        return new NonePredicate<T>(FunctorUtils.copy(predicates));
+        predicates = FunctorUtils.copy(predicates);
+        return new NonePredicate<T>(predicates);
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/collections/functors/OnePredicate.java b/src/main/java/org/apache/commons/collections/functors/OnePredicate.java
index 5c564540..28d90b9b 100644
--- a/src/main/java/org/apache/commons/collections/functors/OnePredicate.java
+++ b/src/main/java/org/apache/commons/collections/functors/OnePredicate.java
@@ -63,7 +63,8 @@ public final class OnePredicate<T> implements Predicate<T>, PredicateDecorator<T
         if (predicates.length == 1) {
             return (Predicate<T>) predicates[0];
         }
-        return new OnePredicate<T>(FunctorUtils.copy(predicates));
+        predicates = FunctorUtils.copy(predicates);
+        return new OnePredicate<T>(predicates);
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/collections/functors/SwitchClosure.java b/src/main/java/org/apache/commons/collections/functors/SwitchClosure.java
index 6b7d6df1..f01f67cd 100644
--- a/src/main/java/org/apache/commons/collections/functors/SwitchClosure.java
+++ b/src/main/java/org/apache/commons/collections/functors/SwitchClosure.java
@@ -63,7 +63,9 @@ public class SwitchClosure<E> implements Closure<E>, Serializable {
         if (predicates.length == 0) {
             return (Closure<E>) (defaultClosure == null ? NOPClosure.<E>nopClosure(): defaultClosure);
         }
-        return new SwitchClosure<E>(FunctorUtils.copy(predicates), FunctorUtils.copy(closures), defaultClosure);
+        predicates = FunctorUtils.copy(predicates);
+        closures = FunctorUtils.copy(closures);
+        return new SwitchClosure<E>(predicates, closures, defaultClosure);
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/collections/functors/SwitchTransformer.java b/src/main/java/org/apache/commons/collections/functors/SwitchTransformer.java
index 37031f67..e4548e86 100644
--- a/src/main/java/org/apache/commons/collections/functors/SwitchTransformer.java
+++ b/src/main/java/org/apache/commons/collections/functors/SwitchTransformer.java
@@ -65,9 +65,9 @@ public class SwitchTransformer<I, O> implements Transformer<I, O>, Serializable
         if (predicates.length == 0) {
             return (Transformer<I, O>) (defaultTransformer == null ? ConstantTransformer.<I, O>nullTransformer() : defaultTransformer);
         }
-        return new SwitchTransformer<I, O>(FunctorUtils.copy(predicates),
-                                           FunctorUtils.copy(transformers),
-                                           defaultTransformer);
+        predicates = FunctorUtils.copy(predicates);
+        transformers = FunctorUtils.copy(transformers);
+        return new SwitchTransformer<I, O>(predicates, transformers, defaultTransformer);
     }
 
     /**
