diff --git a/src/test/java/org/apache/commons/collections/list/SetUniqueListTest.java b/src/test/java/org/apache/commons/collections/list/SetUniqueListTest.java
index f0a51fa7..38f5d4dc 100644
--- a/src/test/java/org/apache/commons/collections/list/SetUniqueListTest.java
+++ b/src/test/java/org/apache/commons/collections/list/SetUniqueListTest.java
@@ -523,79 +523,6 @@ public class SetUniqueListTest<E> extends AbstractListTest<E> {
         assertFalse(subUniqueList.contains("World")); // fails
     }
 
-    @SuppressWarnings("unchecked")
-	public void testRetainAll() {
-    	List<E> list = new ArrayList<E>(10);
-    	SetUniqueList<E> uniqueList = SetUniqueList.setUniqueList(list);
-    	for (int i = 0; i < 10; ++i) {
-    		uniqueList.add((E)Integer.valueOf(i));
-    	}
-    	
-    	Collection<E> retained = new ArrayList<E>(5);
-    	for (int i = 0; i < 5; ++i) {
-    		retained.add((E)Integer.valueOf(i * 2));
-    	}
-    	
-    	assertTrue(uniqueList.retainAll(retained));
-    	assertEquals(5, uniqueList.size());
-    	assertTrue(uniqueList.contains(Integer.valueOf(0)));
-    	assertTrue(uniqueList.contains(Integer.valueOf(2)));
-    	assertTrue(uniqueList.contains(Integer.valueOf(4)));
-    	assertTrue(uniqueList.contains(Integer.valueOf(6)));
-    	assertTrue(uniqueList.contains(Integer.valueOf(8)));
-    }
-
-    @SuppressWarnings("unchecked")
-	public void testRetainAllWithInitialList() {
-    	// initialized with empty list
-    	List<E> list = new ArrayList<E>(10);
-    	for (int i = 0; i < 5; ++i) {
-    		list.add((E)Integer.valueOf(i));
-    	}
-    	SetUniqueList<E> uniqueList = SetUniqueList.setUniqueList(list);
-    	for (int i = 5; i < 10; ++i) {
-    		uniqueList.add((E)Integer.valueOf(i));
-    	}
-    	
-    	Collection<E> retained = new ArrayList<E>(5);
-    	for (int i = 0; i < 5; ++i) {
-    		retained.add((E)Integer.valueOf(i * 2));
-    	}
-    	
-    	assertTrue(uniqueList.retainAll(retained));
-    	assertEquals(5, uniqueList.size());
-    	assertTrue(uniqueList.contains(Integer.valueOf(0)));
-    	assertTrue(uniqueList.contains(Integer.valueOf(2)));
-    	assertTrue(uniqueList.contains(Integer.valueOf(4)));
-    	assertTrue(uniqueList.contains(Integer.valueOf(6)));
-    	assertTrue(uniqueList.contains(Integer.valueOf(8)));
-    }
-    
-    /*
-     * test case for https://issues.apache.org/jira/browse/COLLECTIONS-427
-     */
-    public void testRetainAllCollections427() {
-        int size = 50000;
-        ArrayList<Integer> list = new ArrayList<Integer>();
-        for (int i = 0; i < size; i++) {
-            list.add(i);
-        }
-        SetUniqueList<Integer> uniqueList = SetUniqueList.setUniqueList(list);
-        ArrayList<Integer> toRetain = new ArrayList<Integer>();
-        for (int i = size; i < 2*size; i++) {
-            toRetain.add(i);
-        }
-
-        long start = System.currentTimeMillis();
-        uniqueList.retainAll(toRetain);
-        long stop = System.currentTimeMillis();
-        
-        // make sure retainAll completes under 5 seconds
-        // TODO if test is migrated to JUnit 4, add a Timeout rule.
-        // http://kentbeck.github.com/junit/javadoc/latest/org/junit/rules/Timeout.html
-        assertTrue((stop - start) < 5000);
-    }
-    
     @SuppressWarnings("serial")
     class SetUniqueList307 extends SetUniqueList<E> {
         public SetUniqueList307(List<E> list, Set<E> set) {
