diff --git a/src/main/java/org/apache/commons/collections/set/ListOrderedSet.java b/src/main/java/org/apache/commons/collections/set/ListOrderedSet.java
index 48cab8ef..8e284cfe 100644
--- a/src/main/java/org/apache/commons/collections/set/ListOrderedSet.java
+++ b/src/main/java/org/apache/commons/collections/set/ListOrderedSet.java
@@ -29,30 +29,27 @@ import org.apache.commons.collections.iterators.AbstractIteratorDecorator;
 import org.apache.commons.collections.list.UnmodifiableList;
 
 /**
- * Decorates another <code>Set</code> to ensure that the order of addition is
- * retained and used by the iterator.
+ * Decorates another <code>Set</code> to ensure that the order of addition
+ * is retained and used by the iterator.
  * <p>
  * If an object is added to the set for a second time, it will remain in the
- * original position in the iteration. The order can be observed from the set
- * via the iterator or toArray methods.
+ * original position in the iteration.
+ * The order can be observed from the set via the iterator or toArray methods.
  * <p>
  * The ListOrderedSet also has various useful direct methods. These include many
- * from <code>List</code>, such as <code>get(int)</code>,
- * <code>remove(int)</code> and <code>indexOf(int)</code>. An unmodifiable
- * <code>List</code> view of the set can be obtained via <code>asList()</code>.
+ * from <code>List</code>, such as <code>get(int)</code>, <code>remove(int)</code>
+ * and <code>indexOf(int)</code>. An unmodifiable <code>List</code> view of
+ * the set can be obtained via <code>asList()</code>.
  * <p>
  * This class cannot implement the <code>List</code> interface directly as
- * various interface methods (notably equals/hashCode) are incompatible with a
- * set.
+ * various interface methods (notably equals/hashCode) are incompatible with a set.
  * <p>
  * This class is Serializable from Commons Collections 3.1.
- * 
+ *
  * @since 3.0
  * @version $Id$
  */
-public class ListOrderedSet<E>
-    extends AbstractSerializableSetDecorator<E>
-    implements Set<E> {
+public class ListOrderedSet<E> extends AbstractSerializableSetDecorator<E> implements Set<E> {
 
     /** Serialization version */
     private static final long serialVersionUID = -228664372470420141L;
@@ -61,14 +58,13 @@ public class ListOrderedSet<E>
     protected final List<E> setOrder;
 
     /**
-     * Factory method to create an ordered set specifying the list and set to
-     * use.
+     * Factory method to create an ordered set specifying the list and set to use.
      * <p>
      * The list and set must both be empty.
-     * 
+     *
      * @param <E> the element type
-     * @param set the set to decorate, must be empty and not null
-     * @param list the list to decorate, must be empty and not null
+     * @param set  the set to decorate, must be empty and not null
+     * @param list  the list to decorate, must be empty and not null
      * @return a new ordered set
      * @throws IllegalArgumentException if set or list is null
      * @throws IllegalArgumentException if either the set or list is not empty
@@ -91,9 +87,9 @@ public class ListOrderedSet<E>
      * Factory method to create an ordered set.
      * <p>
      * An <code>ArrayList</code> is used to retain order.
-     * 
+     *
      * @param <E> the element type
-     * @param set the set to decorate, must not be null
+     * @param set  the set to decorate, must not be null
      * @return a new ordered set
      * @throws IllegalArgumentException if set is null
      */
@@ -102,16 +98,15 @@ public class ListOrderedSet<E>
     }
 
     /**
-     * Factory method to create an ordered set using the supplied list to retain
-     * order.
+     * Factory method to create an ordered set using the supplied list to retain order.
      * <p>
      * A <code>HashSet</code> is used for the set behaviour.
      * <p>
      * NOTE: If the list contains duplicates, the duplicates are removed,
      * altering the specified list.
-     * 
+     *
      * @param <E> the element type
-     * @param list the list to decorate, must not be null
+     * @param list  the list to decorate, must not be null
      * @return a new ordered set
      * @throws IllegalArgumentException if list is null
      */
@@ -125,11 +120,11 @@ public class ListOrderedSet<E>
         return new ListOrderedSet<E>(set, list);
     }
 
-    // -----------------------------------------------------------------------
+    //-----------------------------------------------------------------------
     /**
-     * Constructs a new empty <code>ListOrderedSet</code> using a
-     * <code>HashSet</code> and an <code>ArrayList</code> internally.
-     * 
+     * Constructs a new empty <code>ListOrderedSet</code> using
+     * a <code>HashSet</code> and an <code>ArrayList</code> internally.
+     *
      * @since 3.1
      */
     public ListOrderedSet() {
@@ -139,8 +134,8 @@ public class ListOrderedSet<E>
 
     /**
      * Constructor that wraps (not copies).
-     * 
-     * @param set the set to decorate, must not be null
+     *
+     * @param set  the set to decorate, must not be null
      * @throws IllegalArgumentException if set is null
      */
     protected ListOrderedSet(Set<E> set) {
@@ -149,13 +144,12 @@ public class ListOrderedSet<E>
     }
 
     /**
-     * Constructor that wraps (not copies) the Set and specifies the list to
-     * use.
+     * Constructor that wraps (not copies) the Set and specifies the list to use.
      * <p>
      * The set and list must both be correctly initialised to the same elements.
-     * 
-     * @param set the set to decorate, must not be null
-     * @param list the list to decorate, must not be null
+     *
+     * @param set  the set to decorate, must not be null
+     * @param list  the list to decorate, must not be null
      * @throws IllegalArgumentException if set or list is null
      */
     protected ListOrderedSet(Set<E> set, List<E> list) {
@@ -166,17 +160,17 @@ public class ListOrderedSet<E>
         setOrder = list;
     }
 
-    // -----------------------------------------------------------------------
+    //-----------------------------------------------------------------------
     /**
      * Gets an unmodifiable view of the order of the Set.
-     * 
+     *
      * @return an unmodifiable list view
      */
     public List<E> asList() {
         return UnmodifiableList.unmodifiableList(setOrder);
     }
 
-    // -----------------------------------------------------------------------
+    //-----------------------------------------------------------------------
     @Override
     public void clear() {
         collection.clear();
@@ -226,26 +220,20 @@ public class ListOrderedSet<E>
 
     @Override
     public boolean retainAll(Collection<?> coll) {
-        Set<Object> collectionRetainAll = new HashSet<Object>();
-        for (Iterator<?> it = coll.iterator(); it.hasNext();) {
-            Object next = it.next();
-            if (collection.contains(next)) {
-                collectionRetainAll.add(next);
-            }
-        }
-        if (collectionRetainAll.size() == collection.size()) {
+        boolean result = collection.retainAll(coll);
+        if (result == false) {
             return false;
         }
-        if (collectionRetainAll.size() == 0) {
-            clear();
+        if (collection.size() == 0) {
+            setOrder.clear();
         } else {
-            for (Iterator<E> it = iterator(); it.hasNext();) {
-                if (!collectionRetainAll.contains(it.next())) {
+            for (Iterator<E> it = setOrder.iterator(); it.hasNext();) {
+                if (!collection.contains(it.next())) {
                     it.remove();
                 }
             }
         }
-        return true;
+        return result;
     }
 
     @Override
@@ -258,13 +246,13 @@ public class ListOrderedSet<E>
         return setOrder.toArray(a);
     }
 
-    // -----------------------------------------------------------------------
+    //-----------------------------------------------------------------------
     // Additional methods that comply to the {@link List} interface
-    // -----------------------------------------------------------------------
-
+    //-----------------------------------------------------------------------
+    
     /**
      * Returns the element at the specified position in this ordered set.
-     * 
+     *
      * @param index the position of the element in the ordered {@link Set}.
      * @return the element at position {@code index}
      * @see List#get(int)
@@ -274,12 +262,11 @@ public class ListOrderedSet<E>
     }
 
     /**
-     * Returns the index of the first occurrence of the specified element in
-     * ordered set.
+     * Returns the index of the first occurrence of the specified element in ordered set.
      * 
      * @param object the element to search for
-     * @return the index of the first occurrence of the object, or {@code -1} if
-     *         this ordered set does not contain this object
+     * @return the index of the first occurrence of the object, or {@code -1} if this
+     * ordered set does not contain this object
      * @see List#indexOf(Object)
      */
     public int indexOf(Object object) {
@@ -287,10 +274,10 @@ public class ListOrderedSet<E>
     }
 
     /**
-     * Inserts the specified element at the specified position if it is not yet
-     * contained in this ordered set (optional operation). Shifts the element
-     * currently at this position and any subsequent elements to the right.
-     * 
+     * Inserts the specified element at the specified position if it is not yet contained in this
+     * ordered set (optional operation). Shifts the element currently at this position and any
+     * subsequent elements to the right.
+     *
      * @param index the index at which the element is to be inserted
      * @param object the element to be inserted
      * @see List#add(int, Object)
@@ -303,10 +290,9 @@ public class ListOrderedSet<E>
     }
 
     /**
-     * Inserts all elements in the specified collection not yet contained in the
-     * ordered set at the specified position (optional operation). Shifts the
-     * element currently at the position and all subsequent elements to the
-     * right.
+     * Inserts all elements in the specified collection not yet contained in the ordered set at the specified
+     * position (optional operation). Shifts the element currently at the position and all subsequent
+     * elements to the right.
      * 
      * @param index the position to insert the elements
      * @param coll the collection containing the elements to be inserted
@@ -325,7 +311,7 @@ public class ListOrderedSet<E>
             toAdd.add(e);
             changed = true;
         }
-
+        
         if (changed) {
             setOrder.addAll(index, toAdd);
         }
@@ -334,8 +320,8 @@ public class ListOrderedSet<E>
     }
 
     /**
-     * Removes the element at the specified position from the ordered set.
-     * Shifts any subsequent elements to the left.
+     * Removes the element at the specified position from the ordered set. Shifts any subsequent
+     * elements to the left.
      * 
      * @param index the index of the element to be removed
      * @return the element that has been remove from the ordered set
@@ -348,9 +334,9 @@ public class ListOrderedSet<E>
     }
 
     /**
-     * Uses the underlying List's toString so that order is achieved. This means
-     * that the decorated Set's toString is not used, so any custom toStrings
-     * will be ignored.
+     * Uses the underlying List's toString so that order is achieved.
+     * This means that the decorated Set's toString is not used, so
+     * any custom toStrings will be ignored.
      * 
      * @return a string representation of the ordered set
      */
@@ -360,13 +346,11 @@ public class ListOrderedSet<E>
         return setOrder.toString();
     }
 
-    // -----------------------------------------------------------------------
+    //-----------------------------------------------------------------------
     /**
      * Internal iterator handle remove.
      */
-    static class OrderedSetIterator<E>
-        extends AbstractIteratorDecorator<E>
-        implements OrderedIterator<E> {
+    static class OrderedSetIterator<E> extends AbstractIteratorDecorator<E> implements OrderedIterator<E> {
 
         /** Object we iterate on */
         protected final Collection<E> set;
