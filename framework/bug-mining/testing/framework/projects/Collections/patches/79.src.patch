diff --git a/src/main/java/org/apache/commons/collections/collection/CompositeCollection.java b/src/main/java/org/apache/commons/collections/collection/CompositeCollection.java
index 100d9d2e..8388a305 100644
--- a/src/main/java/org/apache/commons/collections/collection/CompositeCollection.java
+++ b/src/main/java/org/apache/commons/collections/collection/CompositeCollection.java
@@ -73,8 +73,7 @@ public class CompositeCollection<E> implements Collection<E>, Serializable {
      * @param compositeCollection1  the Collection to be appended to the composite
      * @param compositeCollection2  the Collection to be appended to the composite
      */
-    public CompositeCollection(final Collection<E> compositeCollection1,
-                               final Collection<E> compositeCollection2) {
+    public CompositeCollection(final Collection<E> compositeCollection1, final Collection<E> compositeCollection2) {
         super();
         addComposited(compositeCollection1, compositeCollection2);
     }
@@ -89,6 +88,16 @@ public class CompositeCollection<E> implements Collection<E>, Serializable {
         addComposited(compositeCollections);
     }
 
+//    /**
+//     * Create a Composite Collection extracting the collections from an iterable.
+//     *
+//     * @param compositeCollections  the collections to composite
+//     */
+//    public CompositeCollection(Iterable<Collection<E>> compositeCollections) {
+//        super();
+//        addComposited(compositeCollections);
+//    }
+
     //-----------------------------------------------------------------------
     /**
      * Gets the size of this composite collection.
@@ -113,7 +122,7 @@ public class CompositeCollection<E> implements Collection<E>, Serializable {
      * @return true if all of the contained collections are empty
      */
     public boolean isEmpty() {
-        for (final Collection<E> item : all) {
+        for (final Collection<? extends E> item : all) {
             if (item.isEmpty() == false) {
                 return false;
             }
@@ -130,7 +139,7 @@ public class CompositeCollection<E> implements Collection<E>, Serializable {
      * @return true if obj is contained in any of the contained collections
      */
     public boolean contains(final Object obj) {
-        for (final Collection<E> item : all) {
+        for (final Collection<? extends E> item : all) {
             if (item.contains(obj)) {
                 return true;
             }
@@ -153,7 +162,7 @@ public class CompositeCollection<E> implements Collection<E>, Serializable {
             return EmptyIterator.<E>emptyIterator();
         }
         final IteratorChain<E> chain = new IteratorChain<E>();
-        for (final Collection<E> item : all) {
+        for (final Collection<? extends E> item : all) {
             chain.addIterator(item.iterator());
         }
         return chain;
@@ -192,7 +201,7 @@ public class CompositeCollection<E> implements Collection<E>, Serializable {
         }
 
         int offset = 0;
-        for (final Collection<E> item : all) {
+        for (final Collection<? extends E> item : all) {
             for (final E e : item) {
                 result[offset++] = e;
             }
@@ -294,7 +303,7 @@ public class CompositeCollection<E> implements Collection<E>, Serializable {
             return false;
         }
         boolean changed = false;
-        for (final Collection<E> item : all) {
+        for (final Collection<? extends E> item : all) {
             changed |= item.removeAll(coll);
         }
         return changed;
@@ -312,7 +321,7 @@ public class CompositeCollection<E> implements Collection<E>, Serializable {
      */
     public boolean retainAll(final Collection<?> coll) {
         boolean changed = false;
-        for (final Collection<E> item : all) {
+        for (final Collection<? extends E> item : all) {
             changed |= item.retainAll(coll);
         }
         return changed;
@@ -326,7 +335,7 @@ public class CompositeCollection<E> implements Collection<E>, Serializable {
      * @throws UnsupportedOperationException if clear is unsupported
      */
     public void clear() {
-        for (final Collection<E> coll : all) {
+        for (final Collection<? extends E> coll : all) {
             coll.clear();
         }
     }
@@ -356,8 +365,7 @@ public class CompositeCollection<E> implements Collection<E>, Serializable {
      * @param compositeCollection1  the Collection to be appended to the composite
      * @param compositeCollection2  the Collection to be appended to the composite
      */
-    public void addComposited(final Collection<E> compositeCollection1,
-                              final Collection<E> compositeCollection2) {
+    public void addComposited(final Collection<E> compositeCollection1, final Collection<E> compositeCollection2) {
         all.add(compositeCollection1);
         all.add(compositeCollection2);
     }
@@ -371,6 +379,17 @@ public class CompositeCollection<E> implements Collection<E>, Serializable {
         all.addAll(Arrays.asList(compositeCollections));
     }
 
+//    /**
+//     * Add these Collections to the list of collections in this composite
+//     *
+//     * @param compositeCollections  the Collections to be appended to the composite
+//     */
+//    public void addComposited(Iterable<Collection<E>> compositeCollections) {
+//        for (Collection<E> item : compositeCollections) {
+//            all.add(item);
+//        }
+//    }
+
     /**
      * Removes a collection from the those being decorated in this composite.
      *
@@ -396,7 +415,7 @@ public class CompositeCollection<E> implements Collection<E>, Serializable {
      *
      * @return Unmodifiable list of all collections in this composite.
      */
-    public List<Collection<E>> getCollections() {
+    public List<? extends Collection<E>> getCollections() {
         return UnmodifiableList.unmodifiableList(all);
     }
 
@@ -458,9 +477,7 @@ public class CompositeCollection<E> implements Collection<E>, Serializable {
          * @throws NullPointerException if the object cannot be removed because its null
          * @throws IllegalArgumentException if the object cannot be removed
          */
-        public boolean remove(CompositeCollection<E> composite,
-                              List<Collection<E>> collections,
-                              Object obj);
+        public boolean remove(CompositeCollection<E> composite, List<Collection<E>> collections, Object obj);
 
     }
 
diff --git a/src/main/java/org/apache/commons/collections/set/CompositeSet.java b/src/main/java/org/apache/commons/collections/set/CompositeSet.java
index 3163bd31..b45e51fe 100644
--- a/src/main/java/org/apache/commons/collections/set/CompositeSet.java
+++ b/src/main/java/org/apache/commons/collections/set/CompositeSet.java
@@ -16,20 +16,12 @@
  */
 package org.apache.commons.collections.set;
 
-import java.io.Serializable;
-import java.lang.reflect.Array;
-import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.Collection;
-import java.util.HashSet;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 
 import org.apache.commons.collections.CollectionUtils;
-import org.apache.commons.collections.iterators.EmptyIterator;
-import org.apache.commons.collections.iterators.IteratorChain;
-import org.apache.commons.collections.list.UnmodifiableList;
+import org.apache.commons.collections.collection.CompositeCollection;
 
 /**
  * Decorates a set of other sets to provide a single unified view.
@@ -37,28 +29,17 @@ import org.apache.commons.collections.list.UnmodifiableList;
  * Changes made to this set will actually be made on the decorated set.
  * Add operations require the use of a pluggable strategy.
  * If no strategy is provided then add is unsupported.
- * <p>
- * From version 4.0, this class does not extend {@link CompositeCollection}
- * anymore due to its input restrictions (only accepts Sets).
- * See <a href="https://issues.apache.org/jira/browse/COLLECTIONS-424">COLLECTIONS-424</a>
- * for more details.
- * 
+ *
  * @since 3.0
  * @version $Id$
  */
-public class CompositeSet<E> implements Set<E>, Serializable {
+public class CompositeSet<E> extends CompositeCollection<E> implements Set<E> {
 
     /** Serialization version */
     private static final long serialVersionUID = 5185069727540378940L;
 
-    /** SetMutator to handle changes to the collection */
-    protected SetMutator<E> mutator;
-
-    /** Sets in the composite */
-    protected List<Set<E>> all = new ArrayList<Set<E>>();
-
     /**
-     * Create an empty CompositeSet.
+     * Create an empty CompositeSet
      */
     public CompositeSet() {
         super();
@@ -70,8 +51,7 @@ public class CompositeSet<E> implements Set<E>, Serializable {
      * @param set  the initial set in the composite
      */
     public CompositeSet(final Set<E> set) {
-        super();
-        addComposited(set);
+        super(set);
     }
 
     /**
@@ -80,142 +60,102 @@ public class CompositeSet<E> implements Set<E>, Serializable {
      * @param sets  the initial sets in the composite
      */
     public CompositeSet(final Set<E>... sets) {
-        super();
-        addComposited(sets);
+        super(sets);
     }
 
-    //-----------------------------------------------------------------------
     /**
-     * Gets the size of this composite set.
-     * <p>
-     * This implementation calls <code>size()</code> on each set.
+     * Add a Set to this composite
      *
-     * @return total number of elements in all contained containers
+     * @param c Must implement Set
+     * @throws IllegalArgumentException if c does not implement java.util.Set
+     *         or if a SetMutator is set, but fails to resolve a collision
+     * @throws UnsupportedOperationException if there is no SetMutator set, or
+     *         a CollectionMutator is set instead of a SetMutator
+     * @see org.apache.commons.collections.collection.CompositeCollection.CollectionMutator
+     * @see SetMutator
      */
-    public int size() {
-        int size = 0;
-        for (final Set<E> item : all) {
-            size += item.size();
+    @Override
+    public synchronized void addComposited(final Collection<E> c) {
+        if (!(c instanceof Set)) {
+            throw new IllegalArgumentException("Collections added must implement java.util.Set");
         }
-        return size;
-    }
 
-    /**
-     * Checks whether this composite set is empty.
-     * <p>
-     * This implementation calls <code>isEmpty()</code> on each set.
-     *
-     * @return true if all of the contained sets are empty
-     */
-    public boolean isEmpty() {
-        for (final Set<E> item : all) {
-            if (item.isEmpty() == false) {
-                return false;
+        for (final Set<E> set : getCollections()) {
+            final Collection<E> intersects = CollectionUtils.intersection(set, c);
+            if (intersects.size() > 0) {
+                if (this.mutator == null) {
+                    throw new UnsupportedOperationException(
+                        "Collision adding composited collection with no SetMutator set");
+                }
+                else if (!(this.mutator instanceof SetMutator)) {
+                    throw new UnsupportedOperationException(
+                        "Collision adding composited collection to a CompositeSet with a CollectionMutator " +
+                        "instead of a SetMutator");
+                }
+                getMutator().resolveCollision(this, set, (Set<E>) c, intersects);
+                if (CollectionUtils.intersection(set, c).size() > 0) {
+                    throw new IllegalArgumentException(
+                        "Attempt to add illegal entry unresolved by SetMutator.resolveCollision()");
+                }
             }
         }
-        return true;
+        super.addComposited(c);
     }
 
-    /**
-     * Checks whether this composite set contains the object.
-     * <p>
-     * This implementation calls <code>contains()</code> on each set.
-     *
-     * @param obj  the object to search for
-     * @return true if obj is contained in any of the contained sets
-     */
-    public boolean contains(final Object obj) {
-        for (final Set<E> item : all) {
-            if (item.contains(obj)) {
-                return true;
-            }
-        }
-        return false;
+    @SuppressWarnings("unchecked")
+    @Override
+    public List<? extends Set<E>> getCollections() {
+        return (List<Set<E>>) super.getCollections();
     }
 
     /**
-     * Gets an iterator over all the sets in this composite.
-     * <p>
-     * This implementation uses an <code>IteratorChain</code>.
+     * Add two sets to this composite.
      *
-     * @return an <code>IteratorChain</code> instance which supports
-     *  <code>remove()</code>. Iteration occurs over contained collections in
-     *  the order they were added, but this behavior should not be relied upon.
-     * @see IteratorChain
+     * @param c  the first {@link java.util.Set} to add to this composite
+     * @param d  the second {@link java.util.Set} to add to this composite
+     * @throws IllegalArgumentException if c or d does not implement {@link java.util.Set}
      */
-    public Iterator<E> iterator() {
-        if (all.isEmpty()) {
-            return EmptyIterator.<E>emptyIterator();
+    @Override
+    @SuppressWarnings("unchecked")
+    public synchronized void addComposited(final Collection<E> c, final Collection<E> d) {
+        if (!(c instanceof Set)) {
+            throw new IllegalArgumentException("Argument must implement java.util.Set");
         }
-        final IteratorChain<E> chain = new IteratorChain<E>();
-        for (final Set<E> item : all) {
-            chain.addIterator(item.iterator());
+        if (!(d instanceof Set)) {
+            throw new IllegalArgumentException("Argument must implement java.util.Set");
         }
-        return chain;
+        this.addComposited(new Set[] { (Set<? extends E>) c, (Set<? extends E>) d });
     }
 
     /**
-     * Returns an array containing all of the elements in this composite.
-     *
-     * @return an object array of all the elements in the collection
+     * Add an array of sets to this composite
+     * @param comps  the {@link Collection} of {@link java.util.Set}s to add to this composite
+     * @throws IllegalArgumentException if any of the collections in comps does not implement {@link java.util.Set}
      */
-    public Object[] toArray() {
-        final Object[] result = new Object[size()];
-        int i = 0;
-        for (final Iterator<E> it = iterator(); it.hasNext(); i++) {
-            result[i] = it.next();
+    @Override
+    public synchronized void addComposited(final Collection<E>[] comps) {
+        for (int i = comps.length - 1; i >= 0; --i) {
+            this.addComposited(comps[i]);
         }
-        return result;
     }
 
     /**
-     * Returns an object array, populating the supplied array if possible.
-     * See <code>Collection</code> interface for full details.
-     *
-     * @param <T>  the type of the elements in the collection
-     * @param array  the array to use, populating if possible
-     * @return an array of all the elements in the collection
+     * This can receive either a
+     * {@link org.apache.commons.collections.collection.CompositeCollection.CollectionMutator CollectionMutator}
+     * or a {@link CompositeSet.SetMutator}. 
+     * If a {@link org.apache.commons.collections.collection.CompositeCollection.CollectionMutator CollectionMutator}
+     * is used than conflicts when adding composited sets will throw IllegalArgumentException.
+     * 
+     * @param mutator
+     *   the {@link org.apache.commons.collections.collection.CompositeCollection.CollectionMutator CollectionMutator}
+     * to use for this composite
      */
-    @SuppressWarnings("unchecked")
-    public <T> T[] toArray(final T[] array) {
-        final int size = size();
-        Object[] result = null;
-        if (array.length >= size) {
-            result = array;
-        } else {
-            result = (Object[]) Array.newInstance(array.getClass().getComponentType(), size);
-        }
-
-        int offset = 0;
-        for (final Collection<E> item : all) {
-            for (final E e : item) {
-                result[offset++] = e;
-            }
-        }
-        if (result.length > size) {
-            result[size] = null;
-        }
-        return (T[]) result;
+    @Override
+    public void setMutator(final CollectionMutator<E> mutator) {
+        super.setMutator(mutator);
     }
 
-    /**
-     * Adds an object to the collection, throwing UnsupportedOperationException
-     * unless a SetMutator strategy is specified.
-     *
-     * @param obj  the object to add
-     * @return {@code true} if the collection was modified
-     * @throws UnsupportedOperationException if SetMutator hasn't been set or add is unsupported
-     * @throws ClassCastException if the object cannot be added due to its type
-     * @throws NullPointerException if the object cannot be added because its null
-     * @throws IllegalArgumentException if the object cannot be added
-     */
-    public boolean add(final E obj) {
-        if (mutator == null) {
-           throw new UnsupportedOperationException(
-               "add() is not supported on CompositeSet without a SetMutator strategy");
-        }
-        return mutator.add(this, all, obj);
-    }
+    /* Set operations */
 
     /**
      * If a <code>CollectionMutator</code> is defined for this CompositeSet then this
@@ -224,8 +164,9 @@ public class CompositeSet<E> implements Set<E>, Serializable {
      * @param obj  object to be removed
      * @return true if the object is removed, false otherwise
      */
+    @Override
     public boolean remove(final Object obj) {
-        for (final Set<E> set : getSets()) {
+        for (final Set<? extends E> set : getCollections()) {
             if (set.contains(obj)) {
                 return set.remove(obj);
             }
@@ -234,187 +175,6 @@ public class CompositeSet<E> implements Set<E>, Serializable {
     }
 
     /**
-     * Checks whether this composite contains all the elements in the specified collection.
-     * <p>
-     * This implementation calls <code>contains()</code> for each element in the
-     * specified collection.
-     *
-     * @param coll  the collection to check for
-     * @return true if all elements contained
-     */
-    public boolean containsAll(final Collection<?> coll) {
-        for (final Object item : coll) {
-            if (contains(item) == false) {
-                return false;
-            }
-        }
-        return true;
-    }
-
-    /**
-     * Adds a collection of elements to this composite, throwing
-     * UnsupportedOperationException unless a SetMutator strategy is specified.
-     *
-     * @param coll  the collection to add
-     * @return true if the composite was modified
-     * @throws UnsupportedOperationException if SetMutator hasn't been set or add is unsupported
-     * @throws ClassCastException if the object cannot be added due to its type
-     * @throws NullPointerException if the object cannot be added because its null
-     * @throws IllegalArgumentException if the object cannot be added
-     */
-    public boolean addAll(final Collection<? extends E> coll) {
-        if (mutator == null) {
-            throw new UnsupportedOperationException(
-                "addAll() is not supported on CompositeSet without a SetMutator strategy");
-        }
-        return mutator.addAll(this, all, coll);
-    }
-
-    /**
-     * Removes the elements in the specified collection from this composite set.
-     * <p>
-     * This implementation calls <code>removeAll</code> on each collection.
-     *
-     * @param coll  the collection to remove
-     * @return true if the composite was modified
-     * @throws UnsupportedOperationException if removeAll is unsupported
-     */
-    public boolean removeAll(final Collection<?> coll) {
-        if (coll.size() == 0) {
-            return false;
-        }
-        boolean changed = false;
-        for (final Collection<E> item : all) {
-            changed |= item.removeAll(coll);
-        }
-        return changed;
-    }
-
-    /**
-     * Retains all the elements in the specified collection in this composite set,
-     * removing all others.
-     * <p>
-     * This implementation calls <code>retainAll()</code> on each collection.
-     *
-     * @param coll  the collection to remove
-     * @return true if the composite was modified
-     * @throws UnsupportedOperationException if retainAll is unsupported
-     */
-    public boolean retainAll(final Collection<?> coll) {
-        boolean changed = false;
-        for (final Collection<E> item : all) {
-            changed |= item.retainAll(coll);
-        }
-        return changed;
-    }
-
-    /**
-     * Removes all of the elements from this composite set.
-     * <p>
-     * This implementation calls <code>clear()</code> on each set.
-     *
-     * @throws UnsupportedOperationException if clear is unsupported
-     */
-    public void clear() {
-        for (final Collection<E> coll : all) {
-            coll.clear();
-        }
-    }
-
-    //-----------------------------------------------------------------------
-    /**
-     * Specify a SetMutator strategy instance to handle changes.
-     *
-     * @param mutator  the mutator to use
-     */
-    public void setMutator(final SetMutator<E> mutator) {
-        this.mutator = mutator;
-    }
-
-    /**
-     * Add a Set to this composite.
-     *
-     * @param set  the set to add
-     * @throws IllegalArgumentException if a SetMutator is set, but fails to resolve a collision
-     * @throws UnsupportedOperationException if there is no SetMutator set
-     * @see SetMutator
-     */
-    public synchronized void addComposited(final Set<E> set) {
-        for (final Set<E> existingSet : getSets()) {
-            final Collection<E> intersects = CollectionUtils.intersection(existingSet, set);
-            if (intersects.size() > 0) {
-                if (this.mutator == null) {
-                    throw new UnsupportedOperationException(
-                        "Collision adding composited set with no SetMutator set");
-                }
-                getMutator().resolveCollision(this, existingSet, set, intersects);
-                if (CollectionUtils.intersection(existingSet, set).size() > 0) {
-                    throw new IllegalArgumentException(
-                        "Attempt to add illegal entry unresolved by SetMutator.resolveCollision()");
-                }
-            }
-        }
-        all.add(set);
-    }
-
-    /**
-     * Add these Sets to the list of sets in this composite.
-     *
-     * @param set1  the first Set to be appended to the composite
-     * @param set2  the second Set to be appended to the composite
-     */
-    public void addComposited(final Set<E> set1, final Set<E> set2) {
-        all.add(set1);
-        all.add(set2);
-    }
-
-    /**
-     * Add these Sets to the list of sets in this composite
-     *
-     * @param sets  the Sets to be appended to the composite
-     */
-    public void addComposited(final Set<E>[] sets) {
-        all.addAll(Arrays.asList(sets));
-    }
-
-    /**
-     * Removes a set from those being decorated in this composite.
-     *
-     * @param set  set to be removed
-     */
-    public void removeComposited(final Set<E> set) {
-        all.remove(set);
-    }
-
-    //-----------------------------------------------------------------------
-    /**
-     * Returns a new Set containing all of the elements.
-     *
-     * @return A new HashSet containing all of the elements in this composite.
-     *   The new collection is <i>not</i> backed by this composite.
-     */
-    public Set<E> toSet() {
-        return new HashSet<E>(this);
-    }
-
-    /**
-     * Gets the sets being decorated.
-     *
-     * @return Unmodifiable list of all sets in this composite.
-     */
-    public List<Set<E>> getSets() {
-        return UnmodifiableList.unmodifiableList(all);
-    }
-
-    /**
-     * Get the set mutator to be used for this CompositeSet.
-     * @return the set mutator
-     */
-    protected SetMutator<E> getMutator() {
-        return mutator;
-    }
-
-    /**
      * {@inheritDoc}
      * @see java.util.Set#equals
      */
@@ -422,7 +182,7 @@ public class CompositeSet<E> implements Set<E>, Serializable {
     public boolean equals(final Object obj) {
         if (obj instanceof Set) {
             final Set<?> set = (Set<?>) obj;
-            return set.size() == this.size() && set.containsAll(this);
+            return set.containsAll(this) && set.size() == this.size();
         }
         return false;
     }
@@ -440,40 +200,18 @@ public class CompositeSet<E> implements Set<E>, Serializable {
         return code;
     }
 
+    @Override
+    protected SetMutator<E> getMutator() {
+        return (SetMutator<E>) super.getMutator();
+    }
+
     /**
      * Define callbacks for mutation operations.
+     * <p>
+     * Defining remove() on implementations of SetMutator is pointless
+     * as they are never called by CompositeSet.
      */
-    public static interface SetMutator<E> extends Serializable {
-
-        /**
-         * Called when an object is to be added to the composite.
-         *
-         * @param composite  the CompositeSet being changed
-         * @param sets  all of the Set instances in this CompositeSet
-         * @param obj  the object being added
-         * @return true if the collection is changed
-         * @throws UnsupportedOperationException if add is unsupported
-         * @throws ClassCastException if the object cannot be added due to its type
-         * @throws NullPointerException if the object cannot be added because its null
-         * @throws IllegalArgumentException if the object cannot be added
-         */
-        public boolean add(CompositeSet<E> composite, List<Set<E>> sets, E obj);
-
-        /**
-         * Called when a collection is to be added to the composite.
-         *
-         * @param composite  the CompositeSet being changed
-         * @param sets  all of the Set instances in this CompositeSet
-         * @param coll  the collection being added
-         * @return true if the collection is changed
-         * @throws UnsupportedOperationException if add is unsupported
-         * @throws ClassCastException if the object cannot be added due to its type
-         * @throws NullPointerException if the object cannot be added because its null
-         * @throws IllegalArgumentException if the object cannot be added
-         */
-        public boolean addAll(CompositeSet<E> composite,
-                              List<Set<E>> sets,
-                              Collection<? extends E> coll);
+    public static interface SetMutator<E> extends CompositeCollection.CollectionMutator<E> {
 
         /**
          * Called when a Set is added to the CompositeSet and there is a
@@ -487,9 +225,6 @@ public class CompositeSet<E> implements Set<E>, Serializable {
          * @param added  the Set being added to the composite
          * @param intersects  the intersection of the existing and added sets
          */
-        public void resolveCollision(CompositeSet<E> comp,
-                                     Set<E> existing,
-                                     Set<E> added,
-                                     Collection<E> intersects);
+        public void resolveCollision(CompositeSet<E> comp, Set<E> existing, Set<E> added, Collection<E> intersects);
     }
 }
