diff --git a/src/main/java/org/apache/commons/collections4/map/Flat3Map.java b/src/main/java/org/apache/commons/collections4/map/Flat3Map.java
index cb41eb34..3578d36a 100644
--- a/src/main/java/org/apache/commons/collections4/map/Flat3Map.java
+++ b/src/main/java/org/apache/commons/collections4/map/Flat3Map.java
@@ -713,10 +713,9 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
     /**
      * Gets the entrySet view of the map.
      * Changes made to the view affect this map.
-     * <p>
-     * NOTE: from 4.0, the returned Map Entry will be an independent object and will
-     * not change anymore as the iterator progresses. To avoid this additional object
-     * creation and simply iterate through the entries, use {@link #mapIterator()}.
+     * The Map Entry is not an independent object and changes as the
+     * iterator progresses.
+     * To simply iterate through the entries, use {@link #mapIterator()}.
      *
      * @return the entrySet view
      */
@@ -772,35 +771,45 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
         }
     }
 
-    static class FlatMapEntry<K, V> implements Map.Entry<K, V> {
+    static abstract class EntryIterator<K, V> implements Map.Entry<K, V> {
         private final Flat3Map<K, V> parent;
-        private final int index;
-        private volatile boolean removed;
+        private int nextIndex = 0;
+        protected boolean canRemove = false;
 
-        public FlatMapEntry(final Flat3Map<K, V> parent, final int index) {
+        /**
+         * Create a new Flat3Map.EntryIterator.
+         */
+        public EntryIterator(final Flat3Map<K, V> parent) {
             this.parent = parent;
-            this.index = index;
-            this.removed = false;
         }
 
-        /**
-         * Used by the iterator that created this entry to indicate that
-         * {@link java.util.Iterator#remove()} has been called.
-         * <p>
-         * As a consequence, all subsequent call to {@link #getKey()},
-         * {@link #setValue(Object)} and {@link #getValue()} will fail.
-         * 
-         * @param flag
-         */
-        void setRemoved(final boolean flag) {
-            this.removed = flag;
+        public boolean hasNext() {
+            return nextIndex < parent.size;
+        }
+
+        public Map.Entry<K, V> nextEntry() {
+            if (hasNext() == false) {
+                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);
+            }
+            canRemove = true;
+            nextIndex++;
+            return this;
+        }
+
+        public void remove() {
+            if (canRemove == false) {
+                throw new IllegalStateException(AbstractHashedMap.REMOVE_INVALID);
+            }
+            parent.remove(getKey());
+            nextIndex--;
+            canRemove = false;
         }
 
         public K getKey() {
-            if (removed) {
+            if (canRemove == false) {
                 throw new IllegalStateException(AbstractHashedMap.GETKEY_INVALID);
             }
-            switch (index) {
+            switch (nextIndex) {
                 case 3:
                     return parent.key3;
                 case 2:
@@ -812,10 +821,10 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
         }
 
         public V getValue() {
-            if (removed) {
+            if (canRemove == false) {
                 throw new IllegalStateException(AbstractHashedMap.GETVALUE_INVALID);
             }
-            switch (index) {
+            switch (nextIndex) {
                 case 3:
                     return parent.value3;
                 case 2:
@@ -827,11 +836,11 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
         }
 
         public V setValue(final V value) {
-            if (removed) {
+            if (canRemove == false) {
                 throw new IllegalStateException(AbstractHashedMap.SETVALUE_INVALID);
             }
             final V old = getValue();
-            switch (index) {
+            switch (nextIndex) {
                 case 3:
                     parent.value3 = value;
                     break;
@@ -844,10 +853,24 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
             }
             return old;
         }
+    }
+
+    /**
+     * EntrySetIterator and MapEntry
+     */
+    static class EntrySetIterator<K, V> extends EntryIterator<K, V> implements Iterator<Map.Entry<K, V>> {
+
+        EntrySetIterator(final Flat3Map<K, V> parent) {
+            super(parent);
+        }
+
+        public Map.Entry<K, V> next() {
+            return nextEntry();
+        }
 
         @Override
         public boolean equals(final Object obj) {
-            if (removed) {
+            if (canRemove == false) {
                 return false;
             }
             if (obj instanceof Map.Entry == false) {
@@ -862,7 +885,7 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
 
         @Override
         public int hashCode() {
-            if (removed) {
+            if (canRemove == false) {
                 return 0;
             }
             final Object key = getKey();
@@ -873,61 +896,11 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
 
         @Override
         public String toString() {
-            if (!removed) {
+            if (canRemove) {
                 return getKey() + "=" + getValue();
             }
             return "";
         }
-
-    }
-
-    static abstract class EntryIterator<K, V> {
-        private final Flat3Map<K, V> parent;
-        private int nextIndex = 0;
-        protected FlatMapEntry<K, V> currentEntry = null;
-
-        /**
-         * Create a new Flat3Map.EntryIterator.
-         */
-        public EntryIterator(final Flat3Map<K, V> parent) {
-            this.parent = parent;
-        }
-
-        public boolean hasNext() {
-            return nextIndex < parent.size;
-        }
-
-        public Map.Entry<K, V> nextEntry() {
-            if (!hasNext()) {
-                throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);
-            }
-            currentEntry = new FlatMapEntry<K, V>(parent, ++nextIndex);
-            return currentEntry;
-        }
-
-        public void remove() {
-            if (currentEntry == null) {
-                throw new IllegalStateException(AbstractHashedMap.REMOVE_INVALID);
-            }
-            currentEntry.setRemoved(true);
-            parent.remove(currentEntry.getKey());
-            nextIndex--;
-            currentEntry = null;
-        }
-
-    }
-
-    /**
-     * EntrySetIterator and MapEntry
-     */
-    static class EntrySetIterator<K, V> extends EntryIterator<K, V> implements Iterator<Map.Entry<K, V>> {
-        EntrySetIterator(final Flat3Map<K, V> parent) {
-            super(parent);
-        }
-
-        public Map.Entry<K, V> next() {
-            return nextEntry();
-        }
     }
 
     /**
@@ -1000,7 +973,8 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
         }
 
         public K next() {
-            return nextEntry().getKey();
+            nextEntry();
+            return getKey();
         }
     }
 
@@ -1067,7 +1041,8 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
         }
 
         public V next() {
-            return nextEntry().getValue();
+            nextEntry();
+            return getValue();
         }
     }
 
