diff --git a/src/main/java/org/apache/commons/collections4/functors/ChainedClosure.java b/src/main/java/org/apache/commons/collections4/functors/ChainedClosure.java
index 2e4436a2..ca415d63 100644
--- a/src/main/java/org/apache/commons/collections4/functors/ChainedClosure.java
+++ b/src/main/java/org/apache/commons/collections4/functors/ChainedClosure.java
@@ -49,7 +49,7 @@ public class ChainedClosure<E> implements Closure<E>, Serializable {
         if (closures.length == 0) {
             return NOPClosure.<E>nopClosure();
         }
-        return new ChainedClosure<E>(closures);
+        return new ChainedClosure<E>(FunctorUtils.copy(closures));
     }
 
     /**
@@ -78,28 +78,18 @@ public class ChainedClosure<E> implements Closure<E>, Serializable {
             cmds[i++] = closure;
         }
         FunctorUtils.validate(cmds);
-        return new ChainedClosure<E>(false, cmds);
-    }
-
-    /**
-     * Hidden constructor for the use by the static factory methods.
-     *
-     * @param clone  if {@code true} the input argument will be cloned
-     * @param closures  the closures to chain, no nulls
-     */
-    private ChainedClosure(final boolean clone, final Closure<? super E>... closures) {
-        super();
-        iClosures = clone ? FunctorUtils.copy(closures) : closures;
+        return new ChainedClosure<E>(cmds);
     }
 
     /**
      * Constructor that performs no validation.
      * Use <code>chainedClosure</code> if you want that.
      *
-     * @param closures  the closures to chain, copied, no nulls
+     * @param closures  the closures to chain, not copied, no nulls
      */
-    public ChainedClosure(final Closure<? super E>... closures) {
-        this(true, closures);
+    public ChainedClosure(final Closure<? super E>[] closures) {
+        super();
+        iClosures = closures;
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/collections4/functors/ChainedTransformer.java b/src/main/java/org/apache/commons/collections4/functors/ChainedTransformer.java
index 045a8064..5f270538 100644
--- a/src/main/java/org/apache/commons/collections4/functors/ChainedTransformer.java
+++ b/src/main/java/org/apache/commons/collections4/functors/ChainedTransformer.java
@@ -52,7 +52,7 @@ public class ChainedTransformer<T> implements Transformer<T, T>, Serializable {
         if (transformers.length == 0) {
             return NOPTransformer.<T>nopTransformer();
         }
-        return new ChainedTransformer<T>(transformers);
+        return new ChainedTransformer<T>(FunctorUtils.copy(transformers));
     }
 
     /**
@@ -77,28 +77,18 @@ public class ChainedTransformer<T> implements Transformer<T, T>, Serializable {
         // convert to array like this to guarantee iterator() ordering
         final Transformer<T, T>[] cmds = transformers.toArray(new Transformer[transformers.size()]);
         FunctorUtils.validate(cmds);
-        return new ChainedTransformer<T>(false, cmds);
-    }
-
-    /**
-     * Hidden constructor for the use by the static factory methods.
-     *
-     * @param clone  if {@code true} the input argument will be cloned
-     * @param transformers  the transformers to chain, not copied, no nulls
-     */
-    private ChainedTransformer(final boolean clone, final Transformer<? super T, ? extends T>[] transformers) {
-        super();
-        iTransformers = clone ? FunctorUtils.copy(transformers) : transformers;
+        return new ChainedTransformer<T>(cmds);
     }
 
     /**
      * Constructor that performs no validation.
      * Use <code>chainedTransformer</code> if you want that.
      *
-     * @param transformers  the transformers to chain, copied, no nulls
+     * @param transformers  the transformers to chain, not copied, no nulls
      */
-    public ChainedTransformer(final Transformer<? super T, ? extends T>... transformers) {
-        this(true, transformers);
+    public ChainedTransformer(final Transformer<? super T, ? extends T>[] transformers) {
+        super();
+        iTransformers = transformers;
     }
 
     /**
