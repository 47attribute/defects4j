diff --git a/src/test/java/org/apache/commons/collections4/SplitMapUtilsTest.java b/src/test/java/org/apache/commons/collections4/SplitMapUtilsTest.java
index 15c5f126..8e02e5b0 100644
--- a/src/test/java/org/apache/commons/collections4/SplitMapUtilsTest.java
+++ b/src/test/java/org/apache/commons/collections4/SplitMapUtilsTest.java
@@ -27,10 +27,10 @@ import org.apache.commons.collections4.Transformer;
 import org.apache.commons.collections4.Unmodifiable;
 import org.apache.commons.collections4.functors.NOPTransformer;
 import org.apache.commons.collections4.map.HashedMap;
-import org.apache.commons.collections4.splitmap.TransformedSplitMap;
+import org.apache.commons.collections4.splitmap.TransformedMap;
 
 /**
- * Tests for {@link TransformedSplitMap}
+ * Tests for {@link TransformedMap}
  *
  * @since 4.0
  * @version $Id$
@@ -38,7 +38,7 @@ import org.apache.commons.collections4.splitmap.TransformedSplitMap;
 @SuppressWarnings("boxing")
 public class SplitMapUtilsTest extends BulkTest {
     private Map<String, Integer> backingMap;
-    private TransformedSplitMap<String, String, String, Integer> transformedMap;
+    private TransformedMap<String, String, String, Integer> transformedMap;
 
     private final Transformer<String, Integer> stringToInt = new Transformer<String, Integer>() {
         public Integer transform(final String input) {
@@ -54,7 +54,7 @@ public class SplitMapUtilsTest extends BulkTest {
     protected void setUp() throws Exception {
         super.setUp();
         backingMap = new HashMap<String, Integer>();
-        transformedMap = TransformedSplitMap.transformingMap(backingMap, NOPTransformer.<String> nopTransformer(),
+        transformedMap = TransformedMap.transformingMap(backingMap, NOPTransformer.<String> nopTransformer(),
                 stringToInt);
         for (int i = 0; i < 10; i++) {
             transformedMap.put(String.valueOf(i), String.valueOf(i));
diff --git a/src/test/java/org/apache/commons/collections4/splitmap/TransformedSplitMapTest.java b/src/test/java/org/apache/commons/collections4/splitmap/TransformedMapTest.java
similarity index 77%
rename from src/test/java/org/apache/commons/collections4/splitmap/TransformedSplitMapTest.java
rename to src/test/java/org/apache/commons/collections4/splitmap/TransformedMapTest.java
index 6605e791..c201e733 100644
--- a/src/test/java/org/apache/commons/collections4/splitmap/TransformedSplitMapTest.java
+++ b/src/test/java/org/apache/commons/collections4/splitmap/TransformedMapTest.java
@@ -26,13 +26,17 @@ import org.apache.commons.collections4.Transformer;
 import org.apache.commons.collections4.functors.NOPTransformer;
 
 /**
- * Tests for {@link TransformedSplitMap}
+ * Tests for {@link TransformedMap}
+ *
+ * TODO fix version, add Serialization tests
+ * FIXME the serialization result is stored as TransformedSplitMap.versionX.obj
+ * to distinguish it from the one for o.a.c.c.map.TransformedMap.
  *
  * @since 4.0
  * @version $Id$
  */
 @SuppressWarnings("boxing")
-public class TransformedSplitMapTest extends BulkTest {
+public class TransformedMapTest extends BulkTest {
 
     private final Transformer<Integer, String> intToString = new Transformer<Integer, String>() {
         public String transform(final Integer input) {
@@ -52,13 +56,13 @@ public class TransformedSplitMapTest extends BulkTest {
         }
     };
 
-    public TransformedSplitMapTest(final String testName) {
+    public TransformedMapTest(final String testName) {
         super(testName);
     }
 
     // -----------------------------------------------------------------------
     public void testTransformedMap() {
-        final TransformedSplitMap<Integer, String, Object, Class<?>> map = TransformedSplitMap.transformingMap(
+        final TransformedMap<Integer, String, Object, Class<?>> map = TransformedMap.transformingMap(
                 new HashMap<String, Class<?>>(), intToString, objectToClass);
 
         final Integer[] k = new Integer[] { 0, 1, 2, 3, 4, 5, 6 };
@@ -82,7 +86,7 @@ public class TransformedSplitMapTest extends BulkTest {
         assertEquals(objectToClass.transform(v[0]), map.remove(intToString.transform(k[0])));
         assertEquals(--sz, map.size());
 
-        final TransformedSplitMap<String, String, String, Integer> map2 = TransformedSplitMap.transformingMap(
+        final TransformedMap<String, String, String, Integer> map2 = TransformedMap.transformingMap(
                 new HashMap<String, Integer>(), NOPTransformer.<String> nopTransformer(), stringToInt);
         assertEquals(0, map2.size());
         for (int i = 0; i < 6; i++) {
@@ -102,9 +106,8 @@ public class TransformedSplitMapTest extends BulkTest {
     // -----------------------------------------------------------------------
 
     public void testMapIterator() {
-        final TransformedSplitMap<String, String, String, Integer> map =
-                TransformedSplitMap.transformingMap(new HashMap<String, Integer>(),
-                                                    NOPTransformer.<String> nopTransformer(), stringToInt);
+        final TransformedMap<String, String, String, Integer> map = TransformedMap.transformingMap(
+                new HashMap<String, Integer>(), NOPTransformer.<String> nopTransformer(), stringToInt);
         assertEquals(0, map.size());
         for (int i = 0; i < 6; i++) {
             map.put(String.valueOf(i), String.valueOf(i));
@@ -118,23 +121,22 @@ public class TransformedSplitMapTest extends BulkTest {
     }
 
     public void testEmptyMap() throws IOException, ClassNotFoundException {
-        final TransformedSplitMap<String, String, String, String> map =
-                TransformedSplitMap.transformingMap(new HashMap<String, String>(),
-                                                    NOPTransformer.<String>nopTransformer(),
-                                                    NOPTransformer.<String>nopTransformer() );
+        final TransformedMap<String, String, String, String> map = TransformedMap.transformingMap(
+                new HashMap<String, String>(),
+                NOPTransformer.<String>nopTransformer(),
+                NOPTransformer.<String>nopTransformer() );
 
-        final ObjectInputStream in =
-                new ObjectInputStream( new FileInputStream( TEST_DATA_PATH+"/TransformedSplitMap.emptyCollection.version4.obj" ) );
+        final ObjectInputStream in = new ObjectInputStream( new FileInputStream( TEST_DATA_PATH+"/TransformedSplitMap.emptyCollection.version4.obj" ) );
         final Object readObject = in.readObject();
         in.close();
 
-        final TransformedSplitMap<?, ?, ?, ?> readMap = (TransformedSplitMap<?, ?, ?, ?>) readObject;
+        final TransformedMap<?, ?, ?, ?> readMap = (TransformedMap<?, ?, ?, ?>) readObject;
         assertTrue( "Map should be empty", readMap.size() == 0 );
         assertEquals( map.entrySet(), readMap.entrySet() );
     }
 
     public void testFullMap() throws IOException, ClassNotFoundException {
-        final TransformedSplitMap<String, String, String, String> map = TransformedSplitMap.transformingMap(
+        final TransformedMap<String, String, String, String> map = TransformedMap.transformingMap(
                 new HashMap<String, String>(),
                 NOPTransformer.<String>nopTransformer(),
                 NOPTransformer.<String>nopTransformer() );
@@ -143,18 +145,17 @@ public class TransformedSplitMapTest extends BulkTest {
         map.put( "e", "f" );
         map.put( "g", "h" );
 
-        final ObjectInputStream in =
-                new ObjectInputStream( new FileInputStream( TEST_DATA_PATH+"TransformedSplitMap.fullCollection.version4.obj" ) );
+        final ObjectInputStream in = new ObjectInputStream( new FileInputStream( TEST_DATA_PATH+"TransformedSplitMap.fullCollection.version4.obj" ) );
         final Object readObject = in.readObject();
         in.close();
 
-        final TransformedSplitMap<?, ?, ?, ?> readMap = (TransformedSplitMap<?, ?, ?, ?>) readObject;
+        final TransformedMap<?, ?, ?, ?> readMap = (TransformedMap<?, ?, ?, ?>) readObject;
         assertFalse( "Map should not be empty", readMap.size() == 0 );
         assertEquals( map.entrySet(), readMap.entrySet() );
     }
 
 //    public void testCreate() throws IOException {
-//        TransformedSplitMap<String, String, String, String> map = TransformedSplitMap.transformingMap(
+//        TransformedMap<String, String, String, String> map = TransformedMap.transformingMap(
 //                new HashMap<String, String>(),
 //                NOPTransformer.<String>nopTransformer(),
 //                NOPTransformer.<String>nopTransformer() );
