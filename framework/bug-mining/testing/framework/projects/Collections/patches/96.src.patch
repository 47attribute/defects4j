diff --git a/src/main/java/org/apache/commons/collections4/iterators/ArrayIterator.java b/src/main/java/org/apache/commons/collections4/iterators/ArrayIterator.java
index 0bdd3506..6e72e9db 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/ArrayIterator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/ArrayIterator.java
@@ -37,18 +37,30 @@ import org.apache.commons.collections4.ResettableIterator;
  */
 public class ArrayIterator<E> implements ResettableIterator<E> {
 
+    // TODO Privatise fields? Mainly read-only access
+
     /** The array to iterate over */
-    protected final Object array;
+    protected Object array;
     /** The start index to loop from */
-    protected final int startIndex;
+    protected int startIndex = 0;
     /** The end index to loop to */
-    protected final int endIndex;
+    protected int endIndex = 0;
     /** The current iterator index */
     protected int index = 0;
 
     // Constructors
     // ----------------------------------------------------------------------
     /**
+     * Constructor for use with <code>setArray</code>.
+     * <p>
+     * Using this constructor, the iterator is equivalent to an empty iterator
+     * until {@link #setArray(Object)} is  called to establish the array to iterate over.
+     */
+    public ArrayIterator() {
+        super();
+    }
+
+    /**
      * Constructs an ArrayIterator that will iterate over the values in the
      * specified array.
      *
@@ -57,7 +69,8 @@ public class ArrayIterator<E> implements ResettableIterator<E> {
      * @throws NullPointerException if <code>array</code> is <code>null</code>
      */
     public ArrayIterator(final Object array) {
-        this(array, 0);
+        super();
+        setArray(array);
     }
 
     /**
@@ -71,7 +84,11 @@ public class ArrayIterator<E> implements ResettableIterator<E> {
      * @throws IndexOutOfBoundsException if the index is invalid
      */
     public ArrayIterator(final Object array, final int startIndex) {
-        this(array, startIndex, Array.getLength(array));
+        super();
+        setArray(array);
+        checkBound(startIndex, "start");
+        this.startIndex = startIndex;
+        this.index = startIndex;
     }
 
     /**
@@ -87,30 +104,26 @@ public class ArrayIterator<E> implements ResettableIterator<E> {
      */
     public ArrayIterator(final Object array, final int startIndex, final int endIndex) {
         super();
-
-        this.array = array;
-        this.startIndex = startIndex;
-        this.endIndex = endIndex;
-        this.index = startIndex;
-
-        final int len = Array.getLength(array);
-        checkBound(startIndex, len, "start");
-        checkBound(endIndex, len, "end");
+        setArray(array);
+        checkBound(startIndex, "start");
+        checkBound(endIndex, "end");
         if (endIndex < startIndex) {
             throw new IllegalArgumentException("End index must not be less than start index.");
         }
+        this.startIndex = startIndex;
+        this.endIndex = endIndex;
+        this.index = startIndex;
     }
 
     /**
      * Checks whether the index is valid or not.
      *
      * @param bound  the index to check
-     * @param len  the length of the array
      * @param type  the index type (for error messages)
      * @throws IndexOutOfBoundsException if the index is invalid
      */
-    protected void checkBound(final int bound, final int len, final String type ) {
-        if (bound > len) {
+    protected void checkBound(final int bound, final String type ) {
+        if (bound > this.endIndex) {
             throw new ArrayIndexOutOfBoundsException(
               "Attempt to make an ArrayIterator that " + type +
               "s beyond the end of the array. "
@@ -173,23 +186,28 @@ public class ArrayIterator<E> implements ResettableIterator<E> {
     }
 
     /**
-     * Gets the start index to loop from.
+     * Sets the array that the ArrayIterator should iterate over.
+     * <p>
+     * If an array has previously been set (using the single-arg constructor
+     * or this method) then that array is discarded in favour of this one.
+     * Iteration is restarted at the start of the new array.
+     * Although this can be used to reset iteration, the {@link #reset()} method
+     * is a more effective choice.
      *
-     * @return the start index
-     * @since 4.0
-     */
-    public int getStartIndex() {
-        return this.startIndex;
-    }
-
-    /**
-     * Gets the end index to loop to.
-     *
-     * @return the end index
-     * @since 4.0
+     * @param array the array that the iterator should iterate over.
+     * @throws IllegalArgumentException if <code>array</code> is not an array.
+     * @throws NullPointerException if <code>array</code> is <code>null</code>
      */
-    public int getEndIndex() {
-        return this.endIndex;
+    public void setArray(final Object array) {
+        // Array.getLength throws IllegalArgumentException if the object is not
+        // an array or NullPointerException if the object is null.  This call
+        // is made before saving the array and resetting the index so that the
+        // array iterator remains in a consistent state if the argument is not
+        // an array or is null.
+        this.endIndex = Array.getLength(array);
+        this.startIndex = 0;
+        this.array = array;
+        this.index = 0;
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/collections4/iterators/ArrayListIterator.java b/src/main/java/org/apache/commons/collections4/iterators/ArrayListIterator.java
index 3f8b3779..3505b194 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/ArrayListIterator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/ArrayListIterator.java
@@ -55,6 +55,16 @@ public class ArrayListIterator<E> extends ArrayIterator<E>
     // Constructors
     // ----------------------------------------------------------------------
     /**
+     * Constructor for use with <code>setArray</code>.
+     * <p>
+     * Using this constructor, the iterator is equivalent to an empty iterator
+     * until {@link #setArray(Object)} is  called to establish the array to iterate over.
+     */
+    public ArrayListIterator() {
+        super();
+    }
+
+    /**
      * Constructs an ArrayListIterator that will iterate over the values in the
      * specified array.
      *
@@ -78,6 +88,7 @@ public class ArrayListIterator<E> extends ArrayIterator<E>
      */
     public ArrayListIterator(final Object array, final int startIndex) {
         super(array, startIndex);
+        this.startIndex = startIndex;
     }
 
     /**
@@ -94,6 +105,7 @@ public class ArrayListIterator<E> extends ArrayIterator<E>
      */
     public ArrayListIterator(final Object array, final int startIndex, final int endIndex) {
         super(array, startIndex, endIndex);
+        this.startIndex = startIndex;
     }
 
     // ListIterator interface
diff --git a/src/main/java/org/apache/commons/collections4/iterators/ObjectArrayIterator.java b/src/main/java/org/apache/commons/collections4/iterators/ObjectArrayIterator.java
index c11da69b..e0fd08a1 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/ObjectArrayIterator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/ObjectArrayIterator.java
@@ -36,16 +36,27 @@ import org.apache.commons.collections4.ResettableIterator;
 public class ObjectArrayIterator<E>
         implements Iterator<E>, ResettableIterator<E> {
 
+    // TODO Privatise fields? Mainly read-only access
+
     /** The array */
-    protected final E[] array;
+    protected E[] array = null;
     /** The start index to loop from */
-    protected final int startIndex;
+    protected int startIndex = 0;
     /** The end index to loop to */
-    protected final int endIndex;
+    protected int endIndex = 0;
     /** The current iterator index */
     protected int index = 0;
 
-    //-------------------------------------------------------------------------
+    /**
+     * Constructor for use with <code>setArray</code>.
+     * <p>
+     * Using this constructor, the iterator is equivalent to an empty iterator
+     * until {@link #setArray} is  called to establish the array to iterate over.
+     */
+    public ObjectArrayIterator() {
+        super();
+    }
+
     /**
      * Constructs an ObjectArrayIterator that will iterate over the values in the
      * specified array.
@@ -142,13 +153,37 @@ public class ObjectArrayIterator<E>
     /**
      * Gets the array that this iterator is iterating over.
      *
-     * @return the array this iterator iterates over
+     * @return the array this iterator iterates over, or <code>null</code> if
+     * the no-arg constructor was used and {@link #setArray} has never
+     * been called with a valid array.
      */
     public E[] getArray() {
         return this.array;
     }
 
     /**
+     * Sets the array that the ArrayIterator should iterate over.
+     * <p>
+     * This method may only be called once, otherwise an IllegalStateException
+     * will occur.
+     * <p>
+     * The {@link #reset} method can be used to reset the iterator if required.
+     *
+     * @param array  the array that the iterator should iterate over
+     * @throws IllegalStateException if the <code>array</code> was set in the constructor
+     * @throws NullPointerException if <code>array</code> is <code>null</code>
+     */
+    public void setArray(final E[] array) {
+        if (this.array != null) {
+            throw new IllegalStateException("The array to iterate over has already been set");
+        }
+        this.array = array;
+        this.startIndex = 0;
+        this.endIndex = array.length;
+        this.index = 0;
+    }
+
+    /**
      * Gets the start index to loop from.
      *
      * @return the start index
diff --git a/src/main/java/org/apache/commons/collections4/iterators/ObjectArrayListIterator.java b/src/main/java/org/apache/commons/collections4/iterators/ObjectArrayListIterator.java
index 257bd8a1..2028835e 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/ObjectArrayListIterator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/ObjectArrayListIterator.java
@@ -48,7 +48,16 @@ public class ObjectArrayListIterator<E> extends ObjectArrayIterator<E>
      */
     private int lastItemIndex = -1;
 
-    //-------------------------------------------------------------------------
+    /**
+     * Constructor for use with <code>setArray</code>.
+     * <p>
+     * Using this constructor, the iterator is equivalent to an empty iterator
+     * until {@link #setArray} is  called to establish the array to iterate over.
+     */
+    public ObjectArrayListIterator() {
+        super();
+    }
+
     /**
      * Constructs an ObjectArrayListIterator that will iterate over the values in the
      * specified array.
@@ -97,7 +106,7 @@ public class ObjectArrayListIterator<E> extends ObjectArrayIterator<E>
      * @return true if there is a previous element to return
      */
     public boolean hasPrevious() {
-        return this.index > getStartIndex();
+        return this.index > this.startIndex;
     }
 
     /**
@@ -135,7 +144,7 @@ public class ObjectArrayListIterator<E> extends ObjectArrayIterator<E>
      * @return the index of the item to be retrieved next
      */
     public int nextIndex() {
-        return this.index - getStartIndex();
+        return this.index - this.startIndex;
     }
 
     /**
@@ -144,7 +153,7 @@ public class ObjectArrayListIterator<E> extends ObjectArrayIterator<E>
      * @return the index of the item to be retrieved next
      */
     public int previousIndex() {
-        return this.index - getStartIndex() - 1;
+        return this.index - this.startIndex - 1;
     }
 
     /**
