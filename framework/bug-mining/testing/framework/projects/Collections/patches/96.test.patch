diff --git a/src/test/java/org/apache/commons/collections4/iterators/ArrayIterator2Test.java b/src/test/java/org/apache/commons/collections4/iterators/ArrayIterator2Test.java
index 8d313702..46fb8536 100644
--- a/src/test/java/org/apache/commons/collections4/iterators/ArrayIterator2Test.java
+++ b/src/test/java/org/apache/commons/collections4/iterators/ArrayIterator2Test.java
@@ -81,6 +81,29 @@ public class ArrayIterator2Test<E> extends AbstractIteratorTest<E> {
         }
     }
 
+    // proves that an ArrayIterator set with the constructor has the same number of elements
+    // as an ArrayIterator set with setArray(Object)
+    public void testSetArray() {
+        final Iterator<E> iter1 = makeArrayIterator(testArray);
+        int count1 = 0;
+        while (iter1.hasNext()) {
+            ++count1;
+            iter1.next();
+        }
+
+        assertEquals("the count should be right using the constructor", count1, testArray.length);
+
+        final ArrayIterator<E> iter2 = makeObject();
+        iter2.setArray(testArray);
+        int count2 = 0;
+        while (iter2.hasNext()) {
+            ++count2;
+            iter2.next();
+        }
+
+        assertEquals("the count should be right using setArray(Object)", count2, testArray.length);
+    }
+
     public void testIndexedArray() {
         Iterator<E> iter = makeArrayIterator(testArray, 2);
         int count = 0;
diff --git a/src/test/java/org/apache/commons/collections4/iterators/ArrayIteratorTest.java b/src/test/java/org/apache/commons/collections4/iterators/ArrayIteratorTest.java
index b2704df5..d98b7adb 100644
--- a/src/test/java/org/apache/commons/collections4/iterators/ArrayIteratorTest.java
+++ b/src/test/java/org/apache/commons/collections4/iterators/ArrayIteratorTest.java
@@ -77,6 +77,15 @@ public class ArrayIteratorTest<E> extends AbstractIteratorTest<E> {
         } catch (final NullPointerException e) {
             // expected
         }
+
+        final ArrayIterator<Object> iter = new ArrayIterator<Object>();
+        try {
+            iter.setArray(null);
+
+            fail("setArray(null) should throw a NullPointerException");
+        } catch (final NullPointerException e) {
+            // expected
+        }
     }
 
     public void testReset() {
diff --git a/src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIteratorTest.java b/src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIteratorTest.java
index 43ec17a3..b3c6b981 100644
--- a/src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIteratorTest.java
+++ b/src/test/java/org/apache/commons/collections4/iterators/ObjectArrayIteratorTest.java
@@ -94,6 +94,26 @@ public class ObjectArrayIteratorTest<E> extends AbstractIteratorTest<E> {
         } catch (final NullPointerException e) {
             // expected
         }
+
+        final ObjectArrayIterator<E> iter = makeArrayIterator();
+        try {
+            iter.setArray(null);
+
+            fail("setArray(null) should throw a NullPointerException");
+        } catch (final NullPointerException e) {
+            // expected
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    public void testDoubleSet() {
+        final ObjectArrayIterator<E> it = makeArrayIterator();
+        it.setArray((E[]) new String[0]);
+        try {
+            it.setArray((E[]) new String[0]);
+            fail();
+        } catch (final IllegalStateException ex) {
+        }
     }
 
     @SuppressWarnings("unchecked")
