<project name="Closure"  basedir="${basedir}">

    <property name="javac.debug" value="true" />

    <!-- script.dir property has to be provided from caller! -->
    <fail message="Property script.dir not set!" unless="script.dir" />

    <property name="junit.jar" value="${script.dir}/projects/lib/junit-4.11.jar"/>

    <!-- Dummy paths, in case not defined -->
    <path id="allclasspath.path" />
    <path id="srcclasspath.path" />
    <path id="classpath.path" />

    <!-- Include existing project build file -->
    <import file="${basedir}/build.xml" />

    <!-- Import overall biuld files for mutation targets -->
    <import file="../project.build.xml" />

    <!-- relevant classpaths from different build revisions -->
    <path id="test.classpath">
        <path refid="allclasspath.path" />
        <path refid="classpath.path" />
        <pathelement path="${build.dir}/test" />
    </path>
    <path id="compile.classpath">
        <path refid="srcclasspath.path" />
        <path refid="classpath.path" />
    </path>
    <!-- Values necessary for mutation scripting to work -->
    <property name="test.home" value="${testClasses.dir}" />
    <property name="build.home" value="${build.dir}" />

    <!-- Classpath to run mutation analysis -->
    <path id="major.classpath">
        <path refid="compile.classpath" />
        <path refid="test.classpath" />
    </path>


    <!-- property needs to be set for coverage to work -->
    <property name="cobertura.aux.classpath" value="${basedir}/lib/guava.jar" />

    <target name="compile.tests" depends="compile-tests" />

    <!-- We need to compile rhino.testing package before we can
         compile the generated test suites -->
    <target name="compile.gen.tests" depends="compile-tests">
       <antcall target="Defects4J.compile.gen.tests" />
    </target>

    <!-- List of all tests that reliably pass on the fixed version -->
    <fileset id="all.manual.tests" dir="${build.dir}/test" excludes="${exclude.list}">
        <include name="**/*Test.class" />
    </fileset>

<!--
    Run tests
-->
    <target name="test" depends="compile.tests"
            description="Runs the test cases">

        <junit printSummary="yes"
                haltonerror="no" haltonfailure="no" fork="no">

            <classpath>
                <path refid="test.classpath" />
				<path refid="cobertura.classpath.include" />
                <pathelement path="${formatter_cp}" />
            </classpath>
            <sysproperty key="OUTFILE" value="${OUTFILE}" />
            <formatter classname="edu.washington.cs.mut.testrunner.Formatter" usefile="false" />
            <test name="${test.entry.class}" methods="${test.entry.method}" if="test.entry.class" />

            <batchtest unless="test.entry.class">
                <fileset refid="all.manual.tests" />
            </batchtest>
        </junit>
        <!-- fail build in case we are running all classes, but there are none in the fileset -->
        <if> <not> <isset property="test.entry.class" /> </not> <then>
            <pathconvert refid="all.manual.tests" property="fileset.notempty" setonempty="false" />
            <fail unless="fileset.notempty" message="Test is running with empty fileset" />
        </then> </if>
    </target>
</project>
