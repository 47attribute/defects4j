diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java
index 80a9510f..abf30102 100644
--- a/src/com/google/javascript/jscomp/TypeInference.java
+++ b/src/com/google/javascript/jscomp/TypeInference.java
@@ -1172,7 +1172,11 @@ class TypeInference
       return;
     }
 
-    type.matchConstraint(constraint);
+    ObjectType constraintObj =
+        ObjectType.cast(constraint.restrictByNotNullOrUndefined());
+    if (constraintObj != null) {
+      type.matchConstraint(constraintObj);
+    }
   }
 
   /**
diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java
index 8c6a19d8..2b19bcce 100644
--- a/src/com/google/javascript/rhino/jstype/JSType.java
+++ b/src/com/google/javascript/rhino/jstype/JSType.java
@@ -1240,5 +1240,5 @@ public abstract class JSType implements Serializable {
    * infer that an object literal matches its constraint (much like
    * how the java compiler does reverse-inference to figure out generics).
    */
-  public void matchConstraint(JSType constraint) {}
+  public void matchConstraint(ObjectType constraint) {}
 }
diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java
index 41cddd55..9980845a 100644
--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java
+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java
@@ -553,7 +553,7 @@ class PrototypeObjectType extends ObjectType {
   }
 
   @Override
-  public void matchConstraint(JSType constraint) {
+  public void matchConstraint(ObjectType constraintObj) {
     // We only want to match constraints on anonymous types.
     if (hasReferenceName()) {
       return;
@@ -568,29 +568,20 @@ class PrototypeObjectType extends ObjectType {
     // We want to modify the object literal to match the constraint, by
     // taking any each property on the record and trying to match
     // properties on this object.
-    if (constraint.isRecordType()) {
-      matchRecordTypeConstraint(constraint.toObjectType());
-    } else if (constraint.isUnionType()) {
-      for (JSType alt : constraint.toMaybeUnionType().getAlternates()) {
-        if (alt.isRecordType()) {
-          matchRecordTypeConstraint(alt.toObjectType());
+    if (constraintObj.isRecordType()) {
+      for (String prop : constraintObj.getOwnPropertyNames()) {
+        JSType propType = constraintObj.getPropertyType(prop);
+        if (!isPropertyTypeDeclared(prop)) {
+          JSType typeToInfer = propType;
+          if (!hasProperty(prop)) {
+            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
+                .getLeastSupertype(propType);
+          }
+          defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }
   }
 
-  public void matchRecordTypeConstraint(ObjectType constraintObj) {
-    for (String prop : constraintObj.getOwnPropertyNames()) {
-      JSType propType = constraintObj.getPropertyType(prop);
-      if (!isPropertyTypeDeclared(prop)) {
-        JSType typeToInfer = propType;
-        if (!hasProperty(prop)) {
-          typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-              .getLeastSupertype(propType);
-        }
-        defineInferredProperty(prop, typeToInfer, null);
-      }
-    }
-  }
 
 }
diff --git a/src/com/google/javascript/rhino/jstype/ProxyObjectType.java b/src/com/google/javascript/rhino/jstype/ProxyObjectType.java
index b7416b36..cc5b75b9 100644
--- a/src/com/google/javascript/rhino/jstype/ProxyObjectType.java
+++ b/src/com/google/javascript/rhino/jstype/ProxyObjectType.java
@@ -421,7 +421,7 @@ class ProxyObjectType extends ObjectType {
   }
 
   @Override
-  public void matchConstraint(JSType constraint) {
+  public void matchConstraint(ObjectType constraint) {
     referencedType.matchConstraint(constraint);
   }
 
diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java
index 58195464..f9aacdf4 100644
--- a/src/com/google/javascript/rhino/jstype/UnionType.java
+++ b/src/com/google/javascript/rhino/jstype/UnionType.java
@@ -588,9 +588,9 @@ public class UnionType extends JSType {
   }
 
   @Override
-  public void matchConstraint(JSType constraint) {
+  public void matchConstraint(ObjectType constraintObj) {
     for (JSType alternate : alternates) {
-      alternate.matchConstraint(constraint);
+      alternate.matchConstraint(constraintObj);
     }
   }
 
