diff --git a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java
index edce9bfd..2c6f22fe 100644
--- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java
+++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java
@@ -691,14 +691,9 @@ public class JSTypeRegistry implements Serializable {
     if (typesIndexedByProperty.containsKey(propertyName)) {
       for (JSType alt :
                typesIndexedByProperty.get(propertyName).getAlternates()) {
-        JSType greatestSubtype = alt.getGreatestSubtype(type);
-        if (!greatestSubtype.isEmptyType()) {
+        if (!alt.getGreatestSubtype(type).isEmptyType()) {
           // We've found a type with this property. Now we just have to make
           // sure it's not a type used for internal bookkeeping.
-          RecordType maybeRecordType = greatestSubtype.toMaybeRecordType();
-          if (maybeRecordType != null && maybeRecordType.isSynthetic()) {
-            continue;
-          }
 
           return true;
         }
diff --git a/src/com/google/javascript/rhino/jstype/ObjectType.java b/src/com/google/javascript/rhino/jstype/ObjectType.java
index 37bd4870..82d229de 100644
--- a/src/com/google/javascript/rhino/jstype/ObjectType.java
+++ b/src/com/google/javascript/rhino/jstype/ObjectType.java
@@ -287,10 +287,6 @@ public abstract class ObjectType extends JSType implements StaticScope<JSType> {
    * don't actually exist in the user's program. They're just used for
    * bookkeeping in the type system.
    */
-  public final boolean defineSynthesizedProperty(String propertyName,
-      JSType type, Node propertyNode) {
-    return defineProperty(propertyName, type, false, propertyNode);
-  }
 
   /**
    * Defines a property whose type is inferred.
diff --git a/src/com/google/javascript/rhino/jstype/RecordType.java b/src/com/google/javascript/rhino/jstype/RecordType.java
index 8ff279cb..a1295d11 100755
--- a/src/com/google/javascript/rhino/jstype/RecordType.java
+++ b/src/com/google/javascript/rhino/jstype/RecordType.java
@@ -65,13 +65,8 @@ class RecordType extends PrototypeObjectType {
   private static final long serialVersionUID = 1L;
 
   private final SortedMap<String, JSType> properties = Maps.newTreeMap();
-  private final boolean declared;
   private boolean isFrozen = false;
 
-  RecordType(JSTypeRegistry registry, Map<String, RecordProperty> properties) {
-    this(registry, properties, true);
-  }
-
   /**
    * Creates a record type.
    *
@@ -84,11 +79,9 @@ class RecordType extends PrototypeObjectType {
    * @throws IllegalStateException if the {@code RecordProperty} associated
    *         with a property is null.
    */
-  RecordType(JSTypeRegistry registry, Map<String, RecordProperty> properties,
-      boolean declared) {
+  RecordType(JSTypeRegistry registry, Map<String, RecordProperty> properties) {
     super(registry, null, null);
     setPrettyPrint(true);
-    this.declared = declared;
 
     for (String property : properties.keySet()) {
       RecordProperty prop = properties.get(property);
@@ -96,13 +89,7 @@ class RecordType extends PrototypeObjectType {
         throw new IllegalStateException(
             "RecordProperty associated with a property should not be null!");
       }
-      if (declared) {
-        defineDeclaredProperty(
-            property, prop.getType(), prop.getPropertyNode());
-      } else {
-        defineSynthesizedProperty(
-            property, prop.getType(), prop.getPropertyNode());
-      }
+      defineDeclaredProperty(property, prop.getType(), prop.getPropertyNode());
     }
 
     // Freeze the record type.
@@ -110,9 +97,6 @@ class RecordType extends PrototypeObjectType {
   }
 
   /** @return Is this synthesized for internal bookkeeping? */
-  boolean isSynthetic() {
-    return !declared;
-  }
 
   @Override
   public boolean isEquivalentTo(JSType other) {
@@ -163,7 +147,6 @@ class RecordType extends PrototypeObjectType {
     if (that.isRecordType()) {
       RecordType thatRecord = that.toMaybeRecordType();
       RecordTypeBuilder builder = new RecordTypeBuilder(registry);
-      builder.setSynthesized(true);
 
       // The greatest subtype consists of those *unique* properties of both
       // record types. If any property conflicts, then the NO_TYPE type
diff --git a/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java b/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java
index 60d1e103..f5998c72 100755
--- a/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java
+++ b/src/com/google/javascript/rhino/jstype/RecordTypeBuilder.java
@@ -51,7 +51,6 @@ import java.util.HashMap;
  */
 public class RecordTypeBuilder {
   private boolean isEmpty = true;
-  private boolean isDeclared = true;
   private final JSTypeRegistry registry;
   private final HashMap<String, RecordProperty> properties = Maps.newHashMap();
 
@@ -60,9 +59,6 @@ public class RecordTypeBuilder {
   }
 
   /** See the comments on RecordType about synthetic types. */
-  void setSynthesized(boolean synthesized) {
-    isDeclared = !synthesized;
-  }
 
   /**
    * Adds a property with the given name and type to the record type.
@@ -92,8 +88,7 @@ public class RecordTypeBuilder {
        return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
     }
 
-    return new RecordType(
-        registry, Collections.unmodifiableMap(properties), isDeclared);
+    return registry.createRecordType(Collections.unmodifiableMap(properties));
   }
 
   static class RecordProperty {
