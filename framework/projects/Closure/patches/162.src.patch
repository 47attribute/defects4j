diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java
index aaf84703..044bdd93 100644
--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -599,11 +599,8 @@ public final class NodeUtil {
       case Token.GETELEM:
         return true;
 
-      case Token.FUNCTION:
         // Anonymous functions definitions are not changed by side-effects,
         // and named functions are not part of expressions.
-        Preconditions.checkState(NodeUtil.isAnonymousFunction(n));
-        return false;
     }
 
     for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
diff --git a/src/com/google/javascript/jscomp/PureFunctionIdentifier.java b/src/com/google/javascript/jscomp/PureFunctionIdentifier.java
index 894d65ba..cbf785dc 100644
--- a/src/com/google/javascript/jscomp/PureFunctionIdentifier.java
+++ b/src/com/google/javascript/jscomp/PureFunctionIdentifier.java
@@ -174,46 +174,28 @@ class PureFunctionIdentifier implements CompilerPass {
    */
   private static Collection<Definition> getCallableDefinitions(
       DefinitionProvider definitionProvider, Node name) {
-    if (NodeUtil.isGetProp(name) || NodeUtil.isName(name)) {
-      List<Definition> result = Lists.newArrayList();
+    List<Definition> result = Lists.newArrayList();
 
-      Collection<Definition> decls =
-          definitionProvider.getDefinitionsReferencedAt(name);
-      if (decls == null) {
+    if (!NodeUtil.isGetProp(name) && !NodeUtil.isName(name)) {
         return null;
       }
 
-      for (Definition current : decls) {
-        Node rValue = current.getRValue();
-        if ((rValue != null) && NodeUtil.isFunction(rValue)) {
-          result.add(current);
-        } else {
+    Collection<Definition> decls =
+        definitionProvider.getDefinitionsReferencedAt(name);
+    if (decls == null) {
           return null;
-        }
-      }
-
-      return result;
-    } else if (name.getType() == Token.OR || name.getType() == Token.HOOK) {
-      Node firstVal;
-      if (name.getType() == Token.HOOK) {
-        firstVal = name.getFirstChild().getNext();
-      } else {
-        firstVal = name.getFirstChild();
       }
 
-      Collection<Definition> defs1 = getCallableDefinitions(definitionProvider,
-                                                            firstVal);
-      Collection<Definition> defs2 = getCallableDefinitions(definitionProvider,
-                                                            firstVal.getNext());
-      if (defs1 != null && defs2 != null) {
-        defs1.addAll(defs2);
-        return defs1;
+    for (Definition current : decls) {
+      Node rValue = current.getRValue();
+      if ((rValue != null) && NodeUtil.isFunction(rValue)) {
+        result.add(current);
       } else {
         return null;
       }
-    } else {
-      return null;
     }
+
+    return result;
   }
 
   /**
