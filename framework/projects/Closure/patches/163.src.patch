diff --git a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java
index 77573133..42eaa7d4 100644
--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java
+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java
@@ -326,9 +326,7 @@ abstract class AbstractCommandLineRunner<A extends Compiler,
       } catch (NumberFormatException ignored) {
         numJsFiles = -1;
       }
-      
-      // We will allow modules of zero input.
-      if (numJsFiles < 0) {
+      if (numJsFiles < 1) {
         throw new FlagUsageException("Invalid js file count '" + parts[1]
             + "' for module: " + name);
       }
diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java
index 448e2b56..07fac712 100644
--- a/src/com/google/javascript/jscomp/Compiler.java
+++ b/src/com/google/javascript/jscomp/Compiler.java
@@ -60,21 +60,21 @@ import java.util.logging.Logger;
 *
  */
 public class Compiler extends AbstractCompiler {
-  CompilerOptions options = null;
+  CompilerOptions options_ = null;
 
   private PassConfig passes = null;
 
   // The externs inputs
-  private CompilerInput[] externs;
+  private CompilerInput[] externs_;
 
   // The JS source modules
-  private JSModule[] modules;
+  private JSModule[] modules_;
 
   // The graph of the JS source modules
-  private JSModuleGraph moduleGraph;
+  private JSModuleGraph moduleGraph_;
 
   // The JS source inputs
-  private CompilerInput[] inputs;
+  private CompilerInput[] inputs_;
 
   // error manager to which error management is delegated
   private ErrorManager errorManager;
@@ -87,13 +87,13 @@ public class Compiler extends AbstractCompiler {
   Node jsRoot;
   Node externAndJsRoot;
 
-  private Map<String, CompilerInput> inputsByName;
+  private Map<String, CompilerInput> inputsByName_;
 
   /** The source code map */
-  private SourceMap sourceMap;
+  private SourceMap sourceMap_;
 
   /** The externs created from the exports.  */
-  private String externExports = null;
+  private String externExports_ = null;
 
   /**
    * Ids for function inlining so that each declared name remains
@@ -111,10 +111,10 @@ public class Compiler extends AbstractCompiler {
   private boolean useThreads = true;
 
   /** The function information map */
-  private FunctionInformationMap functionInformationMap;
+  private FunctionInformationMap functionInformationMap_;
 
   /** Debugging information */
-  private final StringBuilder debugLog = new StringBuilder();
+  private final StringBuilder debugLog_ = new StringBuilder();
 
   /** Detects Google-specific coding conventions. */
   CodingConvention defaultCodingConvention = new GoogleCodingConvention();
@@ -151,7 +151,7 @@ public class Compiler extends AbstractCompiler {
    * setting configuration for this logger affects all loggers
    *  in other classes within the compiler.
    */
-  private static final Logger logger =
+  private static final Logger logger_ =
       Logger.getLogger("com.google.javascript.jscomp");
 
   private final PrintStream outStream;
@@ -209,8 +209,8 @@ public class Compiler extends AbstractCompiler {
    * {@link CompilerOptions}.
    */
   private MessageFormatter createMessageFormatter() {
-    boolean colorize = options.shouldColorizeErrorOutput();
-    return options.errorFormat.toFormatter(this, colorize);
+    boolean colorize = options_.shouldColorizeErrorOutput();
+    return options_.errorFormat.toFormatter(this, colorize);
   }
 
   /**
@@ -218,15 +218,15 @@ public class Compiler extends AbstractCompiler {
    * a normal compile() job.
    */
   public void initOptions(CompilerOptions options) {
-    this.options = options;
+    options_ = options;
     if (errorManager == null) {
       if (outStream == null) {
         setErrorManager(
-            new LoggerErrorManager(createMessageFormatter(), logger));
+            new LoggerErrorManager(createMessageFormatter(), logger_));
       } else {
         PrintStreamErrorManager printer =
             new PrintStreamErrorManager(createMessageFormatter(), outStream);
-        printer.setSummaryDetailLevel(options.summaryDetailLevel);
+        printer.setSummaryDetailLevel(options_.summaryDetailLevel);
         setErrorManager(printer);
       }
     }
@@ -239,10 +239,10 @@ public class Compiler extends AbstractCompiler {
       CompilerOptions options) {
     initOptions(options);
     
-    this.externs = makeCompilerInput(externs, true);
-    this.modules = null;
-    this.moduleGraph = null;
-    this.inputs = makeCompilerInput(inputs, false);
+    externs_ = makeCompilerInput(externs, true);
+    modules_ = null;
+    moduleGraph_ = null;
+    inputs_ = makeCompilerInput(inputs, false);
     initBasedOnOptions();
 
     initInputsByNameMap();
@@ -261,14 +261,13 @@ public class Compiler extends AbstractCompiler {
     initOptions(options);
 
     checkFirstModule(modules);
-    fillEmptyModules(modules);
 
-    this.externs = makeCompilerInput(externs, true);
-    this.modules = modules;
+    externs_ = makeCompilerInput(externs, true);
+    modules_ = modules;
     // Generate the module graph, and report any errors in the module
     // specification as errors.
     try {
-      this.moduleGraph = new JSModuleGraph(modules);
+      moduleGraph_ = new JSModuleGraph(modules);
     } catch (JSModuleGraph.ModuleDependenceException e) {
       // problems with the module format.  Report as an error.  The
       // message gives all details.
@@ -276,7 +275,7 @@ public class Compiler extends AbstractCompiler {
           e.getModule().getName(), e.getDependentModule().getName()));
       return;
     }
-    this.inputs = getAllInputsFromModules();
+    inputs_ = getAllInputsFromModules();
     initBasedOnOptions();
 
     initInputsByNameMap();
@@ -287,8 +286,8 @@ public class Compiler extends AbstractCompiler {
    */
   private void initBasedOnOptions() {
     // Create the source map if necessary.
-    if (options.sourceMapOutputPath != null) {
-      sourceMap = new SourceMap();
+    if (options_.sourceMapOutputPath != null) {
+      sourceMap_ = new SourceMap();
     }
   }
 
@@ -321,20 +320,7 @@ public class Compiler extends AbstractCompiler {
           modules[0].getName()));
     }
   }
-  
-  /**
-   * Fill any empty modules with a place holder file. It makes any cross module
-   * motion easier.
-   */
-  private void fillEmptyModules(JSModule[] modules) {
-    for (int i = 1; i < modules.length; i ++) {
-      JSModule module = modules[i];
-      if (module.getInputs().isEmpty()) {
-        module.add(JSSourceFile.fromCode("[" + module.getName() + "]", ""));
-      }
-    }
-  }
-  
+
   static final DiagnosticType DUPLICATE_INPUT_IN_MODULES =
       DiagnosticType.error("JSC_DUPLICATE_INPUT_IN_MODULES_ERROR",
           "Two modules cannot contain the same input, but module {0} and {1} "
@@ -346,7 +332,7 @@ public class Compiler extends AbstractCompiler {
    * after the {@link #init(JSSourceFile[], JSModule[], CompilerOptions)} call.
    */
   public void rebuildInputsFromModules() {
-    inputs = getAllInputsFromModules();
+    inputs_ = getAllInputsFromModules();
     initInputsByNameMap();
   }
 
@@ -357,7 +343,7 @@ public class Compiler extends AbstractCompiler {
   private CompilerInput[] getAllInputsFromModules() {
     List<CompilerInput> inputs = new ArrayList<CompilerInput>();
     Map<String, JSModule> inputMap = new HashMap<String, JSModule>();
-    for (JSModule module : modules) {
+    for (JSModule module : modules_) {
       for (CompilerInput input : module.getInputs()) {
         String inputName = input.getName();
         JSModule firstModule = inputMap.get(inputName);
@@ -390,19 +376,19 @@ public class Compiler extends AbstractCompiler {
    * duplicate inputs.
    */
   void initInputsByNameMap() {
-    inputsByName = new HashMap<String, CompilerInput>();
-    for (CompilerInput input : externs) {
+    inputsByName_ = new HashMap<String, CompilerInput>();
+    for (CompilerInput input : externs_) {
       String name = input.getName();
-      if (!inputsByName.containsKey(name)) {
-        inputsByName.put(name, input);
+      if (!inputsByName_.containsKey(name)) {
+        inputsByName_.put(name, input);
       } else {
         report(JSError.make(DUPLICATE_EXTERN_INPUT, name));
       }
     }
-    for (CompilerInput input : inputs) {
+    for (CompilerInput input : inputs_) {
       String name = input.getName();
-      if (!inputsByName.containsKey(name)) {
-        inputsByName.put(name, input);
+      if (!inputsByName_.containsKey(name)) {
+        inputsByName_.put(name, input);
       } else {
         report(JSError.make(DUPLICATE_INPUT, name));
       }
@@ -495,7 +481,7 @@ public class Compiler extends AbstractCompiler {
     // increase the stack size for *every* thread (which is what -Xss does).
     // Might want to add thread pool support for clients that compile a lot.
 
-    final boolean dumpTraceReport = options.tracer.isOn();
+    final boolean dumpTraceReport = options_.tracer.isOn();
     final Object[] result = new Object[1];
     final Throwable[] exception = new Throwable[1];
     Runnable runnable = new Runnable() {
@@ -548,33 +534,33 @@ public class Compiler extends AbstractCompiler {
       return;
     }
 
-    if (options.nameAnonymousFunctionsOnly) {
+    if (options_.nameAnonymousFunctionsOnly) {
       // TODO(nicksantos): Move this into an instrument() phase maybe?
       check();
       return;
     }
 
-    if (!options.skipAllPasses) {
+    if (!options_.skipAllPasses) {
       check();
       if (hasErrors()) {
         return;
       }
 
-      if (options.externExportsPath != null) {
+      if (options_.externExportsPath != null) {
         externExports();
       }
 
       // IDE-mode is defined to stop here, before the heavy rewriting begins.
-      if (!options.ideMode) {
+      if (!options_.ideMode) {
         optimize();
       }
     }
 
-    if (options.recordFunctionInformation) {
+    if (options_.recordFunctionInformation) {
       recordFunctionInformation();
     }
 
-    if (options.devMode == DevMode.START_AND_END) {
+    if (options_.devMode == DevMode.START_AND_END) {
       runSanityCheck();
     }
   }
@@ -595,7 +581,7 @@ public class Compiler extends AbstractCompiler {
    * overriding this.
    */
   PassConfig createPassConfigInternal() {
-    return new DefaultPassConfig(options);
+    return new DefaultPassConfig(options_);
   }
 
   /**
@@ -631,7 +617,7 @@ public class Compiler extends AbstractCompiler {
     runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);
 
     PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);
-    if (options.devMode == DevMode.EVERY_PASS) {
+    if (options_.devMode == DevMode.EVERY_PASS) {
       phaseOptimizer.setSanityCheck(sanityCheck);
     }
     phaseOptimizer.consume(getPassConfig().getChecks());
@@ -641,20 +627,20 @@ public class Compiler extends AbstractCompiler {
     }
 
     // TODO(nicksantos): clean this up. The flow here is too hard to follow.
-    if (options.nameAnonymousFunctionsOnly) {
+    if (options_.nameAnonymousFunctionsOnly) {
       return;
     }
 
-    if (options.removeTryCatchFinally) {
+    if (options_.removeTryCatchFinally) {
       removeTryCatchFinally();
     }
 
-    if (!options.stripTypes.isEmpty() ||
-        !options.stripNameSuffixes.isEmpty() ||
-        !options.stripTypePrefixes.isEmpty() ||
-        !options.stripNamePrefixes.isEmpty()) {
-      stripCode(options.stripTypes, options.stripNameSuffixes,
-          options.stripTypePrefixes, options.stripNamePrefixes);
+    if (!options_.stripTypes.isEmpty() ||
+        !options_.stripNameSuffixes.isEmpty() ||
+        !options_.stripTypePrefixes.isEmpty() ||
+        !options_.stripNamePrefixes.isEmpty()) {
+      stripCode(options_.stripTypes, options_.stripNameSuffixes,
+          options_.stripTypePrefixes, options_.stripNamePrefixes);
     }
 
     runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);
@@ -668,13 +654,13 @@ public class Compiler extends AbstractCompiler {
   }
 
   private void externExports() {
-    logger.info("Creating extern file for exports");
+    logger_.info("Creating extern file for exports");
     startPass("externExports");
 
     ExternExportsPass pass = new ExternExportsPass(this);
     process(pass);
 
-    externExports = pass.getGeneratedExterns();
+    externExports_ = pass.getGeneratedExterns();
 
     endPass();
   }
@@ -692,7 +678,7 @@ public class Compiler extends AbstractCompiler {
   };
 
   private void maybeSanityCheck() {
-    if (options.devMode == DevMode.EVERY_PASS) {
+    if (options_.devMode == DevMode.EVERY_PASS) {
       runSanityCheck();
     }
   }
@@ -705,7 +691,7 @@ public class Compiler extends AbstractCompiler {
    * Removes try/catch/finally statements for easier debugging.
    */
   void removeTryCatchFinally() {
-    logger.info("Remove try/catch/finally");
+    logger_.info("Remove try/catch/finally");
     startPass("removeTryCatchFinally");
     RemoveTryCatch r = new RemoveTryCatch(this);
     process(r);
@@ -718,7 +704,7 @@ public class Compiler extends AbstractCompiler {
    */
   void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,
       Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {
-    logger.info("Strip code");
+    logger_.info("Strip code");
     startPass("stripCode");
     StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,
         stripTypePrefixes, stripNamePrefixes);
@@ -730,10 +716,10 @@ public class Compiler extends AbstractCompiler {
    * Runs custom passes that are designated to run at a particular time.
    */
   private void runCustomPasses(CustomPassExecutionTime executionTime) {
-    if (options.customPasses != null) {
+    if (options_.customPasses != null) {
       Tracer t = newTracer("runCustomPasses");
       try {
-        for (CompilerPass p : options.customPasses.get(executionTime)) {
+        for (CompilerPass p : options_.customPasses.get(executionTime)) {
           process(p);
         }
       } finally {
@@ -774,7 +760,7 @@ public class Compiler extends AbstractCompiler {
   Tracer newTracer(String passName) {
     String comment = passName
         + (recentChange.hasCodeChanged() ? " on recently changed AST" : "");
-    if (options.tracer.isOn()) {
+    if (options_.tracer.isOn()) {
       tracker.recordPassStart(passName);
     }
     return new Tracer("Compiler", comment);
@@ -782,7 +768,7 @@ public class Compiler extends AbstractCompiler {
 
   void stopTracer(Tracer t, String passName) {
     long result = t.stop();
-    if (options.tracer.isOn()) {
+    if (options_.tracer.isOn()) {
       tracker.recordPassStop(passName, result);
     }
   }
@@ -792,10 +778,10 @@ public class Compiler extends AbstractCompiler {
    */
   public Result getResult() {
     PassConfig.State state = getPassConfig().getIntermediateState();
-    return new Result(getErrors(), getWarnings(), debugLog.toString(),
+    return new Result(getErrors(), getWarnings(), debugLog_.toString(),
         state.variableMap, state.propertyMap,
-        state.anonymousFunctionNameMap, functionInformationMap,
-        sourceMap, externExports, state.cssNames);
+        state.anonymousFunctionNameMap, functionInformationMap_,
+        sourceMap_, externExports_, state.cssNames);
   }
 
   /**
@@ -876,8 +862,8 @@ public class Compiler extends AbstractCompiler {
 
   @Override
   boolean areNodesEqualForInlining(Node n1, Node n2) {
-    if (options.ambiguateProperties ||
-        options.disambiguateProperties) {
+    if (options_.ambiguateProperties ||
+        options_.disambiguateProperties) {
       // The type based optimizations require that type information is preserved
       // during other optimizations.
       return n1.checkTreeTypeAwareEqualsSilent(n2);
@@ -895,17 +881,17 @@ public class Compiler extends AbstractCompiler {
 
   @Override
   public CompilerInput getInput(String name) {
-    return inputsByName.get(name);
+    return inputsByName_.get(name);
   }
 
   @Override
   public CompilerInput newExternInput(String name) {
-    if (inputsByName.containsKey(name)) {
+    if (inputsByName_.containsKey(name)) {
       throw new IllegalArgumentException("Conflicting externs name: " + name);
     }
     SourceAst ast = new SyntheticAst(name);
     CompilerInput input = new CompilerInput(ast, name, true);
-    inputsByName.put(name, input);
+    inputsByName_.put(name, input);
     externsRoot.addChildToFront(ast.getAstRoot(this));
     return input;
   }
@@ -916,12 +902,12 @@ public class Compiler extends AbstractCompiler {
     Preconditions.checkState(
         getInput(sourceName) == null,
         "Duplicate input of name " + sourceName);
-    inputsByName.put(sourceName, new CompilerInput(ast));
+    inputsByName_.put(sourceName, new CompilerInput(ast));
   }
 
   @Override
   JSModuleGraph getModuleGraph() {
-    return moduleGraph;
+    return moduleGraph_;
   }
 
   @Override
@@ -948,7 +934,7 @@ public class Compiler extends AbstractCompiler {
       ChainableReverseAbstractInterpreter interpreter =
           new SemanticReverseAbstractInterpreter(
               getCodingConvention(), getTypeRegistry());
-      if (options.closurePass) {
+      if (options_.closurePass) {
         interpreter = new ClosureReverseAbstractInterpreter(
             getCodingConvention(), getTypeRegistry())
             .append(interpreter).getFirst();
@@ -974,7 +960,7 @@ public class Compiler extends AbstractCompiler {
    *     and the main root
    */
   Node parseInputs() {
-    boolean devMode = options.devMode != DevMode.OFF;
+    boolean devMode = options_.devMode != DevMode.OFF;
 
     // If old roots exist (we are parsing a second time), detach each of the
     // individual file parse trees.
@@ -989,9 +975,9 @@ public class Compiler extends AbstractCompiler {
     jsRoot = new Node(Token.BLOCK);
     jsRoot.setIsSyntheticBlock(true);
 
-    if (options.tracer.isOn()) {
+    if (options_.tracer.isOn()) {
       tracker = new PerformanceTracker(jsRoot,
-          options.tracer == TracerMode.ALL);
+          options_.tracer == TracerMode.ALL);
       addChangeHandler(tracker.getCodeChangeHandler());
     }
 
@@ -1001,7 +987,7 @@ public class Compiler extends AbstractCompiler {
       // Parse externs sources.
       externsRoot = new Node(Token.BLOCK);
       externsRoot.setIsSyntheticBlock(true);
-      for (CompilerInput input : externs) {
+      for (CompilerInput input : externs_) {
         Node n = input.getAstRoot(this);
         if (hasErrors()) {
           return null;
@@ -1009,7 +995,7 @@ public class Compiler extends AbstractCompiler {
         externsRoot.addChildToBack(n);
       }
 
-      for (CompilerInput input : inputs) {
+      for (CompilerInput input : inputs_) {
         Node n = input.getAstRoot(this);
         if (hasErrors()) {
           return null;
@@ -1027,8 +1013,8 @@ public class Compiler extends AbstractCompiler {
           }
         }
 
-        if (options.sourceMapOutputPath != null ||
-            options.nameReferenceReportPath != null) {
+        if (options_.sourceMapOutputPath != null ||
+            options_.nameReferenceReportPath != null) {
 
           // Annotate the nodes in the tree with information from the
           // input file. This information is used to construct the SourceMap.
@@ -1059,12 +1045,12 @@ public class Compiler extends AbstractCompiler {
   Node parseSyntheticCode(String js) {
     CompilerInput input = new CompilerInput(
         JSSourceFile.fromCode(" [synthetic] ", js));
-    inputsByName.put(input.getName(), input);
+    inputsByName_.put(input.getName(), input);
     return input.getAstRoot(this);
   }
 
   void initCompilerOptionsIfTesting() {
-    if (options == null) {
+    if (options_ == null) {
       // initialization for tests that don't initialize the compiler
       // by the normal mechanisms.
       initOptions(new CompilerOptions());
@@ -1081,10 +1067,10 @@ public class Compiler extends AbstractCompiler {
     initCompilerOptionsIfTesting();
     CompilerInput input = new CompilerInput(
         JSSourceFile.fromCode(" [testcode] ", js));
-    if (inputsByName == null) {
-      inputsByName = Maps.newHashMap();
+    if (inputsByName_ == null) {
+      inputsByName_ = Maps.newHashMap();
     }
-    inputsByName.put(input.getName(), input);
+    inputsByName_.put(input.getName(), input);
     return input.getAstRoot(this);
   }
 
@@ -1130,11 +1116,11 @@ public class Compiler extends AbstractCompiler {
       public String[] call() throws Exception {
         Tracer tracer = newTracer("toSourceArray");
         try {
-          int numInputs = inputs.length;
+          int numInputs = inputs_.length;
           String[] sources = new String[numInputs];
           CodeBuilder cb = new CodeBuilder();
           for (int i = 0; i < numInputs; i++) {
-            Node scriptNode = inputs[i].getAstRoot(Compiler.this);
+            Node scriptNode = inputs_[i].getAstRoot(Compiler.this);
             cb.reset();
             toSource(cb, i, scriptNode);
             sources[i] = cb.toString();
@@ -1215,13 +1201,13 @@ public class Compiler extends AbstractCompiler {
                        final Node root) {
     runInCompilerThread(new Callable<Void>() {
       public Void call() throws Exception {
-        if (options.printInputDelimiter) {
+        if (options_.printInputDelimiter) {
           if ((cb.getLength() > 0) && !cb.endsWith("\n")) {
             cb.append("\n");  // Make sure that the label starts on a new line
           }
           Preconditions.checkState(root.getType() == Token.SCRIPT);
           
-          String delimiter = options.inputDelimiter;
+          String delimiter = options_.inputDelimiter;
           
           String sourceName = (String)root.getProp(Node.SOURCENAME_PROP);
           Preconditions.checkState(sourceName != null);
@@ -1242,8 +1228,8 @@ public class Compiler extends AbstractCompiler {
 
         // If there is a valid source map, then indicate to it that the current
         // root node's mappings are offset by the given string builder buffer.
-        if (options.sourceMapOutputPath != null) {
-          sourceMap.setStartingPosition(
+        if (options_.sourceMapOutputPath != null) {
+          sourceMap_.setStartingPosition(
               cb.getLineIndex(), cb.getColumnIndex());
         }
 
@@ -1267,10 +1253,10 @@ public class Compiler extends AbstractCompiler {
     initCompilerOptionsIfTesting();
     
     CodePrinter.Builder builder = new CodePrinter.Builder(n);
-    builder.setPrettyPrint(options.prettyPrint);
-    builder.setLineBreak(options.lineBreak);
-    builder.setSourceMap(sourceMap);
-    builder.setOutputCharset(options.outputCharset);
+    builder.setPrettyPrint(options_.prettyPrint);
+    builder.setLineBreak(options_.lineBreak);
+    builder.setSourceMap(sourceMap_);
+    builder.setOutputCharset(options_.outputCharset);
     return builder.build();
   }
 
@@ -1335,7 +1321,7 @@ public class Compiler extends AbstractCompiler {
 
   public void optimize() {
     PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);
-    if (options.devMode == DevMode.EVERY_PASS) {
+    if (options_.devMode == DevMode.EVERY_PASS) {
       phaseOptimizer.setSanityCheck(sanityCheck);
     }
     phaseOptimizer.consume(getPassConfig().getOptimizations());
@@ -1347,12 +1333,12 @@ public class Compiler extends AbstractCompiler {
 
   @Override
   void setCssRenamingMap(CssRenamingMap map) {
-    options.cssRenamingMap = map;
+    options_.cssRenamingMap = map;
   }
 
   @Override
   CssRenamingMap getCssRenamingMap() {
-    return options.cssRenamingMap;
+    return options_.cssRenamingMap;
   }
 
   /**
@@ -1363,19 +1349,19 @@ public class Compiler extends AbstractCompiler {
    * specifically for that target.
    */
   public void processDefines() {
-    (new DefaultPassConfig(options)).processDefines.create(this)
+    (new DefaultPassConfig(options_)).processDefines.create(this)
         .process(externsRoot, jsRoot);
   }
 
   boolean isInliningForbidden() {
-    return options.propertyRenaming == PropertyRenamingPolicy.HEURISTIC ||
-        options.propertyRenaming ==
+    return options_.propertyRenaming == PropertyRenamingPolicy.HEURISTIC ||
+        options_.propertyRenaming ==
             PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;
   }
 
   /** Control Flow Analysis. */
   ControlFlowGraph<Node> computeCFG() {
-    logger.info("Computing Control Flow Graph");
+    logger_.info("Computing Control Flow Graph");
     Tracer tracer = newTracer("computeCFG");
     ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true);
     process(cfa);
@@ -1384,7 +1370,7 @@ public class Compiler extends AbstractCompiler {
   }
 
   public void normalize() {
-    logger.info("Normalizing");
+    logger_.info("Normalizing");
     startPass("normalize");
     process(new Normalize(this, false));
     setNormalized();
@@ -1400,13 +1386,13 @@ public class Compiler extends AbstractCompiler {
   }
 
   void recordFunctionInformation() {
-    logger.info("Recording function information");
+    logger_.info("Recording function information");
     startPass("recordFunctionInformation");
     RecordFunctionInformation recordFunctionInfoPass =
         new RecordFunctionInformation(
             this, getPassConfig().getIntermediateState().functionNames);
     process(recordFunctionInfoPass);
-    functionInformationMap = recordFunctionInfoPass.getMap();
+    functionInformationMap_ = recordFunctionInfoPass.getMap();
     endPass();
   }
 
@@ -1439,14 +1425,14 @@ public class Compiler extends AbstractCompiler {
 
   @Override
   public CodingConvention getCodingConvention() {
-    CodingConvention convention = options.getCodingConvention();
+    CodingConvention convention = options_.getCodingConvention();
     convention = convention != null ? convention : defaultCodingConvention;
     return convention;
   }
 
   @Override
   public boolean isIdeMode() {
-    return options.ideMode;
+    return options_.ideMode;
   }
 
   @Override
@@ -1460,7 +1446,7 @@ public class Compiler extends AbstractCompiler {
 
   @Override
   public boolean isTypeCheckingEnabled() {
-    return options.checkTypes;
+    return options_.checkTypes;
   }
 
 
@@ -1471,7 +1457,7 @@ public class Compiler extends AbstractCompiler {
   @Override
   public void report(JSError error) {
     CheckLevel level = error.level;
-    WarningsGuard guard = options.getWarningsGuard();
+    WarningsGuard guard = options_.getWarningsGuard();
     if (guard != null) {
       CheckLevel newLevel = guard.level(error);
       if (newLevel != null) {
@@ -1536,14 +1522,14 @@ public class Compiler extends AbstractCompiler {
   /** Called from the compiler passes, adds debug info */
   @Override
   void addToDebugLog(String str) {
-    debugLog.append(str);
-    debugLog.append('\n');
-    logger.fine(str);
+    debugLog_.append(str);
+    debugLog_.append('\n');
+    logger_.fine(str);
   }
 
   private SourceFile getSourceFileByName(String sourceName) {
-    if (inputsByName.containsKey(sourceName)) {
-      return inputsByName.get(sourceName).getSourceFile();
+    if (inputsByName_.containsKey(sourceName)) {
+      return inputsByName_.get(sourceName).getSourceFile();
     }
     return null;
   }
@@ -1577,22 +1563,28 @@ public class Compiler extends AbstractCompiler {
   @Override
   Node getNodeForCodeInsertion(JSModule module) {
     if (module == null) {
-      if (inputs.length == 0) {
+      if (inputs_.length == 0) {
         throw new IllegalStateException("No inputs");
       }
 
-      return inputs[0].getAstRoot(this);
+      return inputs_[0].getAstRoot(this);
     }
 
     List<CompilerInput> inputs = module.getInputs();
     if (inputs.size() > 0) {
       return inputs.get(0).getAstRoot(this);
     }
+    for (JSModule m : getModuleGraph().getTransitiveDepsDeepestFirst(module)) {
+      inputs = m.getInputs();
+      if (inputs.size() > 0) {
+        return inputs.get(0).getAstRoot(this);
+      }
+    }
     throw new IllegalStateException("Root module has no inputs");
   }
 
   public SourceMap getSourceMap() {
-    return sourceMap;
+    return sourceMap_;
   }
 
   VariableMap getVariableMap() {
@@ -1604,18 +1596,18 @@ public class Compiler extends AbstractCompiler {
   }
 
   CompilerOptions getOptions() {
-    return options;
+    return options_;
   }
 
   FunctionInformationMap getFunctionalInformationMap() {
-    return functionInformationMap;
+    return functionInformationMap_;
   }
 
   /**
    * Sets the logging level for the com.google.javascript.jscomp package.
    */
   public static void setLoggingLevel(Level level) {
-    logger.setLevel(level);
+    logger_.setLevel(level);
   }
 
   /** Gets the DOT graph of the AST generated at the end of compilation. */
@@ -1631,7 +1623,7 @@ public class Compiler extends AbstractCompiler {
 
   @Override
   public ErrorManager getErrorManager() {
-    if (options == null) {
+    if (options_ == null) {
       initOptions(new CompilerOptions());
     }
     return errorManager;
@@ -1670,9 +1662,9 @@ public class Compiler extends AbstractCompiler {
     IntermediateState state = new IntermediateState();
     state.externsRoot = externsRoot;
     state.jsRoot = jsRoot;
-    state.externs = externs;
-    state.inputs = inputs;
-    state.modules = modules;
+    state.externs = externs_;
+    state.inputs = inputs_;
+    state.modules = modules_;
     state.passConfigState = getPassConfig().getIntermediateState();
     state.typeRegistry = typeRegistry;
     state.normalized = normalized;
@@ -1687,9 +1679,9 @@ public class Compiler extends AbstractCompiler {
   public void setState(IntermediateState state) {
     externsRoot = state.externsRoot;
     jsRoot = state.jsRoot;
-    externs = state.externs;
-    inputs = state.inputs;
-    modules = state.modules;
+    externs_ = state.externs;
+    inputs_ = state.inputs;
+    modules_ = state.modules;
     passes = createPassConfigInternal();
     getPassConfig().setIntermediateState(state.passConfigState);
     typeRegistry = state.typeRegistry;
