diff --git a/src/main/java/org/apache/commons/codec/language/bm/Lang.java b/src/main/java/org/apache/commons/codec/language/bm/Lang.java
index a7ebba6e..e9c2e728 100644
--- a/src/main/java/org/apache/commons/codec/language/bm/Lang.java
+++ b/src/main/java/org/apache/commons/codec/language/bm/Lang.java
@@ -95,11 +95,11 @@ public class Lang {
 
     private static final Map<NameType, Lang> Langs = new EnumMap<NameType, Lang>(NameType.class);
 
-    private static final String LANGUAGE_RULES_RN = "org/apache/commons/codec/language/bm/%s_lang.txt";
+    private static final String LANGUAGE_RULES_RN = "org/apache/commons/codec/language/bm/lang.txt";
 
     static {
         for (final NameType s : NameType.values()) {
-            Langs.put(s, loadFromResource(String.format(LANGUAGE_RULES_RN, s.getName()), Languages.getInstance(s)));
+            Langs.put(s, loadFromResource(LANGUAGE_RULES_RN, Languages.getInstance(s)));
         }
     }
 
diff --git a/src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java b/src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java
index 44a3f03a..97cedb29 100644
--- a/src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java
+++ b/src/main/java/org/apache/commons/codec/language/bm/PhoneticEngine.java
@@ -28,7 +28,7 @@ import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
-import java.util.TreeMap;
+import java.util.TreeSet;
 
 import org.apache.commons.codec.language.bm.Languages.LanguageSet;
 import org.apache.commons.codec.language.bm.Rule.Phoneme;
@@ -335,8 +335,7 @@ public class PhoneticEngine {
             return phonemeBuilder;
         }
 
-        final Map<Rule.Phoneme, Rule.Phoneme> phonemes =
-            new TreeMap<Rule.Phoneme, Rule.Phoneme>(Rule.Phoneme.COMPARATOR);
+        final Set<Rule.Phoneme> phonemes = new TreeSet<Rule.Phoneme>(Rule.Phoneme.COMPARATOR);
 
         for (final Rule.Phoneme phoneme : phonemeBuilder.getPhonemes()) {
             PhonemeBuilder subBuilder = PhonemeBuilder.empty(phoneme.getLanguages());
@@ -359,18 +358,10 @@ public class PhoneticEngine {
             // the phonemes map orders the phonemes only based on their text, but ignores the language set
             // when adding new phonemes, check for equal phonemes and merge their language set, otherwise
             // phonemes with the same text but different language set get lost
-            for (final Rule.Phoneme newPhoneme : subBuilder.getPhonemes()) {
-                if (phonemes.containsKey(newPhoneme)) {
-                    final Rule.Phoneme oldPhoneme = phonemes.remove(newPhoneme);
-                    final Rule.Phoneme mergedPhoneme = oldPhoneme.mergeWithLanguage(newPhoneme.getLanguages());
-                    phonemes.put(mergedPhoneme, mergedPhoneme);
-                } else {
-                    phonemes.put(newPhoneme, newPhoneme);
-                }
-            }
+            phonemes.addAll(subBuilder.getPhonemes());
         }
 
-        return new PhonemeBuilder(phonemes.keySet());
+        return new PhonemeBuilder(phonemes);
     }
 
     /**
diff --git a/src/main/java/org/apache/commons/codec/language/bm/Rule.java b/src/main/java/org/apache/commons/codec/language/bm/Rule.java
index 659d2dff..f96ff7c4 100644
--- a/src/main/java/org/apache/commons/codec/language/bm/Rule.java
+++ b/src/main/java/org/apache/commons/codec/language/bm/Rule.java
@@ -155,9 +155,6 @@ public class Rule {
          * @param lang the language set to merge
          * @return a new Phoneme
          */
-        public Phoneme mergeWithLanguage(final LanguageSet lang) {
-          return new Phoneme(this.phonemeText.toString(), this.languages.merge(lang));
-        }
 
         @Override
         public String toString() {
