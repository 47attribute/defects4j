diff --git a/java/org/jsoup/nodes/ElementTest.java b/java/org/jsoup/nodes/ElementTest.java
index 65a795a..3b4c21d 100644
--- a/java/org/jsoup/nodes/ElementTest.java
+++ b/java/org/jsoup/nodes/ElementTest.java
@@ -2,14 +2,11 @@ package org.jsoup.nodes;
 
 import org.jsoup.Jsoup;
 import org.jsoup.TextUtil;
-import org.jsoup.helper.StringUtil;
-import org.jsoup.parser.Tag;
 import org.jsoup.select.Elements;
 import org.junit.Test;
 
 import static org.junit.Assert.*;
 
-import java.util.ArrayList;
 import java.util.List;
 import java.util.Set;
 import java.util.Map;
@@ -555,95 +552,4 @@ public class ElementTest {
             fail("Should throw index out of bounds");
         } catch (IndexOutOfBoundsException e) {}
     }
-
-    @Test
-    public void moveByAppend() {
-        // test for https://github.com/jhy/jsoup/issues/239
-        // can empty an element and append its children to another element
-        Document doc = Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");
-        Element div1 = doc.select("div").get(0);
-        Element div2 = doc.select("div").get(1);
-
-        assertEquals(4, div1.childNodeSize());
-        List<Node> children = div1.childNodes();
-        assertEquals(4, children.size());
-
-        div2.insertChildren(0, children);
-
-        assertEquals(0, children.size()); // children is backed by div1.childNodes, moved, so should be 0 now
-        assertEquals(0, div1.childNodeSize());
-        assertEquals(4, div2.childNodeSize());
-        assertEquals("<div id=\"1\"></div>\n<div id=\"2\">\n Text \n <p>One</p> Text \n <p>Two</p>\n</div>",
-            doc.body().html());
-    }
-
-    @Test
-    public void insertChildrenArgumentValidation() {
-        Document doc = Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");
-        Element div1 = doc.select("div").get(0);
-        Element div2 = doc.select("div").get(1);
-        List<Node> children = div1.childNodes();
-
-        try {
-            div2.insertChildren(6, children);
-            fail();
-        } catch (IllegalArgumentException e) {}
-
-        try {
-            div2.insertChildren(-5, children);
-            fail();
-        } catch (IllegalArgumentException e) {
-        }
-
-        try {
-            div2.insertChildren(0, null);
-            fail();
-        } catch (IllegalArgumentException e) {
-        }
-    }
-
-    @Test
-    public void insertChildrenAtPosition() {
-        Document doc = Jsoup.parse("<div id=1>Text1 <p>One</p> Text2 <p>Two</p></div><div id=2>Text3 <p>Three</p></div>");
-        Element div1 = doc.select("div").get(0);
-        Elements p1s = div1.select("p");
-        Element div2 = doc.select("div").get(1);
-
-        assertEquals(2, div2.childNodeSize());
-        div2.insertChildren(-1, p1s);
-        assertEquals(2, div1.childNodeSize()); // moved two out
-        assertEquals(4, div2.childNodeSize());
-        assertEquals(3, p1s.get(1).siblingIndex()); // should be last
-
-        List<Node> els = new ArrayList<Node>();
-        Element el1 = new Element(Tag.valueOf("span"), "").text("Span1");
-        Element el2 = new Element(Tag.valueOf("span"), "").text("Span2");
-        TextNode tn1 = new TextNode("Text4", "");
-        els.add(el1);
-        els.add(el2);
-        els.add(tn1);
-
-        assertNull(el1.parent());
-        div2.insertChildren(-2, els);
-        assertEquals(div2, el1.parent());
-        assertEquals(7, div2.childNodeSize());
-        assertEquals(3, el1.siblingIndex());
-        assertEquals(4, el2.siblingIndex());
-        assertEquals(5, tn1.siblingIndex());
-    }
-
-    @Test
-    public void insertChildrenAsCopy() {
-        Document doc = Jsoup.parse("<div id=1>Text <p>One</p> Text <p>Two</p></div><div id=2></div>");
-        Element div1 = doc.select("div").get(0);
-        Element div2 = doc.select("div").get(1);
-        Elements ps = doc.select("p").clone();
-        ps.first().text("One cloned");
-        div2.insertChildren(-1, ps);
-
-        assertEquals(4, div1.childNodeSize()); // not moved -- cloned
-        assertEquals(2, div2.childNodeSize());
-        assertEquals("<div id=\"1\">Text <p>One</p> Text <p>Two</p></div><div id=\"2\"><p>One cloned</p><p>Two</p></div>",
-            TextUtil.stripNewlines(doc.body().html()));
-    }
 }
diff --git a/java/org/jsoup/parser/HtmlParserTest.java b/java/org/jsoup/parser/HtmlParserTest.java
index 33b0d33..9a03bab 100644
--- a/java/org/jsoup/parser/HtmlParserTest.java
+++ b/java/org/jsoup/parser/HtmlParserTest.java
@@ -284,7 +284,7 @@ public class HtmlParserTest {
         Element div = doc.getElementById("1");
         assertEquals("<html> <foo><&amp;", div.text());
         assertEquals(0, div.children().size());
-        assertEquals(1, div.childNodeSize()); // no elements, one text node
+        assertEquals(1, div.childNodes().size()); // no elements, one text node
     }
 
     @Test public void handlesInvalidStartTags() {
diff --git a/java/org/jsoup/safety/CleanerTest.java b/java/org/jsoup/safety/CleanerTest.java
index 3d9dfd2..3b2e30f 100644
--- a/java/org/jsoup/safety/CleanerTest.java
+++ b/java/org/jsoup/safety/CleanerTest.java
@@ -176,7 +176,7 @@ public class CleanerTest {
         Document dirtyDoc = Jsoup.parse(dirty);
         Document cleanDoc = new Cleaner(Whitelist.basic()).clean(dirtyDoc);
         assertFalse(cleanDoc == null);
-        assertEquals(0, cleanDoc.body().childNodeSize());
+        assertEquals(0, cleanDoc.body().childNodes().size());
     }
 
     @Test public void cleansInternationalText() {
