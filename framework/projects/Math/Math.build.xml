<project name="Math"  basedir="${basedir}">

    <property name="script.dir" value="${user.dir}"/>
    <property name="junit.jar" value="${script.dir}/projects/lib/junit-4.11.jar"/>

    <!-- Include existing project build file -->
    <import file="${basedir}/build.xml"/>
    <!-- Include project build file, which provides targets to mutate classes
         and run the mutation analysis-->

    <!-- build.home is not set in old repository layout -->
    <property name="build.home" value="${classesdir}/.." />
    <property name="classes.dir" value="${build.home}/classes" />

    <import file="../project.build.xml"/>

    <!-- Directory of the test sources, the default is the directory of the
         existing tests --> 
    <property name="bug-db.test.dir" value="${test.home}"/> 

    <!-- Classpath to run mutation analysis --> 
    <path id="major.classpath">
        <path refid="test.classpath"/>
        <pathelement path="${junit.jar}" />
    </path>

    <!-- Fixing ant script in case compile-tests is defined instead of compile.tests -->
    <scriptdef name="hastarget" language="javascript">
         <attribute name="targetname" />
     <attribute name="newtargetname" />
     <attribute name="setproperty" />
         <![CDATA[
           var targetname = attributes.get("targetname");
       var newtargetname = attributes.get("newtargetname");
       var setproperty = attributes.get("setproperty");
       if(project.getTargets().containsKey(targetname)) {
        var newTarget = new org.apache.tools.ant.Target();
        newTarget.addDependency(targetname);
        newTarget.setName(newtargetname);
            project.addTarget(newtargetname, newTarget);
        project.setProperty(setproperty, "yes");
        }           
         ]]>
    </scriptdef>

    <hastarget targetname="compile-tests" newtargetname="compile.tests" setproperty="oldLayout" />
    <path id="build.classpath">
    <pathelement location="${script.dir}/projects/Math/lib/commons-discovery-0.5.jar" />
    </path>
    <if> <isset property="oldLayout" /> <then>
        <property name ="test.home" value="${basedir}/src/test" />
        <property name ="build.home" value="${defaulttargetdir}" />
        <property name="noget" value="true" />
        <path id="test.classpath">
            <pathelement path="${testclassesdir}" />
                <pathelement path="${classesdir}" />
                <pathelement path="${junit.jar}" />
        </path>
        <path id="compile.classpath">
            <pathelement path="${classesdir}" />
        </path>

    </then> </if>
    <!-- end of fixing ant script -->

    <!-- List of all tests that reliably pass on the fixed version -->
    <fileset id="all.manual.tests" dir="${test.home}" excludes="${exclude.list}">
        <include name="**/*Test.java"/>
        <include name="**/*TestBinary.java"/>
        <include name="**/*TestPermutations.java"/>
        <exclude name="**/random/*.java"/>
        <exclude name="**/*Abstract*Test.java"/>
        <exclude name="**/random/*.java"/>
    </fileset>

<!--
    Run tests
-->
    <target name="test"  depends="compile.tests" description="Run unit tests">
      <junit printsummary="no" fork="no" showOutput="no"> 
           <classpath refid="test.classpath"/>
           <classpath>
              <pathelement path="${formatter_cp}" />
              <path refid="cobertura.classpath.include" />
           </classpath>
           <sysproperty key="OUTFILE" value="${OUTFILE}"/>
           <formatter classname="edu.washington.cs.mut.testrunner.Formatter" usefile="false" />
           <test name="${test.entry.class}" methods="${test.entry.method}" if="test.entry.class"/>
           <batchtest unless="test.entry.class" >
                <fileset refid="all.manual.tests" />
           </batchtest>
       </junit>
        <!-- fail build in case we are running all classes, but there are none in the fileset -->
        <if> <not> <isset property="test.entry.class" /> </not> <then>
            <pathconvert refid="all.manual.tests" property="fileset.notempty" setonempty="false" />
            <fail unless="fileset.notempty" message="Test is running with empty fileset" />
        </then> </if>
  </target>
</project>
