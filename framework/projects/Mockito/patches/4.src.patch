diff --git a/org/mockito/exceptions/Reporter.java b/org/mockito/exceptions/Reporter.java
index d57e33d..7ae7588 100644
--- a/org/mockito/exceptions/Reporter.java
+++ b/org/mockito/exceptions/Reporter.java
@@ -22,7 +22,6 @@ import org.mockito.invocation.Invocation;
 import org.mockito.invocation.InvocationOnMock;
 import org.mockito.invocation.Location;
 import org.mockito.listeners.InvocationListener;
-import org.mockito.mock.MockName;
 import org.mockito.mock.SerializableMode;
 
 import java.lang.reflect.Field;
@@ -421,7 +420,7 @@ public class Reporter {
         throw new NoInteractionsWanted(join(
                 "No interactions wanted here:",
                 new LocationImpl(),
-                "But found this interaction on mock '" + safelyGetMockName(undesired.getMock()) + "':",
+                "But found this interaction on mock '" + undesired.getMock() + "':",
                 undesired.getLocation(),
                 scenario
         ));
@@ -431,7 +430,7 @@ public class Reporter {
         throw new VerificationInOrderFailure(join(
                 "No interactions wanted here:",
                 new LocationImpl(),
-                "But found this interaction on mock '" + safelyGetMockName(undesired.getMock()) + "':",
+                "But found this interaction on mock '" + undesired.getMock() + "':",
                 undesired.getLocation()
         ));
     }
@@ -665,21 +664,14 @@ public class Reporter {
 
     public void cannotInjectDependency(Field field, Object matchingMock, Exception details) {
         throw new MockitoException(join(
-                "Mockito couldn't inject mock dependency '" + safelyGetMockName(matchingMock) + "' on field ",
+                "Mockito couldn't inject mock dependency '" + new MockUtil().getMockName(matchingMock) + "' on field ",
                 "'" + field + "'",
                 "whose type '" + field.getDeclaringClass().getCanonicalName() + "' was annotated by @InjectMocks in your test.",
-                "Also I failed because: " + exceptionCauseMessageIfAvailable(details),
+                "Also I failed because: " + details.getCause().getMessage(),
                 ""
         ), details);
     }
 
-    private String exceptionCauseMessageIfAvailable(Exception details) {
-        if (details.getCause() == null) {
-            return details.getMessage();
-        }
-        return details.getCause().getMessage();
-    }
-
     public void mockedTypeIsInconsistentWithDelegatedInstanceType(Class mockedType, Object delegatedInstance) {
         throw new MockitoException(join(
                 "Mocked type must be the same as the type of your delegated instance.",
@@ -707,7 +699,7 @@ public class Reporter {
     public int invalidArgumentPositionRangeAtInvocationTime(InvocationOnMock invocation, boolean willReturnLastParameter, int argumentIndex) {
         throw new MockitoException(
                 join("Invalid argument index for the current invocation of method : ",
-                        " -> " + safelyGetMockName(invocation.getMock()) + "." + invocation.getMethod().getName() + "()",
+                        " -> " + new MockUtil().getMockName(invocation.getMock()) + "." + invocation.getMethod().getName() + "()",
                         "",
                         (willReturnLastParameter ?
                                 "Last parameter wanted" :
@@ -740,7 +732,7 @@ public class Reporter {
         throw new WrongTypeOfReturnValue(join(
                 "The argument of type '" + actualType.getSimpleName() + "' cannot be returned because the following ",
                 "method should return the type '" + expectedType + "'",
-                " -> " + safelyGetMockName(invocation.getMock()) + "." + invocation.getMethod().getName() + "()",
+                " -> " + new MockUtil().getMockName(invocation.getMock()) + "." + invocation.getMethod().getName() + "()",
                 "",
                 "The reason for this error can be :",
                 "1. The wanted argument position is incorrect.",
@@ -773,11 +765,11 @@ public class Reporter {
                 ""
         ));
     }
-
+    
     public void delegatedMethodHasWrongReturnType(Method mockMethod, Method delegateMethod, Object mock, Object delegate) {
     	throw new MockitoException(join(
     	        "Methods called on delegated instance must have compatible return types with the mock.",
-    	        "When calling: " + mockMethod + " on mock: " + safelyGetMockName(mock),
+    	        "When calling: " + mockMethod + " on mock: " + new MockUtil().getMockName(mock),
     	        "return type should be: " + mockMethod.getReturnType().getSimpleName() + ", but was: " + delegateMethod.getReturnType().getSimpleName(),
     	        "Check that the instance passed to delegatesTo() is of the correct type or contains compatible methods",
     	        "(delegate instance had type: " + delegate.getClass().getSimpleName() + ")"
@@ -787,7 +779,7 @@ public class Reporter {
 	public void delegatedMethodDoesNotExistOnDelegate(Method mockMethod, Object mock, Object delegate) {
 		throw new MockitoException(join(
     	        "Methods called on mock must exist in delegated instance.",
-    	        "When calling: " + mockMethod + " on mock: " + safelyGetMockName(mock),
+    	        "When calling: " + mockMethod + " on mock: " + new MockUtil().getMockName(mock),
     	        "no such method was found.",
     	        "Check that the instance passed to delegatesTo() is of the correct type or contains compatible methods",
     	        "(delegate instance had type: " + delegate.getClass().getSimpleName() + ")"
@@ -797,8 +789,4 @@ public class Reporter {
     public void usingConstructorWithFancySerializable(SerializableMode mode) {
         throw new MockitoException("Mocks instantiated with constructor cannot be combined with " + mode + " serialization mode.");
     }
-
-    private MockName safelyGetMockName(Object mock) {
-        return new MockUtil().getMockName(mock);
-    }
 }
