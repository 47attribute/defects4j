<project name="D4J-Time"  basedir="${basedir}">

    <fail message="Property d4j.home not set!" unless="d4j.home" />
    <property name="junit.jar" value="${d4j.home}/framework/projects/lib/junit-4.11.jar" />
    <property name="config.jar" value="${d4j.home}/major/config/config.jar" />
    <property name="jodaconvert.jar" value="${d4j.home}/framework/projects/Time/lib/joda-convert-1.2.jar" />

    <!-- No downloading of dependencies will be allowed. :( -->
    <property name="maven.settings.offline" value="true" />
    <property name="maven.repo.local" value="${d4j.home}/framework/projects/Time/lib/" />

    <!-- Generate all debugging information -->
    <property name="compile.debuglevel" value="lines,source,vars" />

    <!-- Include existing project build file -->
    <import file="${basedir}/build.xml" />

    <!-- Import general build file -->
    <import file="../defects4j.build.xml" />

    <!-- Values necessary for mutation scripting to work -->
    <if> <isset property="ant.refid:compile.classpath" />
          <then>
            <property name="test.dir" value="${test.home}" />
          </then>
          <else>
            <property name="oldversion" value="yes" />
            <path id="compile.classpath" refid="build.classpath" />
            <path id="test.classpath"    refid="build.test.classpath" />
            <property name="test.dir" value="${maven.build.testDir.0}" />
            <property name="source.home" value="${maven.build.srcDir.0}" />
          </else>
    </if>
    <property name="test.home" value="${maven.build.testOutputDir}" />
    <condition property="classes.dir" value="${maven.build.outputDir}" else="${build.classes}">
        <isset property="maven.build.outputDir" />
    </condition>
    <property name="build.home" value="${classes.dir}/.." />

    <target name="compile.tests" depends="joda-time.compile.tests"> </target>

    <property name="tz.build.notneeded" value="true" />
    <target name="compile" depends="joda-time.compile">
      <if> <isset property="oldversion" /> <then>
        <java classname="org.joda.time.tz.ZoneInfoCompiler" failonerror="yes">
          <classpath>
            <path refid="compile.classpath" />
            <pathelement path="${classes.dir}" />
            <pathelement location="${config.jar}" />
            <path refid="cobertura.classpath.include" />
          </classpath>
          <sysproperty key="org.joda.time.DateTimeZone.Provider" value ="org.joda.time.tz.UTCProvider" />
          <arg value="-src" />
          <arg value="${maven.build.srcDir.0}/org/joda/time/tz/src" />
          <arg value="-dst" />
          <arg value="${maven.build.outputDir}/org/joda/time/tz/data" />
          <arg value="africa" />
          <arg value="antarctica" />
          <arg value="asia" />
          <arg value="australasia" />
          <arg value="europe" />
          <arg value="northamerica" />
          <arg value="southamerica" />
          <arg value="pacificnew" />
          <arg value="etcetera" />
          <arg value="backward" />
          <arg value="systemv" />
        </java>
      </then> <else>
        <mkdir dir="${build.tz}" />
        <java classname="org.joda.time.tz.ZoneInfoCompiler" failonerror="yes">
          <classpath>
            <path refid="compile.classpath" />
            <pathelement path="${classes.dir}" />
            <pathelement location="${config.jar}" />
            <path refid="cobertura.classpath.include" />
          </classpath>
          <sysproperty key="org.joda.time.DateTimeZone.Provider" value ="org.joda.time.tz.UTCProvider" />
          <arg line="-src ${source.tz} -dst ${build.tz}" />
          <arg value="africa" />
          <arg value="antarctica" />
          <arg value="asia" />
          <arg value="australasia" />
          <arg value="europe" />
          <arg value="northamerica" />
          <arg value="southamerica" />
          <arg value="pacificnew" />
          <arg value="etcetera" />
          <arg value="backward" />
          <arg value="systemv" />
        </java>
      </else> </if>
    </target>

    <!-- List of all developer-written tests that reliably pass on the fixed version -->
    <fileset id="all.manual.tests" dir="${test.dir}" excludes="${d4j.tests.exclude}">
        <include name="**/TestAll.java" />
        <exclude name="**/*Abstract*Test.java" />
    </fileset>

    <!-- Classpath to run developer-written tests -->
    <path id="d4j.test.classpath">
        <path refid="compile.classpath" />
        <path refid="test.classpath" />
        <pathelement path="${classes.dir}" />
        <pathelement path="${test.home}" />
    </path>
</project>
