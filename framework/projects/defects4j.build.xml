<project name="Defects4J" basedir="${basedir}">
    <!-- Ensure basedir is properly set -->
    <fail message="Directory ${basedir} is not a Defects4J working directory!">
        <condition>
            <not> <available file="${basedir}/defects4j.build.properties" /> </not>
        </condition>
    </fail>
    <property name="d4j.workdir" value="${basedir}" />
    <!-- Check whether d4j.home is set -->
    <fail message="Property d4j.home not set!" unless="d4j.home" />

    <taskdef resource="net/sf/antcontrib/antlib.xml"
            classpath="${d4j.home}/framework/lib/ant-contrib.jar"/>

    <!-- Dependencies used by all projects -->
    <property name="junit.jar"  value="${d4j.home}/framework/projects/lib/junit-4.11.jar"/>
    <property name="jcrasher.jar"  value="${d4j.home}/framework/projects/lib/jcrasher-2.1.3.jar"/>
    <property name="cobertura.jar" value="${d4j.home}/framework/projects/lib/cobertura-2.0.3.jar"/>
    <!-- Location of customized JUnit formatter-->
    <property name="formatter.jar" value="${d4j.home}/framework/lib/formatter.jar"/>

    <!-- Additional properties such as tests to exclude.
         This property file is automatically generated. -->
    <property file="${d4j.workdir}/defects4j.build.properties"/>

<!--
     Check whether all properties and paths are configured
-->
    <target name="sanity.check" description="Check whether project version is correctly set up">
        <fail unless="d4j.home"/>
        <fail unless="d4j.workdir"/>
        <fail unless="d4j.project.id"/>
        <fail unless="d4j.bug.id"/>
        <fail unless="d4j.dir.src.classes"/>
        <fail unless="d4j.dir.src.tests"/>
        <fail unless="d4j.classes.modified"/>
        <fail unless="test.home"/>
        <fail unless="build.home"/>
        <fail unless="ant.refid:d4j.test.classpath"/>
        <fail unless="ant.refid:compile.classpath"/>
        <fail unless="ant.refid:all.manual.tests" />
    </target>

<!--
    Run developer-written tests
-->
    <target name="run.dev.tests"  depends="compile.tests" description="Run unit tests">
        <junit printsummary="yes" haltonfailure="no" haltonerror="no" fork="no" showOutput="true">
            <classpath refid="d4j.test.classpath"/>
            <classpath refid="cobertura.classpath.include"/>
            <classpath>
                <pathelement path="${formatter.jar}" />
            </classpath>

            <sysproperty key="OUTFILE" value="${OUTFILE}"/>
            <formatter classname="edu.washington.cs.mut.testrunner.Formatter" usefile="false" />
            <test name="${test.entry.class}" methods="${test.entry.method}" if="test.entry.class" />
            <batchtest unless="test.entry.class">
                <fileset refid="all.manual.tests" />
            </batchtest>
        </junit>
        <!-- fail build in case we are running all classes, but there are none in the fileset -->
        <if> <not> <isset property="test.entry.class" /> </not> <then>
            <pathconvert refid="all.manual.tests" property="fileset.notempty" setonempty="false" />
            <fail unless="fileset.notempty" message="Test is running with empty fileset" />
        </then> </if>
    </target>

<!--
    Run individual test and monitor class loader
    Test has to be provided as property "test.entry" (class::method)
    and the output is redirected to "test.output"
-->
    <target name="monitor.test"  description="Run a single test class or method and monitor class loader">
        <fail message="Property test.entry not set!" unless="test.entry" />
        <fail message="Property test.output not set!" unless="test.output" />

        <java fork="true" classname="edu.washington.cs.mut.testrunner.SingleTestRunner"
              output="${test.output}" failonerror="true" logError="true">

            <arg value="${test.entry}"/>
            <jvmarg value="-verbose:class"/>
            <classpath refid="d4j.test.classpath"/>
            <classpath>
                <pathelement path="${formatter.jar}" />
            </classpath>
        </java>
    </target>

<!--
    Mutate all classes
-->
    <target name="mutate">
        <!--
        Set compiler property to change default compiler to compiler
        adapter "MajorCompiler". This simple ant compiler adapter will
        invoke a compiler executable named "major", which has to be on
        the PATH!

        -->
        <property name="build.compiler" value="major.ant.MajorCompiler"/>
        <!-- Call original compile target -->
        <antcall target="compile"/>
    </target>

<!--
    Run mutation analysis
-->
    <target name="mutation.test" description="Perform mutation analysis">
        <!-- Test a generated test suite -->
        <if><isset property="d4j.test.include"/>
            <then>
                <fileset id="major.tests" dir="${d4j.test.dir}">
                    <include name="**/${d4j.test.include}"/>
                </fileset>
            </then>
            <else>
                <!-- Test existing test suite -->
                <fail message="File set all.manual.tests not set!" unless="ant.refid:all.manual.tests" />
                <fileset id="major.tests" refid="all.manual.tests" />
            </else>
        </if>

        <fail message="Property major.exclude not set!" unless="major.exclude" />
        <fail message="Property major.kill.log not set!" unless="major.kill.log" />

        <echo message="Running mutation analysis ..."/>
        <junit
            printsummary="false"
            showoutput="false"
            fork="no"

            mutationAnalysis="true"
            timeoutFactor="16"
            haltonfailure="true"
            killDetailsFile="${major.kill.log}"
            excludeFile="${major.exclude}"
            >

            <!--
            Setting haltonfailure to false leads to the exclusion of
            failing tests -> usually all tests should pass!
            -->

            <classpath refid="d4j.test.classpath"/>
            <classpath>
                <pathelement path="${build.home}/gen-tests" />
            </classpath>

            <test name="${test.entry.class}" if="test.entry.class" />
            <batchtest unless="test.entry.class" fork="no">
                <fileset refid="major.tests"/>
            </batchtest>
        </junit>
    </target>

<!--
    Compile generated unit tests
-->
    <target name="compile.gen.tests" depends="compile" description="Compile generated tests">
        <!-- d4j.test.dir, build.home, and classes.dir properties have to be provided by caller! -->
        <fail message="Property d4j.test.dir not set!" unless="d4j.test.dir" />
        <fail message="Property build.home not set!" unless="build.home" />
        <fail message="Property classes.dir not set!" unless="classes.dir" />

        <echo message="classes.dir: ${classes.dir}" />
        <echo message="build.home: ${build.home}" />

        <mkdir dir="${build.home}/gen-tests" />
        <javac srcdir="${d4j.test.dir}"
               destdir="${build.home}/gen-tests"
               debug="true"
               deprecation="false"
               optimize="false">
               <classpath>
                    <path refid="d4j.test.classpath" />
                    <pathelement path="${classes.dir}" />
                    <!-- Add dependencies to test generation tools -->
                    <pathelement path="${jcrasher.jar}" />
               </classpath>
        </javac>
    </target>

<!--
    Run generated tests
-->
    <target name="run.gen.tests"  depends="compile.gen.tests" description="Run generated tests">
        <!-- d4j.test.dir, d4j.test.include, and class.dir properties have to be provided by caller! -->
        <fail message="Property d4j.test.dir not set!" unless="d4j.test.dir" />
        <fail message="Property d4j.test.include not set!" unless="d4j.test.include" />
        <fail message="Property classes.dir not set!" unless="classes.dir" />

        <echo message="classes.dir: ${classes.dir}" />
        <echo message="build.home: ${build.home}" />

        <junit printsummary="no" haltonfailure="no" haltonerror="no" fork="no" showOutput="true">
            <classpath refid="d4j.test.classpath"/>
            <classpath>
                <pathelement path="${build.home}/gen-tests" />
                <pathelement path="${formatter.jar}" />
                <pathelement path="${classes.dir}" />
                <!-- Add dependencies to test generation tools -->
                <pathelement path="${jcrasher.jar}" />
                <!-- Add dependencies to code coverage tools -->
                <pathelement path="${cobertura.jar}" />
            </classpath>

            <sysproperty key="OUTFILE" value="${OUTFILE}"/>
            <formatter classname="edu.washington.cs.mut.testrunner.Formatter" usefile="false" />
            <test name="${test.entry.class}" methods="${test.entry.method}" if="test.entry.class" />
                <batchtest unless="test.entry.class">
                    <fileset dir="${d4j.test.dir}">
                        <include name="**/${d4j.test.include}"/>
                    </fileset>
                </batchtest>
        </junit>
    </target>


<!--
    Instrument for cobertura
    TODO: Clean up the confusing classpath IDs and property names
-->
    <property name="cobertura.dir" value="${d4j.home}/framework/projects/lib/" />
    <path id="cobertura.classpath">
        <fileset dir="${cobertura.dir}">
            <include name="cobertura-2.0.3.jar" />
            <include name="cobertura-lib/**/*.jar" />
        </fileset>
    </path>
    <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />


    <path id="cobertura.classpath.include" />

    <target name="coverage.instrument" depends="compile">
        <pathconvert refid="cobertura.classpath" property="cobertura.classpath.property" />

        <cobertura-instrument failOnError="true" toDir="${classes.dir}/instrumented">
            <fileset dir="${classes.dir}" includes="${d4j.classes.instrument}" />
            <auxClasspath path="${cobertura.aux.classpath}" />
        </cobertura-instrument>
        <copy todir="${classes.dir}" failOnError="true">
            <fileset dir="${classes.dir}/instrumented" />
        </copy>
    </target>

    <target name="coverage">
        <antcall target="test">
            <reference refid="cobertura.classpath" torefid="cobertura.classpath.include" />
        </antcall>
    </target>

    <target name="coverage.report">
        <property name="coverage.dir" value="${d4j.workdir}/coverage" />
        <mkdir dir="${coverage.dir}" />

        <!-- <cobertura-report format="html" destdir="${coverage.dir}" srcdir="${coverage.src.dir}" /> -->
        <cobertura-report format="xml" destdir="${coverage.dir}" srcdir="${coverage.src.dir}" />
    </target>

    <!-- Include build file that defines all export targets -->
    <import file="${d4j.home}/framework/projects/defects4j.export.xml"/>

    <!-- Include project-specific build file -->
    <import file="${d4j.home}/framework/projects/${d4j.project.id}/${d4j.project.id}.build.xml"/>
</project>
