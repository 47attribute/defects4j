<project name="Defects4J" >
    <taskdef resource="net/sf/antcontrib/antlib.xml" />

    <!-- Additional properties such as tests to exclude.
         This property file is automatically generated. -->
    <property file="${basedir}/defects4j.build.properties"/>

    <property name="jcrasher.jar" value="${script.dir}/projects/lib/jcrasher-2.1.3.jar"/>
    <property name="cobertura.jar" value="${script.dir}/projects/lib/cobertura-2.0.3.jar"/>

<!--
     Check whether all properties and paths are configured
-->
    <target name="sanity.check" description="Check whether project version is correctly set up">
        <fail unless="d4j.dir.src.classes"/>
        <fail unless="d4j.dir.src.tests"/>
        <fail unless="d4j.classes.modified"/>
        <fail unless="test.home"/>
        <fail unless="build.home"/>
        <fail unless="ant.refid:test.classpath"/>
        <fail unless="ant.refid:compile.classpath"/>
        <fail unless="ant.refid:major.classpath"/>
        <fail unless="ant.refid:all.manual.tests" />
    </target>

<!--
    Run individual test and monitor class loader
    Test has to be provided as property "test.entry" (class::method)
    and the output is redirected to "test.output"
-->
    <target name="monitor.test"  description="Run a single test class or method and monitor class loader">
        <fail message="Property test.entry not set!" unless="test.entry" />
        <fail message="Property test.output not set!" unless="test.output" />

        <java fork="true" classname="edu.washington.cs.mut.testrunner.SingleTestRunner"
              output="${test.output}" failonerror="true" logError="true">

            <arg value="${test.entry}"/>
            <jvmarg value="-verbose:class"/>
            <classpath>
                <path refid="major.classpath" />
                <pathelement path="${formatter_cp}" />
                <pathelement path="${junit.jar}" />
            </classpath>
        </java>
    </target>

<!--
    Mutate all classes
-->
    <target name="mutate">
        <!--
        Set compiler property to change default compiler to compiler
        adapter "MajorCompiler". This simple ant compiler adapter will
        invoke a compiler executable named "major", which has to be on
        the PATH!

        -->
        <property name="build.compiler" value="major.ant.MajorCompiler"/>
        <!-- Call original compile target -->
        <antcall target="compile"/>
    </target>

<!--
    Run mutation analysis
-->
    <target name="mutation.test" description="Perform mutation analysis">
        <!-- Test a generated test suite -->
        <if><isset property="test.include"/>
            <then>
                <fileset id="major.tests" dir="${bug-db.test.dir}">
                    <include name="**/${test.include}"/>
                    <exclude name="**/WashingtonSuite.java"/>
                </fileset>
            </then>
            <else>
                <!-- Test existing test suite -->
                <fail message="File set all.manual.tests not set!" unless="ant.refid:all.manual.tests" />
                <fileset id="major.tests" refid="all.manual.tests" />
            </else>
        </if>

        <fail message="Property major.exclude not set!" unless="major.exclude" />
        <fail message="Property major.kill.log not set!" unless="major.kill.log" />

        <echo message="Running mutation analysis ..."/>
        <junit
            printsummary="false"
            showoutput="false"
            fork="no"

            mutationAnalysis="true"
            timeoutFactor="16"
            haltonfailure="true"
            killDetailsFile="${major.kill.log}"
            excludeFile="${major.exclude}"
            >

            <!--
            Setting haltonfailure to false leads to the exclusion of
            failing tests -> usually all tests should pass!
            -->

            <classpath>
                <pathelement path="${build.home}/gen-tests" />
            </classpath>
            <classpath refid="major.classpath"/>

            <test name="${test.entry.class}" if="test.entry.class" />
            <batchtest unless="test.entry.class" fork="no">
                <fileset refid="major.tests"/>
            </batchtest>
        </junit>
    </target>

<!--
    Compile generated unit tests
-->
    <target name="compile.gen.tests" depends="compile" description="Compile generated tests">
        <!-- bug-db.test.dir, build.home, and classes.dir properties have to be provided by caller! -->
        <fail message="Property bug-db.test.dir not set!" unless="bug-db.test.dir" />
        <fail message="Property build.home not set!" unless="build.home" />
        <fail message="Property classes.dir not set!" unless="classes.dir" />

        <echo message="classes.dir: ${classes.dir}" />
        <echo message="build.home: ${build.home}" />

        <mkdir dir="${build.home}/gen-tests" />
        <javac srcdir="${bug-db.test.dir}"
               destdir="${build.home}/gen-tests"
               debug="true"
               deprecation="false"
               optimize="false">
               <classpath>
                    <path refid="test.classpath" />
                    <pathelement path="${classes.dir}" />
                    <!-- Add dependencies to test generation tools -->
                    <pathelement path="${jcrasher.jar}" />
               </classpath>
        </javac>
    </target>

<!--
    Run generated tests
-->
    <target name="run.gen.tests"  depends="compile.gen.tests" description="Run generated tests">
        <!-- test.dir, test.include, and class.dir properties have to be provided by caller! -->
        <fail message="Property bug-db.test.dir not set!" unless="bug-db.test.dir" />
        <fail message="Property test.include not set!" unless="test.include" />
        <fail message="Property classes.dir not set!" unless="classes.dir" />

        <echo message="classes.dir: ${classes.dir}" />
        <echo message="build.home: ${build.home}" />

        <junit printsummary="no" haltonfailure="no" haltonerror="no" fork="no" showOutput="true">
            <classpath>
                <pathelement path="${build.home}/gen-tests" />
                <pathelement path="${formatter_cp}" />
                <pathelement path="${classes.dir}" />
                <!-- Add dependencies to test generation tools -->
                <pathelement path="${jcrasher.jar}" />
                <!-- Add dependencies to code coverage tools -->
                <pathelement path="${cobertura.jar}" />
            </classpath>
            <classpath refid="major.classpath"/>

            <sysproperty key="OUTFILE" value="${OUTFILE}"/>
            <formatter classname="edu.washington.cs.mut.testrunner.Formatter" usefile="false" />
            <test name="${test.entry.class}" methods="${test.entry.method}" if="test.entry.class" />
                <batchtest unless="test.entry.class">
                    <fileset dir="${bug-db.test.dir}">
                        <include name="**/${test.include}"/>
                        <exclude name="**/WashingtonSuite.java"/>
                    </fileset>
                </batchtest>
        </junit>
    </target>


<!--
    Instrument for cobertura
-->
    <property name="cobertura.dir" value="${script.dir}/projects/lib/" />
    <path id="cobertura.classpath">
        <fileset dir="${cobertura.dir}">
            <include name="cobertura-2.0.3.jar" />
            <include name="cobertura-lib/**/*.jar" />
        </fileset>
    </path>
    <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />


    <path id="cobertura.classpath.include" />

    <target name="coverage.instrument" depends="compile">
        <pathconvert refid="cobertura.classpath" property="cobertura.classpath.property" />

        <cobertura-instrument failOnError="true" toDir="${classes.dir}/instrumented">
            <fileset dir="${classes.dir}" includes="${d4j.classes.instrument}" />
            <auxClasspath path="${cobertura.aux.classpath}" />
        </cobertura-instrument>
        <copy todir="${classes.dir}" failOnError="true">
            <fileset dir="${classes.dir}/instrumented" />
        </copy>
    </target>

    <target name="coverage">
        <antcall target="test">
            <reference refid="cobertura.classpath" torefid="cobertura.classpath.include" />
        </antcall>
    </target>

    <target name="coverage.report">
        <property name="coverage.dir" value="${basedir}/coverage" />
        <mkdir dir="${coverage.dir}" />

        <!-- <cobertura-report format="html" destdir="${coverage.dir}" srcdir="${coverage.src.dir}" /> -->
        <cobertura-report format="xml" destdir="${coverage.dir}" srcdir="${coverage.src.dir}" />
    </target>

<!--
################################################################################
    Export targets
################################################################################
-->

<!-- Source directory of classes -->
    <target name="export.dir.src.classes"
            description="Source directory of classes">
        <fail message="Property file.export not set!" unless="file.export" />

        <echo message="${d4j.dir.src.classes}" file="${file.export}"/>
    </target>

<!-- Source directory of tests -->
    <target name="export.dir.src.tests"
            description="Source directory of tests">
        <fail message="Property file.export not set!" unless="file.export" />

        <echo message="${d4j.dir.src.tests}" file="${file.export}"/>
    </target>

<!-- Compile classpath -->
    <target name="export.cp.compile" depends="compile"
            description="Classpath to compile the project">
        <fail message="Property file.export not set!" unless="file.export" />

        <path id="project.classpath">
            <pathelement path="${classes.dir}" />
            <path refid="compile.classpath" />
        </path>

        <pathconvert property="cp.compile" refid="project.classpath" />
        <echo message="${cp.compile}" file="${file.export}"/>
    </target>

<!-- Test classpath -->
    <target name="export.cp.test" depends="compile"
            description="Classpath to compile and run the developer-written tests">
        <fail message="Property file.export not set!" unless="file.export" />

        <pathconvert property="cp.test" refid="test.classpath" />
        <echo message="${cp.test}" file="${file.export}"/>
    </target>

<!-- Modified classes -->
    <target name="export.classes.modified"
            description="Classes modified by the bug fix">
        <fail message="Property file.export not set!" unless="file.export" />

        <echo message="${d4j.classes.modified}" file="${file.export}"/>

        <loadfile property="classes.mod" srcFile="${file.export}">
        <filterchain>
            <tokenfilter>
                <replaceregex pattern="[,;]" replace="${line.separator}" flags="g"/>
            </tokenfilter>
        </filterchain>
        </loadfile>
        <echo message="${classes.mod}" file="${file.export}"/>
    </target>

<!-- Trigger tests -->
    <target name="export.tests.trigger"
            description="Trigger tests that expose the bug">
        <fail message="Property file.export not set!" unless="file.export" />

        <echo message="${d4j.tests.trigger}" file="${file.export}"/>

        <loadfile property="trigger.tests" srcFile="${file.export}">
        <filterchain>
            <tokenfilter>
                <replaceregex pattern="[,;]" replace="${line.separator}" flags="g"/>
            </tokenfilter>
        </filterchain>
        </loadfile>
        <echo message="${trigger.tests}" file="${file.export}"/>
    </target>

<!-- Relevant tests -->
    <target name="export.tests.relevant"
            description="Relevant tests that touch at least one of the modified sources">
        <fail message="Property file.export not set!" unless="file.export" />

        <loadfile property="relevant.tests"
            srcFile="${script.dir}/projects/${d4j.project.id}/relevant_tests/${d4j.bug.id}" />
        <echo message="${relevant.tests}" file="${file.export}" />
    </target>


<!-- TODO: Closure defines the file set of tests on the target directory, which
requires the dependency to the compile targets. Can we get rid of this special
case? -->
<!-- List of all manual test classes -->
    <target name="export.tests.all" depends="compile, compile.tests"
            description="List of all developer-written tests">
        <fail message="Property file.export not set!" unless="file.export" />
        <fail message="File set all.manual.tests not set!" unless="ant.refid:all.manual.tests" />

        <!-- Get all developer-written tests, separated by newline -->
        <pathconvert pathsep="${line.separator}" property="tmp.tests" refid="all.manual.tests" />
        <echo message="${tmp.tests}" file="${file.export}"/>
        <!-- Get fully qualified class names, i.e., remove path prefix,
             replace file separator by '.' and remove ".java" or ".class" -->
        <property name="src.prefix" location="${basedir}${file.separator}${d4j.dir.src.tests}"/>
        <property name="bin.prefix" location="${test.home}"/>
        <loadfile property="all.tests" srcFile="${file.export}">
        <filterchain>
            <tokenfilter>
                <replaceregex pattern="${src.prefix}${file.separator}" replace="" />
                <replaceregex pattern="${bin.prefix}${file.separator}" replace="" />
                <replaceregex pattern="${file.separator}" replace="." flags="g" />
                <replaceregex pattern=".java$" replace="" />
                <replaceregex pattern=".class$" replace="" />
            </tokenfilter>
        </filterchain>
        </loadfile>
        <echo message="${all.tests}" file="${file.export}"/>
    </target>
</project>
